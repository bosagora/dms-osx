{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/FranchiseeCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ValidatorCollection.sol\";\n\n/// @notice 가맹점컬랙션\ncontract FranchiseeCollection {\n    /// @notice Hash value of a blank string\n    bytes32 public constant NULL = 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855;\n\n    /// @notice 검증자의 상태코드\n    enum FranchiseeStatus {\n        INVALID,\n        ACTIVE\n    }\n\n    /// @notice 가맹점의 데이터\n    struct FranchiseeData {\n        string franchiseeId; // 가맹점 아이디\n        uint256 payoutWaitTime; // 제품구매 후 마일리지 지급시간\n        bytes32 email; // 가맹점주 이메일 해시\n        uint256 providedMileage; // 제공된 마일리지 총량\n        uint256 usedMileage; // 사용된 마일리지 총량\n        uint256 clearedMileage; // 정산된 마일리지 총량\n        FranchiseeStatus status;\n    }\n\n    mapping(string => FranchiseeData) private franchisees;\n\n    string[] private items;\n\n    address public validatorAddress;\n    ValidatorCollection private validatorCollection;\n\n    /// @notice 가맹점이 추가될 때 발생되는 이벤트\n    event Added(string franchiseeId, uint256 timestamp, bytes32 email);\n    /// @notice 가맹점의 마일리지가 증가할 때 발생되는 이벤트\n    event IncreasedProvidedMileage(string franchiseeId, uint256 increase, uint256 total);\n    /// @notice 사용자의 마일리지가 증가할 때 발생되는 이벤트\n    event IncreasedUsedMileage(string franchiseeId, uint256 increase, uint256 total);\n    /// @notice 정산된 마일리가 증가할 때 발생되는 이벤트\n    event IncreasedClearedMileage(string franchiseeId, uint256 increase, uint256 total);\n\n    address public ledgerAddress;\n    address public deployer;\n\n    /// @notice 생성자\n    /// @param _validatorAddress 검증자컬랙션의 주소\n    constructor(address _validatorAddress) {\n        validatorAddress = _validatorAddress;\n\n        validatorCollection = ValidatorCollection(_validatorAddress);\n        ledgerAddress = address(0x00);\n        deployer = msg.sender;\n    }\n\n    /// @notice 원장 컨트랙트의 주소를 호출한다.\n    function setLedgerAddress(address _ledgerAddress) public {\n        require(msg.sender == deployer, \"No permissions\");\n        ledgerAddress = _ledgerAddress;\n        deployer = address(0x00);\n    }\n\n    /// @notice 검증자들만 호출할 수 있도록 해준다.\n    modifier onlyValidator(address _account) {\n        bool isValidator = false;\n        for (uint256 i = 0; i < validatorCollection.activeItemsLength(); ++i) {\n            if (_account == validatorCollection.activeItemOf(i)) {\n                isValidator = true;\n                break;\n            }\n        }\n        require(isValidator, \"Not validator\");\n        _;\n    }\n\n    /// @notice 원장 컨트랙트에서만 호출될 수 있도록 해준다.\n    modifier onlyLedger() {\n        require(msg.sender == ledgerAddress, \"Not ledger\");\n        _;\n    }\n\n    /// @notice 가맹점을 추가한다\n    /// @param _franchiseeId 가맹점 아이디\n    /// @param _payoutWaitTime 제품구매 후 마일리지가 지급될 시간\n    /// @param _email 가맹점주 이메일 해시\n    function add(\n        string memory _franchiseeId,\n        uint256 _payoutWaitTime,\n        bytes32 _email\n    ) public onlyValidator(msg.sender) {\n        _add(_franchiseeId, _payoutWaitTime, _email);\n    }\n\n    function _add(string memory _franchiseeId, uint256 _payoutWaitTime, bytes32 _email) internal {\n        FranchiseeData memory data = FranchiseeData({\n            franchiseeId: _franchiseeId,\n            payoutWaitTime: _payoutWaitTime,\n            email: _email,\n            providedMileage: 0,\n            usedMileage: 0,\n            clearedMileage: 0,\n            status: FranchiseeStatus.ACTIVE\n        });\n        items.push(_franchiseeId);\n        franchisees[_franchiseeId] = data;\n\n        emit Added(_franchiseeId, _payoutWaitTime, _email);\n    }\n\n    /// @notice 지급된 총 마일지리를 누적한다\n    function addProvidedMileage(string memory _franchiseeId, uint256 _amount) public onlyLedger {\n        if (franchisees[_franchiseeId].status == FranchiseeStatus.INVALID) {\n            _add(_franchiseeId, 0, NULL);\n        }\n\n        franchisees[_franchiseeId].providedMileage += _amount;\n        emit IncreasedProvidedMileage(_franchiseeId, _amount, franchisees[_franchiseeId].providedMileage);\n    }\n\n    /// @notice 사용된 총 마일지리를 누적한다\n    function addUsedMileage(string memory _franchiseeId, uint256 _amount) public onlyLedger {\n        if (franchisees[_franchiseeId].status == FranchiseeStatus.INVALID) {\n            _add(_franchiseeId, 0, NULL);\n        }\n        franchisees[_franchiseeId].usedMileage += _amount;\n        emit IncreasedUsedMileage(_franchiseeId, _amount, franchisees[_franchiseeId].usedMileage);\n    }\n\n    /// @notice 정산된 총 마일지리를 누적한다\n    function addClearedMileage(string memory _franchiseeId, uint256 _amount) public onlyLedger {\n        if (franchisees[_franchiseeId].status == FranchiseeStatus.INVALID) {\n            _add(_franchiseeId, 0, NULL);\n        }\n        franchisees[_franchiseeId].clearedMileage += _amount;\n        emit IncreasedClearedMileage(_franchiseeId, _amount, franchisees[_franchiseeId].clearedMileage);\n    }\n\n    /// @notice 정산되어야 할 마일지리의 량을 리턴합니다.\n    function getClearMileage(string memory _franchiseeId) public view returns (uint256) {\n        if (franchisees[_franchiseeId].status == FranchiseeStatus.ACTIVE) {\n            FranchiseeData memory data = franchisees[_franchiseeId];\n            if (data.providedMileage + data.clearedMileage < data.usedMileage) {\n                return (data.usedMileage - data.providedMileage - data.clearedMileage);\n            } else {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    /// @notice 가맹점 데이터를 리턴한다\n    /// @param _franchiseeId 가맹점의 아이디\n    function franchiseeOf(string memory _franchiseeId) public view returns (FranchiseeData memory) {\n        return franchisees[_franchiseeId];\n    }\n\n    /// @notice 가맹점의 아이디를 리턴한다\n    /// @param _idx 배열의 순번\n    function franchiseeIdOf(uint256 _idx) public view returns (string memory) {\n        return items[_idx];\n    }\n\n    /// @notice 가맹점의 갯수를 리턴한다\n    function franchiseesLength() public view returns (uint256) {\n        return items.length;\n    }\n}\n"
    },
    "contracts/Ledger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"link-email-wallet-osx-artifacts/contracts/LinkCollection.sol\";\nimport \"./ValidatorCollection.sol\";\nimport \"./TokenPrice.sol\";\nimport \"./FranchiseeCollection.sol\";\n\n/// @notice 마일리지와 토큰의 원장\ncontract Ledger {\n    /// @notice Hash value of a blank string\n    bytes32 public constant NULL = 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855;\n    mapping(bytes32 => uint256) private mileageLedger;\n    mapping(bytes32 => uint256) private tokenLedger;\n    mapping(address => uint256) private nonce;\n\n    struct PurchaseData {\n        string purchaseId;\n        uint256 timestamp;\n        uint256 amount;\n        bytes32 userEmail;\n        string franchiseeId;\n    }\n\n    mapping(string => PurchaseData) private purchases;\n    string[] private purchaseIds;\n\n    bytes32 public foundationAccount;\n    address public tokenAddress;\n    address public validatorAddress;\n    address public linkCollectionAddress;\n    address public tokenPriceAddress;\n    address public franchiseeCollectionAddress;\n\n    IERC20 private token;\n    ValidatorCollection private validatorCollection;\n    LinkCollection private linkCollection;\n    TokenPrice private tokenPrice;\n    FranchiseeCollection private franchiseeCollection;\n\n    /// @notice 검증자가 추가될 때 발생되는 이벤트\n    event SavedPurchase(string purchaseId, uint256 timestamp, uint256 amount, bytes32 userEmail, string franchiseeId);\n    /// @notice 마일리지가 지급될 때 발생되는 이벤트\n    event ProvidedMileage(bytes32 email, uint256 amount);\n    /// @notice 마일리지가 정산될 때 발생되는 이벤트\n    event ProvidedMileageToFranchisee(bytes32 email, uint256 amount);\n    /// @notice 토큰이 지급될 때 발생되는 이벤트\n    event ProvidedToken(bytes32 email, uint256 amount, uint256 amountToken);\n    /// @notice 마일리지로 지불을 완료했을 때 발생하는 이벤트\n    event PaidMileage(string purchaseId, uint256 timestamp, uint256 amount, bytes32 userEmail, string franchiseeId);\n    /// @notice 토큰으로 지불을 완료했을 때 발생하는 이벤트\n    event PaidToken(\n        string purchaseId,\n        uint256 timestamp,\n        uint256 amount,\n        uint256 amountToken,\n        bytes32 userEmail,\n        string franchiseeId\n    );\n    /// @notice 토큰을 예치했을 때 발생하는 이벤트\n    event Deposited(address depositor, uint256 amount, uint256 balance);\n    /// @notice 토큰을 인출했을 때 발생하는 이벤트\n    event Withdrawn(address withdrawer, uint256 amount, uint256 balance);\n    /// @notice 마일리지를 토큰으로 교환했을 때 발생하는 이벤트\n    event ExchangedMileageToToken(bytes32 email, uint256 amountMileage, uint256 amountToken);\n    /// @notice 토큰을 마일리지로 교환했을 때 발생하는 이벤트\n    event ExchangedTokenToMileage(bytes32 email, uint256 amountToken, uint256 amountMileage);\n\n    /// @notice 생성자\n    /// @param _foundationAccount 재단의 계정\n    /// @param _tokenAddress 토큰 컨트랙트의 주소\n    /// @param _validatorAddress 검증자 컬랙션 컨트랙트의 주소\n    /// @param _linkCollectionAddress 이메일-지갑주소 링크 컨트랙트의 주소\n    /// @param _tokenPriceAddress 토큰가격을 제공하는 컨트랙트의 주소\n    /// @param _franchiseeCollectionAddress 가맹점 컬랙션 컨트랙트의 주소\n    constructor(\n        bytes32 _foundationAccount,\n        address _tokenAddress,\n        address _validatorAddress,\n        address _linkCollectionAddress,\n        address _tokenPriceAddress,\n        address _franchiseeCollectionAddress\n    ) {\n        foundationAccount = _foundationAccount;\n        tokenAddress = _tokenAddress;\n        validatorAddress = _validatorAddress;\n        linkCollectionAddress = _linkCollectionAddress;\n        tokenPriceAddress = _tokenPriceAddress;\n        franchiseeCollectionAddress = _franchiseeCollectionAddress;\n\n        token = IERC20(_tokenAddress);\n        validatorCollection = ValidatorCollection(_validatorAddress);\n        linkCollection = LinkCollection(_linkCollectionAddress);\n        tokenPrice = TokenPrice(_tokenPriceAddress);\n        franchiseeCollection = FranchiseeCollection(_franchiseeCollectionAddress);\n    }\n\n    modifier onlyValidator(address _account) {\n        bool isValidator = false;\n        for (uint256 i = 0; i < validatorCollection.activeItemsLength(); ++i) {\n            if (_account == validatorCollection.activeItemOf(i)) {\n                isValidator = true;\n                break;\n            }\n        }\n        require(isValidator, \"Not validator\");\n        _;\n    }\n\n    /// @notice 구매내역을 저장합니다.\n    /// @dev 이것은 검증자들에 의해 호출되어야 합니다.\n    /// @param _purchaseId 구매 아이디\n    /// @param _timestamp 구매 시간\n    /// @param _amount 구매 금액\n    /// @param _userEmail 구매한 사용자의 이메일 해시\n    /// @param _franchiseeId 구매한 가맹점 아이디\n    function savePurchase(\n        string memory _purchaseId,\n        uint256 _timestamp,\n        uint256 _amount,\n        bytes32 _userEmail,\n        string memory _franchiseeId\n    ) public onlyValidator(msg.sender) {\n        PurchaseData memory data = PurchaseData({\n            purchaseId: _purchaseId,\n            timestamp: _timestamp,\n            amount: _amount,\n            userEmail: _userEmail,\n            franchiseeId: _franchiseeId\n        });\n        purchaseIds.push(_purchaseId);\n        purchases[_purchaseId] = data;\n\n        if (_userEmail != NULL) {\n            uint256 mileage = _amount / 100;\n            if (linkCollection.toAddress(_userEmail) == address(0x00)) {\n                provideMileage(_userEmail, mileage);\n            } else {\n                provideToken(_userEmail, mileage);\n            }\n            franchiseeCollection.addProvidedMileage(_franchiseeId, mileage);\n        }\n        emit SavedPurchase(_purchaseId, _timestamp, _amount, _userEmail, _franchiseeId);\n    }\n\n    /// @notice 마일리지를 지급합니다.\n    /// @dev 구매 데이터를 확인한 후 호출됩니다.\n    /// @param _email 이메일 해시\n    /// @param _amount 지급할 마일리지\n    function provideMileage(bytes32 _email, uint256 _amount) internal {\n        mileageLedger[_email] += _amount;\n\n        emit ProvidedMileage(_email, _amount);\n    }\n\n    /// @notice 토큰을 지급합니다.\n    /// @dev 구매 데이터를 확인한 후 호출됩니다.\n    /// @param _email 이메일 해시\n    /// @param _amount 지급할 토큰\n    function provideToken(bytes32 _email, uint256 _amount) internal {\n        uint256 amountToken = convertMileageToToken(_amount);\n\n        require(tokenLedger[foundationAccount] >= amountToken, \"Insufficient foundation balance\");\n        tokenLedger[_email] += amountToken;\n        tokenLedger[foundationAccount] -= amountToken;\n\n        emit ProvidedToken(_email, _amount, amountToken);\n    }\n\n    /// @notice 마일리지를 구매에 사용하는 함수\n    /// @dev 중계서버를 통해서 호출됩니다.\n    /// @param _purchaseId 구매 아이디\n    /// @param _amount 구매 금액\n    /// @param _userEmail 구매한 사용자의 이메일 해시\n    /// @param _franchiseeId 구매한 가맹점 아이디\n    /// @param _signer 구매자의 주소\n    /// @param _signature 서명\n    function payMileage(\n        string memory _purchaseId,\n        uint256 _amount,\n        bytes32 _userEmail,\n        string memory _franchiseeId,\n        address _signer,\n        bytes calldata _signature\n    ) public {\n        bytes32 dataHash = keccak256(\n            abi.encode(_purchaseId, _amount, _userEmail, _franchiseeId, _signer, nonce[_signer])\n        );\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _signer, \"Invalid signature\");\n        address userAddress = linkCollection.toAddress(_userEmail);\n        require(userAddress != address(0x00), \"Unregistered email-address\");\n        require(userAddress == _signer, \"Invalid address\");\n        require(mileageLedger[_userEmail] >= _amount, \"Insufficient balance\");\n\n        mileageLedger[_userEmail] -= _amount;\n        franchiseeCollection.addUsedMileage(_franchiseeId, _amount);\n\n        uint256 clearAmount = franchiseeCollection.getClearMileage(_franchiseeId);\n        if (clearAmount > 0) {\n            franchiseeCollection.addClearedMileage(_franchiseeId, clearAmount);\n            FranchiseeCollection.FranchiseeData memory franchisee = franchiseeCollection.franchiseeOf(_franchiseeId);\n            if (franchisee.email != NULL) {\n                mileageLedger[franchisee.email] += clearAmount;\n                emit ProvidedMileageToFranchisee(franchisee.email, clearAmount);\n            }\n        }\n\n        nonce[_signer]++;\n\n        emit PaidMileage(_purchaseId, block.timestamp, _amount, _userEmail, _franchiseeId);\n    }\n\n    /// @notice 토큰을 구매에 사용하는 함수\n    /// @dev 중계서버를 통해서 호출됩니다.\n    /// @param _purchaseId 구매 아이디\n    /// @param _amount 구매 금액\n    /// @param _userEmail 구매한 사용자의 이메일 해시\n    /// @param _franchiseeId 구매한 가맹점 아이디\n    /// @param _signer 구매자의 주소\n    /// @param _signature 서명\n    function payToken(\n        string memory _purchaseId,\n        uint256 _amount,\n        bytes32 _userEmail,\n        string memory _franchiseeId,\n        address _signer,\n        bytes calldata _signature\n    ) public {\n        bytes32 dataHash = keccak256(\n            abi.encode(_purchaseId, _amount, _userEmail, _franchiseeId, _signer, nonce[_signer])\n        );\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _signer, \"Invalid signature\");\n        address userAddress = linkCollection.toAddress(_userEmail);\n        require(userAddress != address(0x00), \"Unregistered email-address\");\n        require(userAddress == _signer, \"Invalid address\");\n\n        uint256 amountToken = convertMileageToToken(_amount);\n        require(tokenLedger[_userEmail] >= amountToken, \"Insufficient balance\");\n\n        tokenLedger[_userEmail] -= amountToken;\n        tokenLedger[foundationAccount] += amountToken;\n        franchiseeCollection.addUsedMileage(_franchiseeId, _amount);\n\n        uint256 clearAmount = franchiseeCollection.getClearMileage(_franchiseeId);\n        if (clearAmount > 0) {\n            franchiseeCollection.addClearedMileage(_franchiseeId, clearAmount);\n            FranchiseeCollection.FranchiseeData memory franchisee = franchiseeCollection.franchiseeOf(_franchiseeId);\n            if (franchisee.email != NULL) {\n                mileageLedger[franchisee.email] += clearAmount;\n                emit ProvidedMileageToFranchisee(franchisee.email, clearAmount);\n            }\n        }\n\n        nonce[_signer]++;\n\n        emit PaidToken(_purchaseId, block.timestamp, _amount, amountToken, _userEmail, _franchiseeId);\n    }\n\n    function convertMileageToToken(uint256 amount) internal view returns (uint256) {\n        uint256 price = tokenPrice.get(\"KRW\");\n        return (amount * tokenPrice.MULTIPLE()) / price;\n    }\n\n    function convertTokenToMileage(uint256 amount) internal view returns (uint256) {\n        uint256 price = tokenPrice.get(\"KRW\");\n        return (amount * price) / tokenPrice.MULTIPLE();\n    }\n\n    /// @notice 토큰을 예치합니다.\n    /// @param _amount 금액\n    function deposit(uint256 _amount) public {\n        bytes32 userEmail = linkCollection.toHash(msg.sender);\n        require(userEmail != bytes32(0x00), \"Unregistered email-address\");\n\n        require(_amount <= token.allowance(msg.sender, address(this)), \"Not allowed deposit\");\n        token.transferFrom(msg.sender, address(this), _amount);\n\n        tokenLedger[userEmail] += _amount;\n\n        emit Deposited(msg.sender, _amount, tokenLedger[userEmail]);\n    }\n\n    /// @notice 토큰을 인출합니다.\n    /// @param _amount 금액\n    function withdraw(uint256 _amount) public {\n        bytes32 userEmail = linkCollection.toHash(msg.sender);\n        require(userEmail != bytes32(0x00), \"Unregistered email-address\");\n\n        require(_amount <= tokenLedger[userEmail], \"Insufficient balance\");\n        token.transfer(msg.sender, _amount);\n\n        tokenLedger[userEmail] -= _amount;\n\n        emit Withdrawn(msg.sender, _amount, tokenLedger[userEmail]);\n    }\n\n    /// @notice 마일리지를 토큰으로 교환합니다\n    /// @dev 중계서버를 통해서 호출됩니다.\n    /// @param _userEmail 사용자의 이메일 해시\n    /// @param _amountMileage 교환할 마일리지의 량\n    /// @param _signer 사용자의 주소\n    /// @param _signature 서명\n    function exchangeMileageToToken(\n        bytes32 _userEmail,\n        uint256 _amountMileage,\n        address _signer,\n        bytes calldata _signature\n    ) public {\n        bytes32 dataHash = keccak256(abi.encode(_userEmail, _amountMileage, _signer, nonce[_signer]));\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _signer, \"Invalid signature\");\n        address userAddress = linkCollection.toAddress(_userEmail);\n        require(userAddress != address(0x00), \"Unregistered email-address\");\n        require(userAddress == _signer, \"Invalid address\");\n\n        require(mileageLedger[_userEmail] >= _amountMileage, \"Insufficient balance\");\n\n        uint256 amountToken = convertMileageToToken(_amountMileage);\n        require(tokenLedger[foundationAccount] >= amountToken, \"Insufficient foundation balance\");\n\n        mileageLedger[_userEmail] -= _amountMileage;\n\n        tokenLedger[_userEmail] += amountToken;\n        tokenLedger[foundationAccount] -= amountToken;\n\n        nonce[_signer]++;\n\n        emit ExchangedMileageToToken(_userEmail, _amountMileage, amountToken);\n    }\n\n    /// @notice 토큰을 마일리지로 교환합니다\n    /// @dev 중계서버를 통해서 호출됩니다.\n    /// @param _userEmail 사용자의 이메일 해시\n    /// @param _amountToken 교환할 토큰의 량\n    /// @param _signer 사용자의 주소\n    /// @param _signature 서명\n    function exchangeTokenToMileage(\n        bytes32 _userEmail,\n        uint256 _amountToken,\n        address _signer,\n        bytes calldata _signature\n    ) public {\n        bytes32 dataHash = keccak256(abi.encode(_userEmail, _amountToken, _signer, nonce[_signer]));\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _signer, \"Invalid signature\");\n        address userAddress = linkCollection.toAddress(_userEmail);\n        require(userAddress != address(0x00), \"Unregistered email-address\");\n        require(userAddress == _signer, \"Invalid address\");\n\n        require(tokenLedger[_userEmail] >= _amountToken, \"Insufficient balance\");\n\n        tokenLedger[_userEmail] -= _amountToken;\n        tokenLedger[foundationAccount] += _amountToken;\n\n        uint256 amountMileage = convertTokenToMileage(_amountToken);\n        mileageLedger[_userEmail] += amountMileage;\n\n        nonce[_signer]++;\n\n        emit ExchangedTokenToMileage(_userEmail, _amountToken, amountMileage);\n    }\n\n    /// @notice 마일리지의 잔고를 리턴한다\n    /// @param _hash 이메일의 해시\n    function mileageBalanceOf(bytes32 _hash) public view returns (uint256) {\n        return mileageLedger[_hash];\n    }\n\n    /// @notice 토큰의 잔고를 리턴한다\n    /// @param _hash 이메일의 해시\n    function tokenBalanceOf(bytes32 _hash) public view returns (uint256) {\n        return tokenLedger[_hash];\n    }\n\n    /// @notice nonce를  리턴한다\n    /// @param _account 지갑주소\n    function nonceOf(address _account) public view returns (uint256) {\n        return nonce[_account];\n    }\n\n    /// @notice 구매 데이터를 리턴한다\n    /// @param _purchaseId 구매 아이디\n    function purchaseOf(string memory _purchaseId) public view returns (PurchaseData memory) {\n        return purchases[_purchaseId];\n    }\n\n    /// @notice 구매 데이터의 아이디를 리턴한다\n    /// @param _idx 배열의 순번\n    function purchaseIdOf(uint256 _idx) public view returns (string memory) {\n        return purchaseIds[_idx];\n    }\n\n    /// @notice 구매 데이터의 갯수를 리턴한다\n    function purchasesLength() public view returns (uint256) {\n        return purchaseIds.length;\n    }\n}\n"
    },
    "contracts/TokenPrice.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ValidatorCollection.sol\";\n\n/// @notice 토큰 가격을 제공하는 스마트컨트랙트\ncontract TokenPrice {\n    uint256 public constant MULTIPLE = 1000000000;\n    mapping(string => uint256) private prices;\n\n    address public validatorAddress;\n    ValidatorCollection private validatorCollection;\n\n    /// @notice 가격이 저장될 때 발생되는 이벤트\n    event SetPrice(string currency, uint256 price);\n\n    /// @notice 생성자\n    /// @param _validatorAddress 검증자컬랙션의 주소\n    constructor(address _validatorAddress) {\n        validatorAddress = _validatorAddress;\n\n        validatorCollection = ValidatorCollection(_validatorAddress);\n    }\n\n    modifier onlyValidator(address _account) {\n        bool isValidator = false;\n        for (uint256 i = 0; i < validatorCollection.activeItemsLength(); ++i) {\n            if (_account == validatorCollection.activeItemOf(i)) {\n                isValidator = true;\n                break;\n            }\n        }\n        require(isValidator, \"Not validator\");\n        _;\n    }\n\n    /// @notice 통화에 대한 가격을 저장한다.\n    /// @param _currency 통화명\n    /// @param _price 토큰의 가격\n    function set(string memory _currency, uint256 _price) public onlyValidator(msg.sender) {\n        prices[_currency] = _price;\n\n        emit SetPrice(_currency, _price);\n    }\n\n    /// @notice 통화에 대한 가격을 제공한다.\n    /// @param _currency 통화명\n    function get(string memory _currency) public view returns (uint256) {\n        return prices[_currency];\n    }\n}\n"
    },
    "contracts/ValidatorCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @notice 검증자들을 저장하는 컨트랙트\ncontract ValidatorCollection {\n    uint256 public constant MINIMUM_DEPOSIT_AMOUNT = 50000000000000000000000;\n\n    address public tokenAddress;\n\n    IERC20 private token;\n\n    /// @notice 검증자의 상태코드\n    enum Status {\n        INVALID, //  초기값\n        ACTIVE, //  검증자의 기능이 활성화됨\n        STOP, //  예치금 부족으로 정지된 상태\n        EXIT //  탈퇴한 상태\n    }\n\n    struct ValidatorData {\n        address validator; // 검증자의 지갑주소\n        uint256 start; // 검증자로서 역할을 수행할 수 있는 시작 시간\n        uint256 balance; // 검증자의 예치금\n        Status status; // 검증자의 상태\n    }\n\n    address[] private items;\n\n    address[] private activeItems;\n\n    mapping(address => ValidatorData) private validators;\n\n    /// @notice 검증자가 추가될 때 발생되는 이벤트\n    event Added(address validator, uint256 start, uint256 balance, Status status);\n    /// @notice 자금이 입급될 때 발생되는 이벤트\n    event Deposited(address validator, uint256 amount, uint256 balance);\n    /// @notice 검증자의 등록이 요청 되었을 때 발생되는 이벤트\n    event RequestedRegistration(address requester);\n    /// @notice 검증자의 강제 탈퇴가 요청 되었을 때 발생되는 이벤트\n    event RequestedExit(address requester, address validator);\n    /// @notice 검증자의 자발적 탈퇴가 완료되었을 때 발생되는 이벤트\n    event Exited(address validator);\n\n    /// @notice 생성자\n    /// @param _validators 초기에 설정될 검증자, 예치금이 예치된 후 그 즉시 활성화 된다.\n    constructor(address _tokenAddress, address[] memory _validators) {\n        tokenAddress = _tokenAddress;\n        token = IERC20(_tokenAddress);\n\n        for (uint256 i = 0; i < _validators.length; ++i) {\n            ValidatorData memory item = ValidatorData({\n                validator: _validators[i],\n                start: block.timestamp,\n                balance: 0,\n                status: Status.STOP\n            });\n            items.push(_validators[i]);\n            validators[_validators[i]] = item;\n\n            emit Added(item.validator, item.start, item.balance, item.status);\n        }\n    }\n\n    /// @notice 예치금을 추가로 입급합니다.\n    /// @param _amount 추가로 입금할 예치 금액\n    function deposit(uint256 _amount) public {\n        ValidatorData memory item = validators[msg.sender];\n        require(item.validator == msg.sender, \"Not validator\");\n        require(item.status != Status.INVALID, \"Not validator\");\n        require(item.status != Status.EXIT, \"Already exited\");\n\n        require(_amount <= token.allowance(msg.sender, address(this)), \"Not allowed deposit\");\n        token.transferFrom(msg.sender, address(this), _amount);\n\n        validators[msg.sender].balance += _amount;\n\n        if (validators[msg.sender].balance >= MINIMUM_DEPOSIT_AMOUNT) validators[msg.sender].status = Status.ACTIVE;\n\n        emit Deposited(msg.sender, _amount, validators[msg.sender].balance);\n    }\n\n    /// @notice 신규 검증자 등록을 신청합니다.\n    function requestRegistration() public {\n        require(validators[msg.sender].status == Status.INVALID, \"Already validator\");\n\n        require(MINIMUM_DEPOSIT_AMOUNT <= token.allowance(msg.sender, address(this)), \"Not allowed deposit\");\n        token.transferFrom(msg.sender, address(this), MINIMUM_DEPOSIT_AMOUNT);\n\n        ValidatorData memory item = ValidatorData({\n            validator: msg.sender,\n            start: block.timestamp + 86500 * 7,\n            balance: MINIMUM_DEPOSIT_AMOUNT,\n            status: Status.ACTIVE\n        });\n\n        items.push(msg.sender);\n        validators[msg.sender] = item;\n\n        emit RequestedRegistration(msg.sender);\n    }\n\n    /// @notice 검증자의 강제탈퇴를 신청합니다.\n    function requestExit(address validator) public {\n        ValidatorData memory item = validators[msg.sender];\n        require(item.validator == msg.sender, \"Not validator\");\n        require(item.status == Status.ACTIVE && item.start <= block.timestamp, \"Invalid validator\");\n\n        require(validators[validator].status != Status.INVALID, \"Not validator\");\n        validators[validator].status = Status.EXIT;\n\n        if (validators[validator].balance > 0) {\n            token.transfer(validator, validators[validator].balance);\n            validators[validator].balance = 0;\n        }\n\n        emit RequestedExit(msg.sender, validator);\n    }\n\n    function makeActiveItems() public {\n        ValidatorData memory item = validators[msg.sender];\n        require(item.validator == msg.sender, \"Not validator\");\n        require(item.status == Status.ACTIVE && item.start <= block.timestamp, \"Invalid validator\");\n\n        _makeActiveItems();\n    }\n\n    /// @notice 등록된 검증자를 리턴한다.\n    /// @param _idx 배열의 순번\n    function itemOf(uint256 _idx) public view returns (address) {\n        return items[_idx];\n    }\n\n    /// @notice 등록된 검증자의 수를 리턴합니다.\n    function itemsLength() public view returns (uint256) {\n        return items.length;\n    }\n\n    /// @notice 유효한 검증자를 리턴한다.\n    /// @param _idx 배열의 순번\n    function activeItemOf(uint256 _idx) public view returns (address) {\n        return activeItems[_idx];\n    }\n\n    /// @notice 유효한 검증자의 수를 리턴합니다.\n    function activeItemsLength() public view returns (uint256) {\n        return activeItems.length;\n    }\n\n    /// @notice 검증자의 데이타를 리턴합니다.\n    /// @param _account 지갑주소\n    function validatorOf(address _account) public view returns (ValidatorData memory) {\n        return validators[_account];\n    }\n\n    function _makeActiveItems() internal {\n        while (activeItems.length > 0) activeItems.pop();\n        for (uint256 i = 0; i < items.length; ++i) {\n            ValidatorData memory item = validators[items[i]];\n\n            if (item.status == Status.ACTIVE && item.start <= block.timestamp) {\n                activeItems.push(items[i]);\n            }\n        }\n    }\n\n    /// @notice 자발적으로 탈퇴하기 위해 사용되는 함수입니다.\n    function exit() public {\n        ValidatorData memory item = validators[msg.sender];\n        require(item.validator == msg.sender, \"Not validator\");\n        require(item.status == Status.ACTIVE && item.start <= block.timestamp, \"Invalid validator\");\n\n        makeActiveItems();\n        require(activeItems.length > 1, \"Last validator\");\n\n        validators[msg.sender].status = Status.EXIT;\n\n        if (validators[msg.sender].balance > 0) {\n            token.transfer(msg.sender, validators[msg.sender].balance);\n            validators[msg.sender].balance = 0;\n        }\n\n        emit Exited(msg.sender);\n    }\n}\n"
    },
    "link-email-wallet-osx-artifacts/contracts/LinkCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n// E000 : invalid signature\n// E001 : invalid email hash\n// E002 : invalid address\n\n/// Contract for converting e-mail to wallet\ncontract LinkCollection is AccessControl {\n    bytes32 public constant LINK_COLLECTION_ADMIN_ROLE = keccak256(\"LINK_COLLECTION_ADMIN_ROLE\");\n    bytes32 public constant VALIDATOR_ROLE = keccak256(\"VALIDATOR_ROLE\");\n    bytes32 public constant NULL = 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855;\n\n    /// Mapping for converting email to wallet address\n    mapping(bytes32 => address) public toAddress;\n\n    /// Mapping for converting wallet address to email\n    mapping(address => bytes32) public toHash;\n\n    mapping(address => uint256) public nonce;\n\n    event Added(bytes32 hash, address sender);\n    event Updated(bytes32 hash, address sender1, address sender2);\n\n    constructor(address[] memory validators) {\n        _setRoleAdmin(LINK_COLLECTION_ADMIN_ROLE, LINK_COLLECTION_ADMIN_ROLE);\n        _setRoleAdmin(VALIDATOR_ROLE, LINK_COLLECTION_ADMIN_ROLE);\n\n        // self administration\n        _setupRole(LINK_COLLECTION_ADMIN_ROLE, address(this));\n\n        // register validators\n        for (uint256 i = 0; i < validators.length; ++i) {\n            _setupRole(VALIDATOR_ROLE, validators[i]);\n        }\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /// Add an item\n    function add(bytes32 hash, address sender, bytes calldata signature) public onlyRoleOrOpenRole(VALIDATOR_ROLE) {\n        require(hash != NULL, \"E001\");\n        bytes32 dataHash = keccak256(abi.encode(hash, sender, nonce[sender]));\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), signature) == sender, \"E000\");\n\n        require(toAddress[hash] == address(0x00), \"E001\");\n        require(toHash[sender] == bytes32(0x00), \"E002\");\n\n        toAddress[hash] = sender;\n        toHash[sender] = hash;\n\n        nonce[sender]++;\n\n        emit Added(hash, sender);\n    }\n\n    /// Update an item\n    function update(\n        bytes32 hash,\n        address sender1,\n        bytes calldata signature1,\n        address sender2,\n        bytes calldata signature2\n    ) public {\n        require(hash != NULL, \"E001\");\n        bytes32 dataHash1 = keccak256(abi.encode(hash, sender1, nonce[sender1]));\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash1), signature1) == sender1, \"E000\");\n\n        bytes32 dataHash2 = keccak256(abi.encode(hash, sender2, nonce[sender2]));\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash2), signature2) == sender2, \"E000\");\n\n        require(toAddress[hash] == sender1, \"E001\");\n        require(toHash[sender1] == hash, \"E002\");\n        require(toHash[sender2] == bytes32(0x00), \"E002\");\n        require(sender1 != sender2, \"E002\");\n\n        delete toHash[sender1];\n\n        toAddress[hash] = sender2;\n        toHash[sender2] = hash;\n\n        nonce[sender1]++;\n        nonce[sender2]++;\n\n        emit Updated(hash, sender1, sender2);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}