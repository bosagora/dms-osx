{
    "address": "0xFDa3d1ff3C570c2f76c2157Ef7A8640A75794eD9",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "validators",
                    "type": "address[]"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                }
            ],
            "name": "Added",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "previousAdminRole",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "newAdminRole",
                    "type": "bytes32"
                }
            ],
            "name": "RoleAdminChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                }
            ],
            "name": "RoleGranted",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                }
            ],
            "name": "RoleRevoked",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "sender1",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "sender2",
                    "type": "address"
                }
            ],
            "name": "Updated",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "DEFAULT_ADMIN_ROLE",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "LINK_COLLECTION_ADMIN_ROLE",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "VALIDATOR_ROLE",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "signature",
                    "type": "bytes"
                }
            ],
            "name": "add",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                }
            ],
            "name": "getRoleAdmin",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "grantRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "hasRole",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "nonce",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "renounceRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "revokeRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes4",
                    "name": "interfaceId",
                    "type": "bytes4"
                }
            ],
            "name": "supportsInterface",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "name": "toAddress",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "toHash",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "sender1",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "signature1",
                    "type": "bytes"
                },
                {
                    "internalType": "address",
                    "name": "sender2",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "signature2",
                    "type": "bytes"
                }
            ],
            "name": "update",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x11ff94169e624f79088c5280f2daf96012177ca1c3c56b5c533d70f6b7f8bbb0",
    "receipt": {
        "to": null,
        "from": "0xDc245797409fb79446523Fa1A4ca97294eef22EE",
        "contractAddress": "0xFDa3d1ff3C570c2f76c2157Ef7A8640A75794eD9",
        "transactionIndex": 0,
        "gasUsed": "1466029",
        "logsBloom": "0x
        "blockHash": "0xbef5c7c8a1e20b2329b560a965abefbe47292573e6cefa76311a7fb441cdb113",
        "transactionHash": "0x11ff94169e624f79088c5280f2daf96012177ca1c3c56b5c533d70f6b7f8bbb0",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 16,
                "transactionHash": "0x11ff94169e624f79088c5280f2daf96012177ca1c3c56b5c533d70f6b7f8bbb0",
                "address": "0xFDa3d1ff3C570c2f76c2157Ef7A8640A75794eD9",
                "topics": [
                    "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
                    "0x64d8801b4a0e42a754f0b4beb0161164d284e2b3700ab1efe91dd0187772f471",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x64d8801b4a0e42a754f0b4beb0161164d284e2b3700ab1efe91dd0187772f471"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0xbef5c7c8a1e20b2329b560a965abefbe47292573e6cefa76311a7fb441cdb113"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 16,
                "transactionHash": "0x11ff94169e624f79088c5280f2daf96012177ca1c3c56b5c533d70f6b7f8bbb0",
                "address": "0xFDa3d1ff3C570c2f76c2157Ef7A8640A75794eD9",
                "topics": [
                    "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
                    "0x21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x64d8801b4a0e42a754f0b4beb0161164d284e2b3700ab1efe91dd0187772f471"
                ],
                "data": "0x",
                "logIndex": 1,
                "blockHash": "0xbef5c7c8a1e20b2329b560a965abefbe47292573e6cefa76311a7fb441cdb113"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 16,
                "transactionHash": "0x11ff94169e624f79088c5280f2daf96012177ca1c3c56b5c533d70f6b7f8bbb0",
                "address": "0xFDa3d1ff3C570c2f76c2157Ef7A8640A75794eD9",
                "topics": [
                    "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
                    "0x64d8801b4a0e42a754f0b4beb0161164d284e2b3700ab1efe91dd0187772f471",
                    "0x000000000000000000000000fda3d1ff3c570c2f76c2157ef7a8640a75794ed9",
                    "0x000000000000000000000000dc245797409fb79446523fa1a4ca97294eef22ee"
                ],
                "data": "0x",
                "logIndex": 2,
                "blockHash": "0xbef5c7c8a1e20b2329b560a965abefbe47292573e6cefa76311a7fb441cdb113"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 16,
                "transactionHash": "0x11ff94169e624f79088c5280f2daf96012177ca1c3c56b5c533d70f6b7f8bbb0",
                "address": "0xFDa3d1ff3C570c2f76c2157Ef7A8640A75794eD9",
                "topics": [
                    "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
                    "0x21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926",
                    "0x0000000000000000000000009e8549cc1b5b9036ac410ed11966bb3c6b94a77d",
                    "0x000000000000000000000000dc245797409fb79446523fa1a4ca97294eef22ee"
                ],
                "data": "0x",
                "logIndex": 3,
                "blockHash": "0xbef5c7c8a1e20b2329b560a965abefbe47292573e6cefa76311a7fb441cdb113"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 16,
                "transactionHash": "0x11ff94169e624f79088c5280f2daf96012177ca1c3c56b5c533d70f6b7f8bbb0",
                "address": "0xFDa3d1ff3C570c2f76c2157Ef7A8640A75794eD9",
                "topics": [
                    "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
                    "0x21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926",
                    "0x000000000000000000000000103cb97f47801563c875942510ff0585e31f55b5",
                    "0x000000000000000000000000dc245797409fb79446523fa1a4ca97294eef22ee"
                ],
                "data": "0x",
                "logIndex": 4,
                "blockHash": "0xbef5c7c8a1e20b2329b560a965abefbe47292573e6cefa76311a7fb441cdb113"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 16,
                "transactionHash": "0x11ff94169e624f79088c5280f2daf96012177ca1c3c56b5c533d70f6b7f8bbb0",
                "address": "0xFDa3d1ff3C570c2f76c2157Ef7A8640A75794eD9",
                "topics": [
                    "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
                    "0x21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926",
                    "0x000000000000000000000000f49e8729c774f31eb1b7724e898bc9230a13e54c",
                    "0x000000000000000000000000dc245797409fb79446523fa1a4ca97294eef22ee"
                ],
                "data": "0x",
                "logIndex": 5,
                "blockHash": "0xbef5c7c8a1e20b2329b560a965abefbe47292573e6cefa76311a7fb441cdb113"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 16,
                "transactionHash": "0x11ff94169e624f79088c5280f2daf96012177ca1c3c56b5c533d70f6b7f8bbb0",
                "address": "0xFDa3d1ff3C570c2f76c2157Ef7A8640A75794eD9",
                "topics": [
                    "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
                    "0x21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926",
                    "0x000000000000000000000000a6ee9ddfa9b82df810b8e4afaa5ff04a267d4930",
                    "0x000000000000000000000000dc245797409fb79446523fa1a4ca97294eef22ee"
                ],
                "data": "0x",
                "logIndex": 6,
                "blockHash": "0xbef5c7c8a1e20b2329b560a965abefbe47292573e6cefa76311a7fb441cdb113"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 16,
                "transactionHash": "0x11ff94169e624f79088c5280f2daf96012177ca1c3c56b5c533d70f6b7f8bbb0",
                "address": "0xFDa3d1ff3C570c2f76c2157Ef7A8640A75794eD9",
                "topics": [
                    "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
                    "0x21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926",
                    "0x000000000000000000000000898bf21a9e1ff51d3f1248e0a253f6a58c3a736a",
                    "0x000000000000000000000000dc245797409fb79446523fa1a4ca97294eef22ee"
                ],
                "data": "0x",
                "logIndex": 7,
                "blockHash": "0xbef5c7c8a1e20b2329b560a965abefbe47292573e6cefa76311a7fb441cdb113"
            }
        ],
        "blockNumber": 16,
        "cumulativeGasUsed": "1466029",
        "status": 1,
        "byzantium": true
    },
    "args": [
        [
            "0x9E8549cc1B5b9036AC410Ed11966BB3c6B94A77d",
            "0x103CB97f47801563C875942510Ff0585E31F55b5",
            "0xF49e8729c774f31eB1b7724E898BC9230a13E54c",
            "0xA6Ee9Ddfa9B82DF810b8E4AFaa5ff04A267d4930",
            "0x898Bf21a9e1fF51d3F1248E0A253f6A58C3a736a"
        ]
    ],
    "numDeployments": 1,
    "solcInputHash": "2e70bfce524df9d1460b6708810d4899",
    "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender2\",\"type\":\"address\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK_COLLECTION_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"toAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender1\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature1\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sender2\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature2\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(bytes32,address,bytes)\":{\"notice\":\"Add an item\"},\"toAddress(bytes32)\":{\"notice\":\"Mapping for converting email to wallet address\"},\"toHash(address)\":{\"notice\":\"Mapping for converting wallet address to email\"},\"update(bytes32,address,bytes,address,bytes)\":{\"notice\":\"Update an item\"}},\"notice\":\"Contract for converting e-mail to wallet\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"link-email-wallet-osx-artifacts/contracts/LinkCollection.sol\":\"LinkCollection\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"link-email-wallet-osx-artifacts/contracts/LinkCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n// E000 : invalid signature\\n// E001 : invalid email hash\\n// E002 : invalid address\\n\\n/// Contract for converting e-mail to wallet\\ncontract LinkCollection is AccessControl {\\n    bytes32 public constant LINK_COLLECTION_ADMIN_ROLE = keccak256(\\\"LINK_COLLECTION_ADMIN_ROLE\\\");\\n    bytes32 public constant VALIDATOR_ROLE = keccak256(\\\"VALIDATOR_ROLE\\\");\\n\\n    /// Mapping for converting email to wallet address\\n    mapping(bytes32 => address) public toAddress;\\n\\n    /// Mapping for converting wallet address to email\\n    mapping(address => bytes32) public toHash;\\n\\n    mapping(address => uint256) public nonce;\\n\\n    event Added(bytes32 hash, address sender);\\n    event Updated(bytes32 hash, address sender1, address sender2);\\n\\n    constructor(address[] memory validators) {\\n        _setRoleAdmin(LINK_COLLECTION_ADMIN_ROLE, LINK_COLLECTION_ADMIN_ROLE);\\n        _setRoleAdmin(VALIDATOR_ROLE, LINK_COLLECTION_ADMIN_ROLE);\\n\\n        // self administration\\n        _setupRole(LINK_COLLECTION_ADMIN_ROLE, address(this));\\n\\n        // register validators\\n        for (uint256 i = 0; i < validators.length; ++i) {\\n            _setupRole(VALIDATOR_ROLE, validators[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /// Add an item\\n    function add(bytes32 hash, address sender, bytes calldata signature) public onlyRoleOrOpenRole(VALIDATOR_ROLE) {\\n        bytes32 dataHash = keccak256(abi.encode(hash, sender, nonce[sender]));\\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), signature) == sender, \\\"E000\\\");\\n\\n        require(toAddress[hash] == address(0x00), \\\"E001\\\");\\n        require(toHash[sender] == bytes32(0x00), \\\"E002\\\");\\n\\n        toAddress[hash] = sender;\\n        toHash[sender] = hash;\\n\\n        nonce[sender]++;\\n\\n        emit Added(hash, sender);\\n    }\\n\\n    /// Update an item\\n    function update(\\n        bytes32 hash,\\n        address sender1,\\n        bytes calldata signature1,\\n        address sender2,\\n        bytes calldata signature2\\n    ) public onlyRoleOrOpenRole(VALIDATOR_ROLE) {\\n        bytes32 dataHash1 = keccak256(abi.encode(hash, sender1, nonce[sender1]));\\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash1), signature1) == sender1, \\\"E000\\\");\\n\\n        bytes32 dataHash2 = keccak256(abi.encode(hash, sender2, nonce[sender2]));\\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash2), signature2) == sender2, \\\"E000\\\");\\n\\n        require(toAddress[hash] == sender1, \\\"E001\\\");\\n        require(toHash[sender1] == hash, \\\"E002\\\");\\n        require(toHash[sender2] == bytes32(0x00), \\\"E002\\\");\\n        require(sender1 != sender2, \\\"E002\\\");\\n\\n        delete toHash[sender1];\\n\\n        toAddress[hash] = sender2;\\n        toHash[sender2] = hash;\\n\\n        nonce[sender1]++;\\n        nonce[sender2]++;\\n\\n        emit Updated(hash, sender1, sender2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1894ea8e221cdbff27766f23674acf45aeba7e61c51bdfb9df5e679455c1ca3\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b506040516200197038038062001970833981016040819052620000349162000251565b6200004f600080516020620019508339815191528062000105565b62000079600080516020620019308339815191526000805160206200195083398151915262000105565b6200009460008051602062001950833981519152306200015a565b60005b8151811015620000fd57620000ea60008051602062001930833981519152838381518110620000d657634e487b7160e01b600052603260045260246000fd5b60200260200101516200015a60201b60201c565b620000f5816200031f565b905062000097565b50506200035d565b600062000112836200016a565b600084815260208190526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b62000166828262000182565b5050565b6000818152602081905260409020600101545b919050565b6200018e82826200020c565b62000166576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001c862000235565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3390565b80516001600160a01b03811681146200017d57600080fd5b6000602080838503121562000264578182fd5b82516001600160401b03808211156200027b578384fd5b818501915085601f8301126200028f578384fd5b815181811115620002a457620002a462000347565b83810260405185828201018181108582111715620002c657620002c662000347565b604052828152858101935084860182860187018a1015620002e5578788fd5b8795505b838610156200031257620002fd8162000239565b855260019590950194938601938601620002e9565b5098975050505050505050565b60006000198214156200034057634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6115c3806200036d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a217fddf1161008c578063d547741f11610066578063d547741f146101c9578063dea567fc146101dc578063f7124d12146101ef578063fff6e615146101f7576100ea565b8063a217fddf146101a6578063bd3f40ad146101ae578063c49baebe146101c1576100ea565b8063341f6623116100c8578063341f66231461014d57806336568abe1461016d57806370ae92d21461018057806391d1485414610193576100ea565b806301ffc9a7146100ef578063248a9ca3146101185780632f2ff15d14610138575b600080fd5b6101026100fd36600461114d565b61020a565b60405161010f9190611222565b60405180910390f35b61012b610126366004611017565b610268565b60405161010f919061122d565b61014b61014636600461102f565b61027d565b005b61016061015b366004611017565b61029e565b60405161010f919061120e565b61014b61017b36600461102f565b6102b9565b61012b61018e366004610ffd565b610308565b6101026101a136600461102f565b61031a565b61012b610343565b61014b6101bc3660046110b2565b610348565b61012b6106ca565b61014b6101d736600461102f565b6106ee565b61012b6101ea366004610ffd565b61070a565b61012b61071c565b61014b61020536600461105a565b610740565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061026057506102608261094f565b90505b919050565b60009081526020819052604090206001015490565b61028682610268565b61028f81610999565b61029983836109a8565b505050565b6001602052600090815260409020546001600160a01b031681565b6102c1610a2d565b6001600160a01b0316816001600160a01b0316146102fa5760405162461bcd60e51b81526004016102f190611481565b60405180910390fd5b6103048282610a31565b5050565b60036020526000908152604090205481565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600081565b7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892661037481600061031a565b6103895761038981610384610a2d565b610ab4565b6001600160a01b03871660009081526003602090815260408083205490516103b7928c928c9290910161126c565b604051602081830303815290604052805190602001209050876001600160a01b03166104216103e583610b0d565b89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b4092505050565b6001600160a01b0316146104475760405162461bcd60e51b81526004016102f19061144a565b6001600160a01b0385166000908152600360209081526040808320549051610475928d928a9290910161126c565b604051602081830303815290604052805190602001209050856001600160a01b03166104df6104a383610b0d565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b4092505050565b6001600160a01b0316146105055760405162461bcd60e51b81526004016102f19061144a565b60008a8152600160205260409020546001600160a01b038a811691161461053e5760405162461bcd60e51b81526004016102f19061137f565b6001600160a01b0389166000908152600260205260409020548a146105755760405162461bcd60e51b81526004016102f1906113b6565b6001600160a01b038616600090815260026020526040902054156105ab5760405162461bcd60e51b81526004016102f1906113b6565b856001600160a01b0316896001600160a01b031614156105dd5760405162461bcd60e51b81526004016102f1906113b6565b6001600160a01b0389811660008181526002602081815260408084208490558f84526001825280842080547fffffffffffffffffffffffff000000000000000000000000000000000000000016968d1696871790559483529081528382208e905591815260039091529081208054916106558361155c565b90915550506001600160a01b038616600090815260036020526040812080549161067e8361155c565b91905055507f4131c9c283b15b54443b446a68d1c7c4ea6afa79b8759c4dc4052e43836c7aa28a8a886040516106b69392919061124d565b60405180910390a150505050505050505050565b7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892681565b6106f782610268565b61070081610999565b6102998383610a31565b60026020526000908152604090205481565b7f64d8801b4a0e42a754f0b4beb0161164d284e2b3700ab1efe91dd0187772f47181565b7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892661076c81600061031a565b61077c5761077c81610384610a2d565b6001600160a01b03841660009081526003602090815260408083205490516107aa928992899290910161126c565b604051602081830303815290604052805190602001209050846001600160a01b03166108146107d883610b0d565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b4092505050565b6001600160a01b03161461083a5760405162461bcd60e51b81526004016102f19061144a565b6000868152600160205260409020546001600160a01b03161561086f5760405162461bcd60e51b81526004016102f19061137f565b6001600160a01b038516600090815260026020526040902054156108a55760405162461bcd60e51b81526004016102f1906113b6565b600086815260016020908152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038a16908117909155835260028252808320899055600390915281208054916109098361155c565b91905055507f1f9db7c43ebd000b7e9cfeb8b009c1d2123430e62fb94d937b0dc52ce4a7c500868660405161093f929190611236565b60405180910390a1505050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6109a581610384610a2d565b50565b6109b2828261031a565b610304576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556109e9610a2d565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b3390565b610a3b828261031a565b15610304576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055610a70610a2d565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b610abe828261031a565b61030457610acb81610b64565b610ad6836020610b76565b604051602001610ae792919061118d565b60408051601f198184030181529082905262461bcd60e51b82526102f1916004016112a9565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b6000806000610b4f8585610dbc565b91509150610b5c81610e02565b509392505050565b60606102606001600160a01b03831660145b60606000610b858360026114f6565b610b909060026114de565b67ffffffffffffffff811115610bb657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610be0576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610c2557634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610c9657634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610cd28460026114f6565b610cdd9060016114de565b90505b6001811115610d96577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610d2c57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110610d5057634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93610d8f81611545565b9050610ce0565b508315610db55760405162461bcd60e51b81526004016102f190611313565b9392505050565b600080825160411415610df35760208301516040840151606085015160001a610de787828585610eef565b94509450505050610dfb565b506000905060025b9250929050565b6000816004811115610e2457634e487b7160e01b600052602160045260246000fd5b1415610e2f576109a5565b6001816004811115610e5157634e487b7160e01b600052602160045260246000fd5b1415610e6f5760405162461bcd60e51b81526004016102f1906112dc565b6002816004811115610e9157634e487b7160e01b600052602160045260246000fd5b1415610eaf5760405162461bcd60e51b81526004016102f190611348565b6003816004811115610ed157634e487b7160e01b600052602160045260246000fd5b14156109a55760405162461bcd60e51b81526004016102f1906113ed565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610f265750600090506003610f9d565b600060018787878760405160008152602001604052604051610f4b949392919061128b565b6020604051602081039080840390855afa158015610f6d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610f9657600060019250925050610f9d565b9150600090505b94509492505050565b80356001600160a01b038116811461026357600080fd5b60008083601f840112610fce578182fd5b50813567ffffffffffffffff811115610fe5578182fd5b602083019150836020828501011115610dfb57600080fd5b60006020828403121561100e578081fd5b610db582610fa6565b600060208284031215611028578081fd5b5035919050565b60008060408385031215611041578081fd5b8235915061105160208401610fa6565b90509250929050565b6000806000806060858703121561106f578182fd5b8435935061107f60208601610fa6565b9250604085013567ffffffffffffffff81111561109a578283fd5b6110a687828801610fbd565b95989497509550505050565b600080600080600080600060a0888a0312156110cc578283fd5b873596506110dc60208901610fa6565b9550604088013567ffffffffffffffff808211156110f8578485fd5b6111048b838c01610fbd565b909750955085915061111860608b01610fa6565b945060808a013591508082111561112d578384fd5b5061113a8a828b01610fbd565b989b979a50959850939692959293505050565b60006020828403121561115e578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610db5578182fd5b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516111c5816017850160208801611515565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611202816028840160208801611515565b01602801949350505050565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526001600160a01b03918216602084015216604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825282518060208401526112c8816040850160208701611515565b601f01601f19169190910160400192915050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526004908201527f4530303100000000000000000000000000000000000000000000000000000000604082015260600190565b60208082526004908201527f4530303200000000000000000000000000000000000000000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526004908201527f4530303000000000000000000000000000000000000000000000000000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b600082198211156114f1576114f1611577565b500190565b600081600019048311821515161561151057611510611577565b500290565b60005b83811015611530578181015183820152602001611518565b8381111561153f576000848401525b50505050565b60008161155457611554611577565b506000190190565b600060001982141561157057611570611577565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a2effa93e9ed1dadd3d774d1766492fb6eab741893c73b4b08a355e4659e4ac764736f6c6343000800003321702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892664d8801b4a0e42a754f0b4beb0161164d284e2b3700ab1efe91dd0187772f471",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a217fddf1161008c578063d547741f11610066578063d547741f146101c9578063dea567fc146101dc578063f7124d12146101ef578063fff6e615146101f7576100ea565b8063a217fddf146101a6578063bd3f40ad146101ae578063c49baebe146101c1576100ea565b8063341f6623116100c8578063341f66231461014d57806336568abe1461016d57806370ae92d21461018057806391d1485414610193576100ea565b806301ffc9a7146100ef578063248a9ca3146101185780632f2ff15d14610138575b600080fd5b6101026100fd36600461114d565b61020a565b60405161010f9190611222565b60405180910390f35b61012b610126366004611017565b610268565b60405161010f919061122d565b61014b61014636600461102f565b61027d565b005b61016061015b366004611017565b61029e565b60405161010f919061120e565b61014b61017b36600461102f565b6102b9565b61012b61018e366004610ffd565b610308565b6101026101a136600461102f565b61031a565b61012b610343565b61014b6101bc3660046110b2565b610348565b61012b6106ca565b61014b6101d736600461102f565b6106ee565b61012b6101ea366004610ffd565b61070a565b61012b61071c565b61014b61020536600461105a565b610740565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061026057506102608261094f565b90505b919050565b60009081526020819052604090206001015490565b61028682610268565b61028f81610999565b61029983836109a8565b505050565b6001602052600090815260409020546001600160a01b031681565b6102c1610a2d565b6001600160a01b0316816001600160a01b0316146102fa5760405162461bcd60e51b81526004016102f190611481565b60405180910390fd5b6103048282610a31565b5050565b60036020526000908152604090205481565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600081565b7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892661037481600061031a565b6103895761038981610384610a2d565b610ab4565b6001600160a01b03871660009081526003602090815260408083205490516103b7928c928c9290910161126c565b604051602081830303815290604052805190602001209050876001600160a01b03166104216103e583610b0d565b89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b4092505050565b6001600160a01b0316146104475760405162461bcd60e51b81526004016102f19061144a565b6001600160a01b0385166000908152600360209081526040808320549051610475928d928a9290910161126c565b604051602081830303815290604052805190602001209050856001600160a01b03166104df6104a383610b0d565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b4092505050565b6001600160a01b0316146105055760405162461bcd60e51b81526004016102f19061144a565b60008a8152600160205260409020546001600160a01b038a811691161461053e5760405162461bcd60e51b81526004016102f19061137f565b6001600160a01b0389166000908152600260205260409020548a146105755760405162461bcd60e51b81526004016102f1906113b6565b6001600160a01b038616600090815260026020526040902054156105ab5760405162461bcd60e51b81526004016102f1906113b6565b856001600160a01b0316896001600160a01b031614156105dd5760405162461bcd60e51b81526004016102f1906113b6565b6001600160a01b0389811660008181526002602081815260408084208490558f84526001825280842080547fffffffffffffffffffffffff000000000000000000000000000000000000000016968d1696871790559483529081528382208e905591815260039091529081208054916106558361155c565b90915550506001600160a01b038616600090815260036020526040812080549161067e8361155c565b91905055507f4131c9c283b15b54443b446a68d1c7c4ea6afa79b8759c4dc4052e43836c7aa28a8a886040516106b69392919061124d565b60405180910390a150505050505050505050565b7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892681565b6106f782610268565b61070081610999565b6102998383610a31565b60026020526000908152604090205481565b7f64d8801b4a0e42a754f0b4beb0161164d284e2b3700ab1efe91dd0187772f47181565b7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892661076c81600061031a565b61077c5761077c81610384610a2d565b6001600160a01b03841660009081526003602090815260408083205490516107aa928992899290910161126c565b604051602081830303815290604052805190602001209050846001600160a01b03166108146107d883610b0d565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b4092505050565b6001600160a01b03161461083a5760405162461bcd60e51b81526004016102f19061144a565b6000868152600160205260409020546001600160a01b03161561086f5760405162461bcd60e51b81526004016102f19061137f565b6001600160a01b038516600090815260026020526040902054156108a55760405162461bcd60e51b81526004016102f1906113b6565b600086815260016020908152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038a16908117909155835260028252808320899055600390915281208054916109098361155c565b91905055507f1f9db7c43ebd000b7e9cfeb8b009c1d2123430e62fb94d937b0dc52ce4a7c500868660405161093f929190611236565b60405180910390a1505050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6109a581610384610a2d565b50565b6109b2828261031a565b610304576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556109e9610a2d565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b3390565b610a3b828261031a565b15610304576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055610a70610a2d565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b610abe828261031a565b61030457610acb81610b64565b610ad6836020610b76565b604051602001610ae792919061118d565b60408051601f198184030181529082905262461bcd60e51b82526102f1916004016112a9565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b6000806000610b4f8585610dbc565b91509150610b5c81610e02565b509392505050565b60606102606001600160a01b03831660145b60606000610b858360026114f6565b610b909060026114de565b67ffffffffffffffff811115610bb657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610be0576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610c2557634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610c9657634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610cd28460026114f6565b610cdd9060016114de565b90505b6001811115610d96577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610d2c57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110610d5057634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93610d8f81611545565b9050610ce0565b508315610db55760405162461bcd60e51b81526004016102f190611313565b9392505050565b600080825160411415610df35760208301516040840151606085015160001a610de787828585610eef565b94509450505050610dfb565b506000905060025b9250929050565b6000816004811115610e2457634e487b7160e01b600052602160045260246000fd5b1415610e2f576109a5565b6001816004811115610e5157634e487b7160e01b600052602160045260246000fd5b1415610e6f5760405162461bcd60e51b81526004016102f1906112dc565b6002816004811115610e9157634e487b7160e01b600052602160045260246000fd5b1415610eaf5760405162461bcd60e51b81526004016102f190611348565b6003816004811115610ed157634e487b7160e01b600052602160045260246000fd5b14156109a55760405162461bcd60e51b81526004016102f1906113ed565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610f265750600090506003610f9d565b600060018787878760405160008152602001604052604051610f4b949392919061128b565b6020604051602081039080840390855afa158015610f6d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610f9657600060019250925050610f9d565b9150600090505b94509492505050565b80356001600160a01b038116811461026357600080fd5b60008083601f840112610fce578182fd5b50813567ffffffffffffffff811115610fe5578182fd5b602083019150836020828501011115610dfb57600080fd5b60006020828403121561100e578081fd5b610db582610fa6565b600060208284031215611028578081fd5b5035919050565b60008060408385031215611041578081fd5b8235915061105160208401610fa6565b90509250929050565b6000806000806060858703121561106f578182fd5b8435935061107f60208601610fa6565b9250604085013567ffffffffffffffff81111561109a578283fd5b6110a687828801610fbd565b95989497509550505050565b600080600080600080600060a0888a0312156110cc578283fd5b873596506110dc60208901610fa6565b9550604088013567ffffffffffffffff808211156110f8578485fd5b6111048b838c01610fbd565b909750955085915061111860608b01610fa6565b945060808a013591508082111561112d578384fd5b5061113a8a828b01610fbd565b989b979a50959850939692959293505050565b60006020828403121561115e578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610db5578182fd5b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516111c5816017850160208801611515565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611202816028840160208801611515565b01602801949350505050565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526001600160a01b03918216602084015216604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825282518060208401526112c8816040850160208701611515565b601f01601f19169190910160400192915050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526004908201527f4530303100000000000000000000000000000000000000000000000000000000604082015260600190565b60208082526004908201527f4530303200000000000000000000000000000000000000000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526004908201527f4530303000000000000000000000000000000000000000000000000000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b600082198211156114f1576114f1611577565b500190565b600081600019048311821515161561151057611510611577565b500290565b60005b83811015611530578181015183820152602001611518565b8381111561153f576000848401525b50505050565b60008161155457611554611577565b506000190190565b600060001982141561157057611570611577565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a2effa93e9ed1dadd3d774d1766492fb6eab741893c73b4b08a355e4659e4ac764736f6c63430008000033",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
            },
            "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
            },
            "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
            },
            "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
            },
            "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
            },
            "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
            }
        },
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "add(bytes32,address,bytes)": {
                "notice": "Add an item"
            },
            "toAddress(bytes32)": {
                "notice": "Mapping for converting email to wallet address"
            },
            "toHash(address)": {
                "notice": "Mapping for converting wallet address to email"
            },
            "update(bytes32,address,bytes,address,bytes)": {
                "notice": "Update an item"
            }
        },
        "notice": "Contract for converting e-mail to wallet",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 24,
                "contract": "link-email-wallet-osx-artifacts/contracts/LinkCollection.sol:LinkCollection",
                "label": "_roles",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
            },
            {
                "astId": 5083,
                "contract": "link-email-wallet-osx-artifacts/contracts/LinkCollection.sol:LinkCollection",
                "label": "toAddress",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_address)"
            },
            {
                "astId": 5088,
                "contract": "link-email-wallet-osx-artifacts/contracts/LinkCollection.sol:LinkCollection",
                "label": "toHash",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_address,t_bytes32)"
            },
            {
                "astId": 5092,
                "contract": "link-email-wallet-osx-artifacts/contracts/LinkCollection.sol:LinkCollection",
                "label": "nonce",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_uint256)"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_address,t_bytes32)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bytes32)",
                "numberOfBytes": "32",
                "value": "t_bytes32"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => struct AccessControl.RoleData)",
                "numberOfBytes": "32",
                "value": "t_struct(RoleData)19_storage"
            },
            "t_struct(RoleData)19_storage": {
                "encoding": "inplace",
                "label": "struct AccessControl.RoleData",
                "members": [
                    {
                        "astId": 16,
                        "contract": "link-email-wallet-osx-artifacts/contracts/LinkCollection.sol:LinkCollection",
                        "label": "members",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_mapping(t_address,t_bool)"
                    },
                    {
                        "astId": 18,
                        "contract": "link-email-wallet-osx-artifacts/contracts/LinkCollection.sol:LinkCollection",
                        "label": "adminRole",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_bytes32"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
