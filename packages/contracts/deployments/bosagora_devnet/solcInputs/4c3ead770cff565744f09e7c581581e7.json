{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/FranchiseeCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ValidatorCollection.sol\";\n\n/// @notice 가맹점컬랙션\ncontract FranchiseeCollection {\n    /// @notice Hash value of a blank string\n    bytes32 public constant NULL = 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855;\n\n    /// @notice 검증자의 상태코드\n    enum FranchiseeStatus {\n        INVALID,\n        ACTIVE\n    }\n\n    /// @notice 가맹점의 데이터\n    struct FranchiseeData {\n        string franchiseeId; // 가맹점 아이디\n        uint256 provideWaitTime; // 제품구매 후 마일리지 지급시간\n        bytes32 email; // 가맹점주 이메일 해시\n        uint256 providedMileage; // 제공된 마일리지 총량\n        uint256 usedMileage; // 사용된 마일리지 총량\n        uint256 clearedMileage; // 정산된 마일리지 총량\n        FranchiseeStatus status;\n    }\n\n    mapping(string => FranchiseeData) private franchisees;\n\n    string[] private items;\n\n    address public validatorAddress;\n    ValidatorCollection private validatorCollection;\n\n    /// @notice 가맹점이 추가될 때 발생되는 이벤트\n    event AddedFranchisee(string franchiseeId, uint256 provideWaitTime, bytes32 email);\n    /// @notice 가맹점의 마일리지가 증가할 때 발생되는 이벤트\n    event IncreasedProvidedMileage(string franchiseeId, uint256 increase, uint256 total, string purchaseId);\n    /// @notice 사용자의 마일리지가 증가할 때 발생되는 이벤트\n    event IncreasedUsedMileage(string franchiseeId, uint256 increase, uint256 total, string purchaseId);\n    /// @notice 정산된 마일리가 증가할 때 발생되는 이벤트\n    event IncreasedClearedMileage(string franchiseeId, uint256 increase, uint256 total, string purchaseId);\n\n    address public ledgerAddress;\n    address public deployer;\n\n    /// @notice 생성자\n    /// @param _validatorAddress 검증자컬랙션의 주소\n    constructor(address _validatorAddress) {\n        validatorAddress = _validatorAddress;\n\n        validatorCollection = ValidatorCollection(_validatorAddress);\n        ledgerAddress = address(0x00);\n        deployer = msg.sender;\n    }\n\n    /// @notice 원장 컨트랙트의 주소를 호출한다.\n    function setLedgerAddress(address _ledgerAddress) public {\n        require(msg.sender == deployer, \"No permissions\");\n        ledgerAddress = _ledgerAddress;\n        deployer = address(0x00);\n    }\n\n    /// @notice 검증자들만 호출할 수 있도록 해준다.\n    modifier onlyValidator(address _account) {\n        bool isValidator = false;\n        for (uint256 i = 0; i < validatorCollection.activeItemsLength(); ++i) {\n            if (_account == validatorCollection.activeItemOf(i)) {\n                isValidator = true;\n                break;\n            }\n        }\n        require(isValidator, \"Not validator\");\n        _;\n    }\n\n    /// @notice 원장 컨트랙트에서만 호출될 수 있도록 해준다.\n    modifier onlyLedger() {\n        require(msg.sender == ledgerAddress, \"Not ledger\");\n        _;\n    }\n\n    /// @notice 가맹점을 추가한다\n    /// @param _franchiseeId 가맹점 아이디\n    /// @param _payoutWaitTime 제품구매 후 마일리지가 지급될 시간\n    /// @param _email 가맹점주 이메일 해시\n    function add(\n        string memory _franchiseeId,\n        uint256 _payoutWaitTime,\n        bytes32 _email\n    ) public onlyValidator(msg.sender) {\n        _add(_franchiseeId, _payoutWaitTime, _email);\n    }\n\n    function _add(string memory _franchiseeId, uint256 _payoutWaitTime, bytes32 _email) internal {\n        FranchiseeData memory data = FranchiseeData({\n            franchiseeId: _franchiseeId,\n            provideWaitTime: _payoutWaitTime,\n            email: _email,\n            providedMileage: 0,\n            usedMileage: 0,\n            clearedMileage: 0,\n            status: FranchiseeStatus.ACTIVE\n        });\n        items.push(_franchiseeId);\n        franchisees[_franchiseeId] = data;\n\n        emit AddedFranchisee(_franchiseeId, _payoutWaitTime, _email);\n    }\n\n    /// @notice 지급된 총 마일지리를 누적한다\n    function addProvidedMileage(\n        string memory _franchiseeId,\n        uint256 _amount,\n        string memory _purchaseId\n    ) public onlyLedger {\n        if (franchisees[_franchiseeId].status == FranchiseeStatus.INVALID) {\n            _add(_franchiseeId, 0, NULL);\n        }\n\n        franchisees[_franchiseeId].providedMileage += _amount;\n        emit IncreasedProvidedMileage(_franchiseeId, _amount, franchisees[_franchiseeId].providedMileage, _purchaseId);\n    }\n\n    /// @notice 사용된 총 마일지리를 누적한다\n    function addUsedMileage(string memory _franchiseeId, uint256 _amount, string memory _purchaseId) public onlyLedger {\n        if (franchisees[_franchiseeId].status == FranchiseeStatus.INVALID) {\n            _add(_franchiseeId, 0, NULL);\n        }\n        franchisees[_franchiseeId].usedMileage += _amount;\n        emit IncreasedUsedMileage(_franchiseeId, _amount, franchisees[_franchiseeId].usedMileage, _purchaseId);\n    }\n\n    /// @notice 정산된 총 마일지리를 누적한다\n    function addClearedMileage(\n        string memory _franchiseeId,\n        uint256 _amount,\n        string memory _purchaseId\n    ) public onlyLedger {\n        if (franchisees[_franchiseeId].status == FranchiseeStatus.INVALID) {\n            _add(_franchiseeId, 0, NULL);\n        }\n        franchisees[_franchiseeId].clearedMileage += _amount;\n        emit IncreasedClearedMileage(_franchiseeId, _amount, franchisees[_franchiseeId].clearedMileage, _purchaseId);\n    }\n\n    /// @notice 정산되어야 할 마일지리의 량을 리턴합니다.\n    function getClearMileage(string memory _franchiseeId) public view returns (uint256) {\n        if (franchisees[_franchiseeId].status == FranchiseeStatus.ACTIVE) {\n            FranchiseeData memory data = franchisees[_franchiseeId];\n            if (data.providedMileage + data.clearedMileage < data.usedMileage) {\n                return (data.usedMileage - data.providedMileage - data.clearedMileage);\n            } else {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    /// @notice 가맹점 데이터를 리턴한다\n    /// @param _franchiseeId 가맹점의 아이디\n    function franchiseeOf(string memory _franchiseeId) public view returns (FranchiseeData memory) {\n        return franchisees[_franchiseeId];\n    }\n\n    /// @notice 가맹점의 아이디를 리턴한다\n    /// @param _idx 배열의 순번\n    function franchiseeIdOf(uint256 _idx) public view returns (string memory) {\n        return items[_idx];\n    }\n\n    /// @notice 가맹점의 갯수를 리턴한다\n    function franchiseesLength() public view returns (uint256) {\n        return items.length;\n    }\n}\n"
    },
    "contracts/Ledger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"del-osx-artifacts/contracts/LinkCollection.sol\";\nimport \"./ValidatorCollection.sol\";\nimport \"./TokenPrice.sol\";\nimport \"./FranchiseeCollection.sol\";\n\n/// @notice 마일리지와 토큰의 원장\ncontract Ledger {\n    /// @notice Hash value of a blank string\n    bytes32 public constant NULL = 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855;\n    mapping(bytes32 => uint256) private mileageLedger;\n    mapping(bytes32 => uint256) private tokenLedger;\n    mapping(address => uint256) private nonce;\n\n    struct PurchaseData {\n        string purchaseId;\n        uint256 timestamp;\n        uint256 amount;\n        bytes32 email;\n        string franchiseeId;\n        uint32 method;\n    }\n\n    mapping(string => PurchaseData) private purchases;\n    string[] private purchaseIds;\n\n    bytes32 public foundationAccount;\n    address public tokenAddress;\n    address public validatorAddress;\n    address public linkCollectionAddress;\n    address public tokenPriceAddress;\n    address public franchiseeCollectionAddress;\n\n    IERC20 private token;\n    ValidatorCollection private validatorCollection;\n    LinkCollection private linkCollection;\n    TokenPrice private tokenPrice;\n    FranchiseeCollection private franchiseeCollection;\n\n    /// @notice 검증자가 추가될 때 발생되는 이벤트\n    event SavedPurchase(\n        string purchaseId,\n        uint256 timestamp,\n        uint256 amount,\n        bytes32 email,\n        string franchiseeId,\n        uint32 method\n    );\n    /// @notice 마일리지가 지급될 때 발생되는 이벤트\n    event ProvidedMileage(\n        bytes32 email,\n        uint256 providedAmountMileage,\n        uint256 value,\n        uint256 balanceMileage,\n        string purchaseId\n    );\n    /// @notice 마일리지가 정산될 때 발생되는 이벤트\n    event ProvidedMileageToFranchisee(\n        bytes32 email,\n        uint256 providedAmountMileage,\n        uint256 value,\n        uint256 balanceMileage,\n        string franchiseeId\n    );\n    /// @notice 토큰이 지급될 때 발생되는 이벤트\n    event ProvidedToken(\n        bytes32 email,\n        uint256 providedAmountToken,\n        uint256 value,\n        uint256 balanceToken,\n        string purchaseId\n    );\n    /// @notice 마일리지로 지불을 완료했을 때 발생하는 이벤트\n    event PaidMileage(\n        bytes32 email,\n        uint256 paidAmountMileage,\n        uint256 value,\n        uint256 balanceMileage,\n        string purchaseId\n    );\n    /// @notice 토큰으로 지불을 완료했을 때 발생하는 이벤트\n    event PaidToken(bytes32 email, uint256 paidAmountToken, uint256 value, uint256 balanceToken, string purchaseId);\n    /// @notice 토큰을 예치했을 때 발생하는 이벤트\n    event Deposited(bytes32 email, uint256 depositAmount, uint256 value, uint256 balanceToken, address account);\n    /// @notice 토큰을 인출했을 때 발생하는 이벤트\n    event Withdrawn(bytes32 email, uint256 withdrawAmount, uint256 value, uint256 balanceToken, address account);\n    /// @notice 마일리지를 토큰으로 교환했을 때 발생하는 이벤트\n    event ExchangedMileageToToken(\n        bytes32 email,\n        uint256 amountMileage,\n        uint256 amountToken,\n        uint256 balanceMileage,\n        uint256 balanceToken\n    );\n    /// @notice 토큰을 마일리지로 교환했을 때 발생하는 이벤트\n    event ExchangedTokenToMileage(\n        bytes32 email,\n        uint256 amountMileage,\n        uint256 amountToken,\n        uint256 balanceMileage,\n        uint256 balanceToken\n    );\n\n    /// @notice 생성자\n    /// @param _foundationAccount 재단의 계정\n    /// @param _tokenAddress 토큰 컨트랙트의 주소\n    /// @param _validatorAddress 검증자 컬랙션 컨트랙트의 주소\n    /// @param _linkCollectionAddress 이메일-지갑주소 링크 컨트랙트의 주소\n    /// @param _tokenPriceAddress 토큰가격을 제공하는 컨트랙트의 주소\n    /// @param _franchiseeCollectionAddress 가맹점 컬랙션 컨트랙트의 주소\n    constructor(\n        bytes32 _foundationAccount,\n        address _tokenAddress,\n        address _validatorAddress,\n        address _linkCollectionAddress,\n        address _tokenPriceAddress,\n        address _franchiseeCollectionAddress\n    ) {\n        foundationAccount = _foundationAccount;\n        tokenAddress = _tokenAddress;\n        validatorAddress = _validatorAddress;\n        linkCollectionAddress = _linkCollectionAddress;\n        tokenPriceAddress = _tokenPriceAddress;\n        franchiseeCollectionAddress = _franchiseeCollectionAddress;\n\n        token = IERC20(_tokenAddress);\n        validatorCollection = ValidatorCollection(_validatorAddress);\n        linkCollection = LinkCollection(_linkCollectionAddress);\n        tokenPrice = TokenPrice(_tokenPriceAddress);\n        franchiseeCollection = FranchiseeCollection(_franchiseeCollectionAddress);\n    }\n\n    modifier onlyValidator(address _account) {\n        bool isValidator = false;\n        for (uint256 i = 0; i < validatorCollection.activeItemsLength(); ++i) {\n            if (_account == validatorCollection.activeItemOf(i)) {\n                isValidator = true;\n                break;\n            }\n        }\n        require(isValidator, \"Not validator\");\n        _;\n    }\n\n    /// @notice 구매내역을 저장합니다.\n    /// @dev 이것은 검증자들에 의해 호출되어야 합니다.\n    /// @param _purchaseId 구매 아이디\n    /// @param _timestamp 구매 시간\n    /// @param _amount 구매 금액\n    /// @param _email 구매한 사용자의 이메일 해시\n    /// @param _franchiseeId 구매한 가맹점 아이디\n    function savePurchase(\n        string memory _purchaseId,\n        uint256 _timestamp,\n        uint256 _amount,\n        bytes32 _email,\n        string memory _franchiseeId,\n        uint32 _method\n    ) public onlyValidator(msg.sender) {\n        PurchaseData memory data = PurchaseData({\n            purchaseId: _purchaseId,\n            timestamp: _timestamp,\n            amount: _amount,\n            email: _email,\n            franchiseeId: _franchiseeId,\n            method: _method\n        });\n        purchaseIds.push(_purchaseId);\n        purchases[_purchaseId] = data;\n\n        if ((_method == 0) && (_email != NULL)) {\n            uint256 mileage = _amount / 100;\n            address account = linkCollection.toAddress(_email);\n            if (account == address(0x00)) {\n                provideMileage(_email, mileage, _purchaseId);\n            } else {\n                provideToken(_email, mileage, _purchaseId);\n            }\n            franchiseeCollection.addProvidedMileage(_franchiseeId, mileage, _purchaseId);\n        }\n        emit SavedPurchase(_purchaseId, _timestamp, _amount, _email, _franchiseeId, _method);\n    }\n\n    /// @notice 마일리지를 지급합니다.\n    /// @dev 구매 데이터를 확인한 후 호출됩니다.\n    /// @param _email 이메일 해시\n    /// @param _amount 지급할 마일리지\n    function provideMileage(bytes32 _email, uint256 _amount, string memory _purchaseId) internal {\n        mileageLedger[_email] += _amount;\n        emit ProvidedMileage(_email, _amount, _amount, mileageLedger[_email], _purchaseId);\n    }\n\n    /// @notice 토큰을 지급합니다.\n    /// @dev 구매 데이터를 확인한 후 호출됩니다.\n    /// @param _email 이메일 해시\n    /// @param _amount 지급할 토큰\n    function provideToken(bytes32 _email, uint256 _amount, string memory _purchaseId) internal {\n        uint256 amountToken = convertMileageToToken(_amount);\n\n        require(tokenLedger[foundationAccount] >= amountToken, \"Insufficient foundation balance\");\n        tokenLedger[_email] += amountToken;\n        tokenLedger[foundationAccount] -= amountToken;\n\n        emit ProvidedToken(_email, amountToken, _amount, tokenLedger[_email], _purchaseId);\n    }\n\n    /// @notice 마일리지를 구매에 사용하는 함수\n    /// @dev 중계서버를 통해서 호출됩니다.\n    /// @param _purchaseId 구매 아이디\n    /// @param _amount 구매 금액\n    /// @param _email 구매한 사용자의 이메일 해시\n    /// @param _franchiseeId 구매한 가맹점 아이디\n    /// @param _signer 구매자의 주소\n    /// @param _signature 서명\n    function payMileage(\n        string memory _purchaseId,\n        uint256 _amount,\n        bytes32 _email,\n        string memory _franchiseeId,\n        address _signer,\n        bytes calldata _signature\n    ) public {\n        bytes32 dataHash = keccak256(abi.encode(_purchaseId, _amount, _email, _franchiseeId, _signer, nonce[_signer]));\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _signer, \"Invalid signature\");\n        address userAddress = linkCollection.toAddress(_email);\n        require(userAddress != address(0x00), \"Unregistered email-address\");\n        require(userAddress == _signer, \"Invalid address\");\n        require(mileageLedger[_email] >= _amount, \"Insufficient balance\");\n\n        mileageLedger[_email] -= _amount;\n        franchiseeCollection.addUsedMileage(_franchiseeId, _amount, _purchaseId);\n\n        uint256 clearAmount = franchiseeCollection.getClearMileage(_franchiseeId);\n        if (clearAmount > 0) {\n            franchiseeCollection.addClearedMileage(_franchiseeId, clearAmount, _purchaseId);\n            FranchiseeCollection.FranchiseeData memory franchisee = franchiseeCollection.franchiseeOf(_franchiseeId);\n            if (franchisee.email != NULL) {\n                mileageLedger[franchisee.email] += clearAmount;\n                emit ProvidedMileageToFranchisee(\n                    franchisee.email,\n                    clearAmount,\n                    clearAmount,\n                    mileageLedger[franchisee.email],\n                    _franchiseeId\n                );\n            }\n        }\n\n        nonce[_signer]++;\n\n        emit PaidMileage(_email, _amount, _amount, mileageLedger[_email], _purchaseId);\n    }\n\n    /// @notice 토큰을 구매에 사용하는 함수\n    /// @dev 중계서버를 통해서 호출됩니다.\n    /// @param _purchaseId 구매 아이디\n    /// @param _amount 구매 금액\n    /// @param _email 구매한 사용자의 이메일 해시\n    /// @param _franchiseeId 구매한 가맹점 아이디\n    /// @param _signer 구매자의 주소\n    /// @param _signature 서명\n    function payToken(\n        string memory _purchaseId,\n        uint256 _amount,\n        bytes32 _email,\n        string memory _franchiseeId,\n        address _signer,\n        bytes calldata _signature\n    ) public {\n        bytes32 dataHash = keccak256(abi.encode(_purchaseId, _amount, _email, _franchiseeId, _signer, nonce[_signer]));\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _signer, \"Invalid signature\");\n        address userAddress = linkCollection.toAddress(_email);\n        require(userAddress != address(0x00), \"Unregistered email-address\");\n        require(userAddress == _signer, \"Invalid address\");\n\n        uint256 amountToken = convertMileageToToken(_amount);\n        require(tokenLedger[_email] >= amountToken, \"Insufficient balance\");\n\n        tokenLedger[_email] -= amountToken;\n        tokenLedger[foundationAccount] += amountToken;\n        franchiseeCollection.addUsedMileage(_franchiseeId, _amount, _purchaseId);\n\n        uint256 clearAmount = franchiseeCollection.getClearMileage(_franchiseeId);\n        if (clearAmount > 0) {\n            franchiseeCollection.addClearedMileage(_franchiseeId, clearAmount, _purchaseId);\n            FranchiseeCollection.FranchiseeData memory franchisee = franchiseeCollection.franchiseeOf(_franchiseeId);\n            if (franchisee.email != NULL) {\n                mileageLedger[franchisee.email] += clearAmount;\n                emit ProvidedMileageToFranchisee(\n                    franchisee.email,\n                    clearAmount,\n                    clearAmount,\n                    mileageLedger[franchisee.email],\n                    _franchiseeId\n                );\n            }\n        }\n\n        nonce[_signer]++;\n\n        emit PaidToken(_email, amountToken, _amount, tokenLedger[_email], _purchaseId);\n    }\n\n    function convertMileageToToken(uint256 amount) internal view returns (uint256) {\n        uint256 price = tokenPrice.get(\"KRW\");\n        return (amount * tokenPrice.MULTIPLE()) / price;\n    }\n\n    function convertTokenToMileage(uint256 amount) internal view returns (uint256) {\n        uint256 price = tokenPrice.get(\"KRW\");\n        return (amount * price) / tokenPrice.MULTIPLE();\n    }\n\n    /// @notice 토큰을 예치합니다.\n    /// @param _amount 금액\n    function deposit(uint256 _amount) public {\n        bytes32 email = linkCollection.toEmail(msg.sender);\n        require(email != bytes32(0x00), \"Unregistered email-address\");\n\n        require(_amount <= token.allowance(msg.sender, address(this)), \"Not allowed deposit\");\n        token.transferFrom(msg.sender, address(this), _amount);\n\n        tokenLedger[email] += _amount;\n\n        uint256 amountMileage = convertTokenToMileage(_amount);\n        emit Deposited(email, _amount, amountMileage, tokenLedger[email], msg.sender);\n    }\n\n    /// @notice 토큰을 인출합니다.\n    /// @param _amount 금액\n    function withdraw(uint256 _amount) public {\n        bytes32 email = linkCollection.toEmail(msg.sender);\n        require(email != bytes32(0x00), \"Unregistered email-address\");\n\n        require(_amount <= tokenLedger[email], \"Insufficient balance\");\n        token.transfer(msg.sender, _amount);\n\n        tokenLedger[email] -= _amount;\n\n        uint256 amountMileage = convertTokenToMileage(_amount);\n        emit Withdrawn(email, _amount, amountMileage, tokenLedger[email], msg.sender);\n    }\n\n    /// @notice 마일리지를 토큰으로 교환합니다\n    /// @dev 중계서버를 통해서 호출됩니다.\n    /// @param _email 사용자의 이메일 해시\n    /// @param _amountMileage 교환할 마일리지의 량\n    /// @param _signer 사용자의 주소\n    /// @param _signature 서명\n    function exchangeMileageToToken(\n        bytes32 _email,\n        uint256 _amountMileage,\n        address _signer,\n        bytes calldata _signature\n    ) public {\n        bytes32 dataHash = keccak256(abi.encode(_email, _amountMileage, _signer, nonce[_signer]));\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _signer, \"Invalid signature\");\n        address userAddress = linkCollection.toAddress(_email);\n        require(userAddress != address(0x00), \"Unregistered email-address\");\n        require(userAddress == _signer, \"Invalid address\");\n\n        require(mileageLedger[_email] >= _amountMileage, \"Insufficient balance\");\n\n        uint256 amountToken = convertMileageToToken(_amountMileage);\n        require(tokenLedger[foundationAccount] >= amountToken, \"Insufficient foundation balance\");\n\n        mileageLedger[_email] -= _amountMileage;\n\n        tokenLedger[_email] += amountToken;\n        tokenLedger[foundationAccount] -= amountToken;\n\n        nonce[_signer]++;\n\n        emit ExchangedMileageToToken(_email, _amountMileage, amountToken, mileageLedger[_email], tokenLedger[_email]);\n    }\n\n    /// @notice 토큰을 마일리지로 교환합니다\n    /// @dev 중계서버를 통해서 호출됩니다.\n    /// @param _email 사용자의 이메일 해시\n    /// @param _amountToken 교환할 토큰의 량\n    /// @param _signer 사용자의 주소\n    /// @param _signature 서명\n    function exchangeTokenToMileage(\n        bytes32 _email,\n        uint256 _amountToken,\n        address _signer,\n        bytes calldata _signature\n    ) public {\n        bytes32 dataHash = keccak256(abi.encode(_email, _amountToken, _signer, nonce[_signer]));\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _signer, \"Invalid signature\");\n        address userAddress = linkCollection.toAddress(_email);\n        require(userAddress != address(0x00), \"Unregistered email-address\");\n        require(userAddress == _signer, \"Invalid address\");\n\n        require(tokenLedger[_email] >= _amountToken, \"Insufficient balance\");\n\n        tokenLedger[_email] -= _amountToken;\n        tokenLedger[foundationAccount] += _amountToken;\n\n        uint256 amountMileage = convertTokenToMileage(_amountToken);\n        mileageLedger[_email] += amountMileage;\n\n        nonce[_signer]++;\n\n        emit ExchangedTokenToMileage(_email, amountMileage, _amountToken, mileageLedger[_email], tokenLedger[_email]);\n    }\n\n    /// @notice 마일리지의 잔고를 리턴한다\n    /// @param _hash 이메일의 해시\n    function mileageBalanceOf(bytes32 _hash) public view returns (uint256) {\n        return mileageLedger[_hash];\n    }\n\n    /// @notice 토큰의 잔고를 리턴한다\n    /// @param _hash 이메일의 해시\n    function tokenBalanceOf(bytes32 _hash) public view returns (uint256) {\n        return tokenLedger[_hash];\n    }\n\n    /// @notice nonce를  리턴한다\n    /// @param _account 지갑주소\n    function nonceOf(address _account) public view returns (uint256) {\n        return nonce[_account];\n    }\n\n    /// @notice 구매 데이터를 리턴한다\n    /// @param _purchaseId 구매 아이디\n    function purchaseOf(string memory _purchaseId) public view returns (PurchaseData memory) {\n        return purchases[_purchaseId];\n    }\n\n    /// @notice 구매 데이터의 아이디를 리턴한다\n    /// @param _idx 배열의 순번\n    function purchaseIdOf(uint256 _idx) public view returns (string memory) {\n        return purchaseIds[_idx];\n    }\n\n    /// @notice 구매 데이터의 갯수를 리턴한다\n    function purchasesLength() public view returns (uint256) {\n        return purchaseIds.length;\n    }\n}\n"
    },
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Token is ERC20 {\n    uint256 public constant INITIAL_SUPPLY = 100000000000000000000000000;\n\n    constructor(string memory tokenName, string memory tokenSymbol) ERC20(tokenName, tokenSymbol) {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n}\n"
    },
    "contracts/TokenPrice.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ValidatorCollection.sol\";\n\n/// @notice 토큰 가격을 제공하는 스마트컨트랙트\ncontract TokenPrice {\n    uint256 public constant MULTIPLE = 1000000000;\n    mapping(string => uint256) private prices;\n\n    address public validatorAddress;\n    ValidatorCollection private validatorCollection;\n\n    /// @notice 가격이 저장될 때 발생되는 이벤트\n    event SetPrice(string currency, uint256 price);\n\n    /// @notice 생성자\n    /// @param _validatorAddress 검증자컬랙션의 주소\n    constructor(address _validatorAddress) {\n        validatorAddress = _validatorAddress;\n\n        validatorCollection = ValidatorCollection(_validatorAddress);\n    }\n\n    modifier onlyValidator(address _account) {\n        bool isValidator = false;\n        for (uint256 i = 0; i < validatorCollection.activeItemsLength(); ++i) {\n            if (_account == validatorCollection.activeItemOf(i)) {\n                isValidator = true;\n                break;\n            }\n        }\n        require(isValidator, \"Not validator\");\n        _;\n    }\n\n    /// @notice 통화에 대한 가격을 저장한다.\n    /// @param _currency 통화명\n    /// @param _price 토큰의 가격\n    function set(string memory _currency, uint256 _price) public onlyValidator(msg.sender) {\n        prices[_currency] = _price;\n\n        emit SetPrice(_currency, _price);\n    }\n\n    /// @notice 통화에 대한 가격을 제공한다.\n    /// @param _currency 통화명\n    function get(string memory _currency) public view returns (uint256) {\n        return prices[_currency];\n    }\n}\n"
    },
    "contracts/ValidatorCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @notice 검증자들을 저장하는 컨트랙트\ncontract ValidatorCollection {\n    uint256 public constant MINIMUM_DEPOSIT_AMOUNT = 50000000000000000000000;\n\n    address public tokenAddress;\n\n    IERC20 private token;\n\n    /// @notice 검증자의 상태코드\n    enum Status {\n        INVALID, //  초기값\n        ACTIVE, //  검증자의 기능이 활성화됨\n        STOP, //  예치금 부족으로 정지된 상태\n        EXIT //  탈퇴한 상태\n    }\n\n    struct ValidatorData {\n        address validator; // 검증자의 지갑주소\n        uint256 start; // 검증자로서 역할을 수행할 수 있는 시작 시간\n        uint256 balance; // 검증자의 예치금\n        Status status; // 검증자의 상태\n    }\n\n    address[] private items;\n\n    address[] private activeItems;\n\n    mapping(address => ValidatorData) private validators;\n\n    /// @notice 검증자가 추가될 때 발생되는 이벤트\n    event AddedValidator(address validator, uint256 start, uint256 balance, Status status);\n    /// @notice 자금이 입급될 때 발생되는 이벤트\n    event DepositedForValidator(address validator, uint256 amount, uint256 balance);\n    /// @notice 검증자의 등록이 요청 되었을 때 발생되는 이벤트\n    event RequestedToJoinValidator(address requester);\n    /// @notice 검증자의 강제 탈퇴가 요청 되었을 때 발생되는 이벤트\n    event RequestedToExitValidator(address requester, address validator);\n    /// @notice 검증자의 자발적 탈퇴가 완료되었을 때 발생되는 이벤트\n    event ExitedFromValidator(address validator);\n\n    /// @notice 생성자\n    /// @param _validators 초기에 설정될 검증자, 예치금이 예치된 후 그 즉시 활성화 된다.\n    constructor(address _tokenAddress, address[] memory _validators) {\n        tokenAddress = _tokenAddress;\n        token = IERC20(_tokenAddress);\n\n        for (uint256 i = 0; i < _validators.length; ++i) {\n            ValidatorData memory item = ValidatorData({\n                validator: _validators[i],\n                start: block.timestamp,\n                balance: 0,\n                status: Status.STOP\n            });\n            items.push(_validators[i]);\n            validators[_validators[i]] = item;\n\n            emit AddedValidator(item.validator, item.start, item.balance, item.status);\n        }\n    }\n\n    /// @notice 예치금을 추가로 입급합니다.\n    /// @param _amount 추가로 입금할 예치 금액\n    function deposit(uint256 _amount) public {\n        ValidatorData memory item = validators[msg.sender];\n        require(item.validator == msg.sender, \"Not validator\");\n        require(item.status != Status.INVALID, \"Not validator\");\n        require(item.status != Status.EXIT, \"Already exited\");\n\n        require(_amount <= token.allowance(msg.sender, address(this)), \"Not allowed deposit\");\n        token.transferFrom(msg.sender, address(this), _amount);\n\n        validators[msg.sender].balance += _amount;\n\n        if (validators[msg.sender].balance >= MINIMUM_DEPOSIT_AMOUNT) validators[msg.sender].status = Status.ACTIVE;\n\n        emit DepositedForValidator(msg.sender, _amount, validators[msg.sender].balance);\n    }\n\n    /// @notice 신규 검증자 등록을 신청합니다.\n    function requestRegistration() public {\n        require(validators[msg.sender].status == Status.INVALID, \"Already validator\");\n\n        require(MINIMUM_DEPOSIT_AMOUNT <= token.allowance(msg.sender, address(this)), \"Not allowed deposit\");\n        token.transferFrom(msg.sender, address(this), MINIMUM_DEPOSIT_AMOUNT);\n\n        ValidatorData memory item = ValidatorData({\n            validator: msg.sender,\n            start: block.timestamp + 86500 * 7,\n            balance: MINIMUM_DEPOSIT_AMOUNT,\n            status: Status.ACTIVE\n        });\n\n        items.push(msg.sender);\n        validators[msg.sender] = item;\n\n        emit RequestedToJoinValidator(msg.sender);\n    }\n\n    /// @notice 검증자의 강제탈퇴를 신청합니다.\n    function requestExit(address validator) public {\n        ValidatorData memory item = validators[msg.sender];\n        require(item.validator == msg.sender, \"Not validator\");\n        require(item.status == Status.ACTIVE && item.start <= block.timestamp, \"Invalid validator\");\n\n        require(validators[validator].status != Status.INVALID, \"Not validator\");\n        validators[validator].status = Status.EXIT;\n\n        if (validators[validator].balance > 0) {\n            token.transfer(validator, validators[validator].balance);\n            validators[validator].balance = 0;\n        }\n\n        emit RequestedToExitValidator(msg.sender, validator);\n    }\n\n    function makeActiveItems() public {\n        ValidatorData memory item = validators[msg.sender];\n        require(item.validator == msg.sender, \"Not validator\");\n        require(item.status == Status.ACTIVE && item.start <= block.timestamp, \"Invalid validator\");\n\n        _makeActiveItems();\n    }\n\n    /// @notice 등록된 검증자를 리턴한다.\n    /// @param _idx 배열의 순번\n    function itemOf(uint256 _idx) public view returns (address) {\n        return items[_idx];\n    }\n\n    /// @notice 등록된 검증자의 수를 리턴합니다.\n    function itemsLength() public view returns (uint256) {\n        return items.length;\n    }\n\n    /// @notice 유효한 검증자를 리턴한다.\n    /// @param _idx 배열의 순번\n    function activeItemOf(uint256 _idx) public view returns (address) {\n        return activeItems[_idx];\n    }\n\n    /// @notice 유효한 검증자의 수를 리턴합니다.\n    function activeItemsLength() public view returns (uint256) {\n        return activeItems.length;\n    }\n\n    /// @notice 검증자의 데이타를 리턴합니다.\n    /// @param _account 지갑주소\n    function validatorOf(address _account) public view returns (ValidatorData memory) {\n        return validators[_account];\n    }\n\n    function _makeActiveItems() internal {\n        while (activeItems.length > 0) activeItems.pop();\n        for (uint256 i = 0; i < items.length; ++i) {\n            ValidatorData memory item = validators[items[i]];\n\n            if (item.status == Status.ACTIVE && item.start <= block.timestamp) {\n                activeItems.push(items[i]);\n            }\n        }\n    }\n\n    /// @notice 자발적으로 탈퇴하기 위해 사용되는 함수입니다.\n    function exit() public {\n        ValidatorData memory item = validators[msg.sender];\n        require(item.validator == msg.sender, \"Not validator\");\n        require(item.status == Status.ACTIVE && item.start <= block.timestamp, \"Invalid validator\");\n\n        makeActiveItems();\n        require(activeItems.length > 1, \"Last validator\");\n\n        validators[msg.sender].status = Status.EXIT;\n\n        if (validators[msg.sender].balance > 0) {\n            token.transfer(msg.sender, validators[msg.sender].balance);\n            validators[msg.sender].balance = 0;\n        }\n\n        emit ExitedFromValidator(msg.sender);\n    }\n}\n"
    },
    "del-osx-artifacts/contracts/LinkCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n// E000 : invalid signature\n// E001 : invalid email hash\n// E002 : invalid address\n// E003 : not validator\n\n/// Contract for converting e-mail to wallet\ncontract LinkCollection {\n    bytes32 public constant NULL = 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855;\n\n    mapping(bytes32 => address) private emailToAddress;\n    mapping(address => bytes32) private addressToEmail;\n    mapping(address => uint256) private nonce;\n\n    /// @notice 요청 아이템의 상태코드\n    enum RequestStatus {\n        INVALID,\n        REQUESTED,\n        ACCEPTED,\n        REJECTED\n    }\n\n    struct RequestItem {\n        uint256 id;\n        bytes32 email;\n        address wallet;\n        bytes signature;\n        uint32 agreement;\n        uint32 opposition;\n        uint32 abstaining;\n        mapping(address => Ballot) ballots;\n        RequestStatus status;\n    }\n    mapping(uint256 => RequestItem) private requests;\n\n    enum Ballot {\n        NONE,\n        AGREEMENT,\n        OPPOSITION,\n        ABSTAINING\n    }\n\n    uint256 private quorum;\n    uint256 private latestId;\n\n    /// @notice 검증자의 상태코드\n    enum ValidatorStatus {\n        INVALID, //  초기값\n        ACTIVE //  검증자의 기능이 활성화됨\n    }\n\n    struct ValidatorItem {\n        address validator; // 검증자의 지갑주소\n        ValidatorStatus status; // 검증자의 상태\n    }\n\n    mapping(address => ValidatorItem) private validators;\n    address[] private validatorItems;\n\n    /// @notice 등록요청인 완료된 후 발생되는 이벤트\n    event AddedRequestItem(uint256 id, bytes32 email, address wallet);\n    /// @notice 등록요청이 승인된 후 발생되는 이벤트\n    event AcceptedRequestItem(uint256 id, bytes32 email, address wallet);\n    /// @notice 등록요청이 거부된 후 발생되는 이벤트\n    event RejectedRequestItem(uint256 id, bytes32 email, address wallet);\n    /// @notice 항목이 업데이트 후 발생되는 이벤트\n    event UpdatedLinkItem(bytes32 email, address wallet1, address wallet2);\n\n    /// @notice 생성자\n    /// @param _validators 검증자들\n    constructor(address[] memory _validators) {\n        for (uint256 i = 0; i < _validators.length; ++i) {\n            ValidatorItem memory item = ValidatorItem({ validator: _validators[i], status: ValidatorStatus.ACTIVE });\n            validatorItems.push(_validators[i]);\n            validators[_validators[i]] = item;\n        }\n\n        quorum = uint256(2000) / uint256(3);\n        latestId = 0;\n    }\n\n    /// @notice 검증자들만 호출할 수 있도록 해준다.\n    modifier onlyValidator() {\n        require(validators[msg.sender].status == ValidatorStatus.ACTIVE, \"E003\");\n        _;\n    }\n\n    /// @notice 이메일-지갑주소 항목을 업데이트 한다\n    /// @param _email 이메일의 해시\n    /// @param _wallet1 현재 지갑주소\n    /// @param _signature1 현재 지갑주소의 서명\n    /// @param _wallet2 새로운 지갑주소\n    /// @param _signature2 새로운 지갑주소의 서명\n    function update(\n        bytes32 _email,\n        address _wallet1,\n        bytes calldata _signature1,\n        address _wallet2,\n        bytes calldata _signature2\n    ) public {\n        require(_email != NULL, \"E001\");\n        bytes32 dataHash1 = keccak256(abi.encode(_email, _wallet1, nonce[_wallet1]));\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash1), _signature1) == _wallet1, \"E000\");\n\n        bytes32 dataHash2 = keccak256(abi.encode(_email, _wallet2, nonce[_wallet2]));\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash2), _signature2) == _wallet2, \"E000\");\n\n        require(emailToAddress[_email] == _wallet1, \"E001\");\n        require(addressToEmail[_wallet1] == _email, \"E002\");\n        require(addressToEmail[_wallet2] == bytes32(0x00), \"E002\");\n        require(_wallet1 != _wallet2, \"E002\");\n\n        delete addressToEmail[_wallet1];\n\n        emailToAddress[_email] = _wallet2;\n        addressToEmail[_wallet2] = _email;\n\n        nonce[_wallet1]++;\n        nonce[_wallet2]++;\n\n        emit UpdatedLinkItem(_email, _wallet1, _wallet2);\n    }\n\n    /// @notice 이메일-지갑주소 항목의 등록을 요청한다\n    /// @param _email 이메일의 해시\n    /// @param _wallet 지갑주소\n    /// @param _signature 지갑주소의 서명\n    function addRequest(bytes32 _email, address _wallet, bytes calldata _signature) public {\n        require(_email != NULL, \"E001\");\n        bytes32 dataHash = keccak256(abi.encode(_email, _wallet, nonce[_wallet]));\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _wallet, \"E000\");\n\n        require(emailToAddress[_email] == address(0x00), \"E001\");\n        require(addressToEmail[_wallet] == bytes32(0x00), \"E002\");\n\n        nonce[_wallet]++;\n\n        uint256 id = latestId++;\n        requests[id].id = id;\n        requests[id].email = _email;\n        requests[id].wallet = _wallet;\n        requests[id].signature = _signature;\n        requests[id].status = RequestStatus.REQUESTED;\n\n        emit AddedRequestItem(id, _email, _wallet);\n    }\n\n    /// @notice 검증자들이 이메일 검증결과를 등록한다.\n    /// @param _id 요청 아이디\n    /// @param _ballot 이메일 검증결과\n    function voteRequest(uint _id, Ballot _ballot) public onlyValidator {\n        require(requests[_id].status != RequestStatus.INVALID, \"\");\n\n        if (requests[_id].status != RequestStatus.ACCEPTED) {\n            if (requests[_id].ballots[msg.sender] != _ballot) {\n                if (requests[_id].ballots[msg.sender] == Ballot.AGREEMENT) {\n                    requests[_id].agreement--;\n                } else if (requests[_id].ballots[msg.sender] == Ballot.OPPOSITION) {\n                    requests[_id].opposition--;\n                } else if (requests[_id].ballots[msg.sender] == Ballot.ABSTAINING) {\n                    requests[_id].abstaining--;\n                }\n                if (_ballot == Ballot.AGREEMENT) {\n                    requests[_id].agreement++;\n                } else if (_ballot == Ballot.OPPOSITION) {\n                    requests[_id].opposition++;\n                } else {\n                    requests[_id].abstaining++;\n                }\n\n                if ((requests[_id].agreement * 1000) / validatorItems.length >= quorum) {\n                    if (\n                        emailToAddress[requests[_id].email] == address(0x00) &&\n                        addressToEmail[requests[_id].wallet] == bytes32(0x00)\n                    ) {\n                        emailToAddress[requests[_id].email] = requests[_id].wallet;\n                        addressToEmail[requests[_id].wallet] = requests[_id].email;\n                        requests[_id].status = RequestStatus.ACCEPTED;\n                        emit AcceptedRequestItem(requests[_id].id, requests[_id].email, requests[_id].wallet);\n                    } else {\n                        requests[_id].status = RequestStatus.REJECTED;\n                        emit RejectedRequestItem(requests[_id].id, requests[_id].email, requests[_id].wallet);\n                    }\n                }\n            }\n        }\n    }\n\n    /// @notice 이메일해시와 연결된 지갑주소를 리턴한다.\n    /// @param _email 이메일의 해시\n    function toAddress(bytes32 _email) public view returns (address) {\n        return emailToAddress[_email];\n    }\n\n    /// @notice 지갑주소와 연결된 이메일해시를 리턴한다.\n    /// @param _wallet 지갑주소\n    function toEmail(address _wallet) public view returns (bytes32) {\n        return addressToEmail[_wallet];\n    }\n\n    /// @notice nonce를  리턴한다\n    /// @param _wallet 지갑주소\n    function nonceOf(address _wallet) public view returns (uint256) {\n        return nonce[_wallet];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}