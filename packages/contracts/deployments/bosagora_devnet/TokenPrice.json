{
  "address": "0x2473770AdCAB3253504f8d9B46dA22417037a2ce",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validatorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "currency",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetPrice",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MULTIPLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_currency",
          "type": "string"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_currency",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a4d1764faf093a295fe7a0bea09b8f87020482d7249fe377d41c7982be1a3c2",
  "receipt": {
    "to": null,
    "from": "0xDc245797409fb79446523Fa1A4ca97294eef22EE",
    "contractAddress": "0x2473770AdCAB3253504f8d9B46dA22417037a2ce",
    "transactionIndex": 0,
    "gasUsed": "441581",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x89290291205e9b79e1907bf348cf13f80293aa60c8f768e2bde576e915bba79a",
    "transactionHash": "0x3a4d1764faf093a295fe7a0bea09b8f87020482d7249fe377d41c7982be1a3c2",
    "logs": [],
    "blockNumber": 668,
    "cumulativeGasUsed": "441581",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x43Bc973075748Afc704D9b59B156f9b9E24b73fb"
  ],
  "numDeployments": 1,
  "solcInputHash": "4c3ead770cff565744f09e7c581581e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetPrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_currency\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_validatorAddress\":\"\\uac80\\uc99d\\uc790\\uceec\\ub799\\uc158\\uc758 \\uc8fc\\uc18c\"}},\"get(string)\":{\"params\":{\"_currency\":\"\\ud1b5\\ud654\\uba85\"}},\"set(string,uint256)\":{\"params\":{\"_currency\":\"\\ud1b5\\ud654\\uba85\",\"_price\":\"\\ud1a0\\ud070\\uc758 \\uac00\\uaca9\"}}},\"version\":1},\"userdoc\":{\"events\":{\"SetPrice(string,uint256)\":{\"notice\":\"\\uac00\\uaca9\\uc774 \\uc800\\uc7a5\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"\\uc0dd\\uc131\\uc790\"},\"get(string)\":{\"notice\":\"\\ud1b5\\ud654\\uc5d0 \\ub300\\ud55c \\uac00\\uaca9\\uc744 \\uc81c\\uacf5\\ud55c\\ub2e4.\"},\"set(string,uint256)\":{\"notice\":\"\\ud1b5\\ud654\\uc5d0 \\ub300\\ud55c \\uac00\\uaca9\\uc744 \\uc800\\uc7a5\\ud55c\\ub2e4.\"}},\"notice\":\"\\ud1a0\\ud070 \\uac00\\uaca9\\uc744 \\uc81c\\uacf5\\ud558\\ub294 \\uc2a4\\ub9c8\\ud2b8\\ucee8\\ud2b8\\ub799\\ud2b8\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenPrice.sol\":\"TokenPrice\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/TokenPrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ValidatorCollection.sol\\\";\\n\\n/// @notice \\ud1a0\\ud070 \\uac00\\uaca9\\uc744 \\uc81c\\uacf5\\ud558\\ub294 \\uc2a4\\ub9c8\\ud2b8\\ucee8\\ud2b8\\ub799\\ud2b8\\ncontract TokenPrice {\\n    uint256 public constant MULTIPLE = 1000000000;\\n    mapping(string => uint256) private prices;\\n\\n    address public validatorAddress;\\n    ValidatorCollection private validatorCollection;\\n\\n    /// @notice \\uac00\\uaca9\\uc774 \\uc800\\uc7a5\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event SetPrice(string currency, uint256 price);\\n\\n    /// @notice \\uc0dd\\uc131\\uc790\\n    /// @param _validatorAddress \\uac80\\uc99d\\uc790\\uceec\\ub799\\uc158\\uc758 \\uc8fc\\uc18c\\n    constructor(address _validatorAddress) {\\n        validatorAddress = _validatorAddress;\\n\\n        validatorCollection = ValidatorCollection(_validatorAddress);\\n    }\\n\\n    modifier onlyValidator(address _account) {\\n        bool isValidator = false;\\n        for (uint256 i = 0; i < validatorCollection.activeItemsLength(); ++i) {\\n            if (_account == validatorCollection.activeItemOf(i)) {\\n                isValidator = true;\\n                break;\\n            }\\n        }\\n        require(isValidator, \\\"Not validator\\\");\\n        _;\\n    }\\n\\n    /// @notice \\ud1b5\\ud654\\uc5d0 \\ub300\\ud55c \\uac00\\uaca9\\uc744 \\uc800\\uc7a5\\ud55c\\ub2e4.\\n    /// @param _currency \\ud1b5\\ud654\\uba85\\n    /// @param _price \\ud1a0\\ud070\\uc758 \\uac00\\uaca9\\n    function set(string memory _currency, uint256 _price) public onlyValidator(msg.sender) {\\n        prices[_currency] = _price;\\n\\n        emit SetPrice(_currency, _price);\\n    }\\n\\n    /// @notice \\ud1b5\\ud654\\uc5d0 \\ub300\\ud55c \\uac00\\uaca9\\uc744 \\uc81c\\uacf5\\ud55c\\ub2e4.\\n    /// @param _currency \\ud1b5\\ud654\\uba85\\n    function get(string memory _currency) public view returns (uint256) {\\n        return prices[_currency];\\n    }\\n}\\n\",\"keccak256\":\"0xee387812d2a65361f381408adc09fd550f25c2ec515bdb49a3c6791a2c9dfb33\",\"license\":\"MIT\"},\"contracts/ValidatorCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice \\uac80\\uc99d\\uc790\\ub4e4\\uc744 \\uc800\\uc7a5\\ud558\\ub294 \\ucee8\\ud2b8\\ub799\\ud2b8\\ncontract ValidatorCollection {\\n    uint256 public constant MINIMUM_DEPOSIT_AMOUNT = 50000000000000000000000;\\n\\n    address public tokenAddress;\\n\\n    IERC20 private token;\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\uc0c1\\ud0dc\\ucf54\\ub4dc\\n    enum Status {\\n        INVALID, //  \\ucd08\\uae30\\uac12\\n        ACTIVE, //  \\uac80\\uc99d\\uc790\\uc758 \\uae30\\ub2a5\\uc774 \\ud65c\\uc131\\ud654\\ub428\\n        STOP, //  \\uc608\\uce58\\uae08 \\ubd80\\uc871\\uc73c\\ub85c \\uc815\\uc9c0\\ub41c \\uc0c1\\ud0dc\\n        EXIT //  \\ud0c8\\ud1f4\\ud55c \\uc0c1\\ud0dc\\n    }\\n\\n    struct ValidatorData {\\n        address validator; // \\uac80\\uc99d\\uc790\\uc758 \\uc9c0\\uac11\\uc8fc\\uc18c\\n        uint256 start; // \\uac80\\uc99d\\uc790\\ub85c\\uc11c \\uc5ed\\ud560\\uc744 \\uc218\\ud589\\ud560 \\uc218 \\uc788\\ub294 \\uc2dc\\uc791 \\uc2dc\\uac04\\n        uint256 balance; // \\uac80\\uc99d\\uc790\\uc758 \\uc608\\uce58\\uae08\\n        Status status; // \\uac80\\uc99d\\uc790\\uc758 \\uc0c1\\ud0dc\\n    }\\n\\n    address[] private items;\\n\\n    address[] private activeItems;\\n\\n    mapping(address => ValidatorData) private validators;\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\uac00 \\ucd94\\uac00\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event AddedValidator(address validator, uint256 start, uint256 balance, Status status);\\n    /// @notice \\uc790\\uae08\\uc774 \\uc785\\uae09\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event DepositedForValidator(address validator, uint256 amount, uint256 balance);\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\ub4f1\\ub85d\\uc774 \\uc694\\uccad \\ub418\\uc5c8\\uc744 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event RequestedToJoinValidator(address requester);\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\uac15\\uc81c \\ud0c8\\ud1f4\\uac00 \\uc694\\uccad \\ub418\\uc5c8\\uc744 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event RequestedToExitValidator(address requester, address validator);\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\uc790\\ubc1c\\uc801 \\ud0c8\\ud1f4\\uac00 \\uc644\\ub8cc\\ub418\\uc5c8\\uc744 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event ExitedFromValidator(address validator);\\n\\n    /// @notice \\uc0dd\\uc131\\uc790\\n    /// @param _validators \\ucd08\\uae30\\uc5d0 \\uc124\\uc815\\ub420 \\uac80\\uc99d\\uc790, \\uc608\\uce58\\uae08\\uc774 \\uc608\\uce58\\ub41c \\ud6c4 \\uadf8 \\uc989\\uc2dc \\ud65c\\uc131\\ud654 \\ub41c\\ub2e4.\\n    constructor(address _tokenAddress, address[] memory _validators) {\\n        tokenAddress = _tokenAddress;\\n        token = IERC20(_tokenAddress);\\n\\n        for (uint256 i = 0; i < _validators.length; ++i) {\\n            ValidatorData memory item = ValidatorData({\\n                validator: _validators[i],\\n                start: block.timestamp,\\n                balance: 0,\\n                status: Status.STOP\\n            });\\n            items.push(_validators[i]);\\n            validators[_validators[i]] = item;\\n\\n            emit AddedValidator(item.validator, item.start, item.balance, item.status);\\n        }\\n    }\\n\\n    /// @notice \\uc608\\uce58\\uae08\\uc744 \\ucd94\\uac00\\ub85c \\uc785\\uae09\\ud569\\ub2c8\\ub2e4.\\n    /// @param _amount \\ucd94\\uac00\\ub85c \\uc785\\uae08\\ud560 \\uc608\\uce58 \\uae08\\uc561\\n    function deposit(uint256 _amount) public {\\n        ValidatorData memory item = validators[msg.sender];\\n        require(item.validator == msg.sender, \\\"Not validator\\\");\\n        require(item.status != Status.INVALID, \\\"Not validator\\\");\\n        require(item.status != Status.EXIT, \\\"Already exited\\\");\\n\\n        require(_amount <= token.allowance(msg.sender, address(this)), \\\"Not allowed deposit\\\");\\n        token.transferFrom(msg.sender, address(this), _amount);\\n\\n        validators[msg.sender].balance += _amount;\\n\\n        if (validators[msg.sender].balance >= MINIMUM_DEPOSIT_AMOUNT) validators[msg.sender].status = Status.ACTIVE;\\n\\n        emit DepositedForValidator(msg.sender, _amount, validators[msg.sender].balance);\\n    }\\n\\n    /// @notice \\uc2e0\\uaddc \\uac80\\uc99d\\uc790 \\ub4f1\\ub85d\\uc744 \\uc2e0\\uccad\\ud569\\ub2c8\\ub2e4.\\n    function requestRegistration() public {\\n        require(validators[msg.sender].status == Status.INVALID, \\\"Already validator\\\");\\n\\n        require(MINIMUM_DEPOSIT_AMOUNT <= token.allowance(msg.sender, address(this)), \\\"Not allowed deposit\\\");\\n        token.transferFrom(msg.sender, address(this), MINIMUM_DEPOSIT_AMOUNT);\\n\\n        ValidatorData memory item = ValidatorData({\\n            validator: msg.sender,\\n            start: block.timestamp + 86500 * 7,\\n            balance: MINIMUM_DEPOSIT_AMOUNT,\\n            status: Status.ACTIVE\\n        });\\n\\n        items.push(msg.sender);\\n        validators[msg.sender] = item;\\n\\n        emit RequestedToJoinValidator(msg.sender);\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\uac15\\uc81c\\ud0c8\\ud1f4\\ub97c \\uc2e0\\uccad\\ud569\\ub2c8\\ub2e4.\\n    function requestExit(address validator) public {\\n        ValidatorData memory item = validators[msg.sender];\\n        require(item.validator == msg.sender, \\\"Not validator\\\");\\n        require(item.status == Status.ACTIVE && item.start <= block.timestamp, \\\"Invalid validator\\\");\\n\\n        require(validators[validator].status != Status.INVALID, \\\"Not validator\\\");\\n        validators[validator].status = Status.EXIT;\\n\\n        if (validators[validator].balance > 0) {\\n            token.transfer(validator, validators[validator].balance);\\n            validators[validator].balance = 0;\\n        }\\n\\n        emit RequestedToExitValidator(msg.sender, validator);\\n    }\\n\\n    function makeActiveItems() public {\\n        ValidatorData memory item = validators[msg.sender];\\n        require(item.validator == msg.sender, \\\"Not validator\\\");\\n        require(item.status == Status.ACTIVE && item.start <= block.timestamp, \\\"Invalid validator\\\");\\n\\n        _makeActiveItems();\\n    }\\n\\n    /// @notice \\ub4f1\\ub85d\\ub41c \\uac80\\uc99d\\uc790\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4.\\n    /// @param _idx \\ubc30\\uc5f4\\uc758 \\uc21c\\ubc88\\n    function itemOf(uint256 _idx) public view returns (address) {\\n        return items[_idx];\\n    }\\n\\n    /// @notice \\ub4f1\\ub85d\\ub41c \\uac80\\uc99d\\uc790\\uc758 \\uc218\\ub97c \\ub9ac\\ud134\\ud569\\ub2c8\\ub2e4.\\n    function itemsLength() public view returns (uint256) {\\n        return items.length;\\n    }\\n\\n    /// @notice \\uc720\\ud6a8\\ud55c \\uac80\\uc99d\\uc790\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4.\\n    /// @param _idx \\ubc30\\uc5f4\\uc758 \\uc21c\\ubc88\\n    function activeItemOf(uint256 _idx) public view returns (address) {\\n        return activeItems[_idx];\\n    }\\n\\n    /// @notice \\uc720\\ud6a8\\ud55c \\uac80\\uc99d\\uc790\\uc758 \\uc218\\ub97c \\ub9ac\\ud134\\ud569\\ub2c8\\ub2e4.\\n    function activeItemsLength() public view returns (uint256) {\\n        return activeItems.length;\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\ub370\\uc774\\ud0c0\\ub97c \\ub9ac\\ud134\\ud569\\ub2c8\\ub2e4.\\n    /// @param _account \\uc9c0\\uac11\\uc8fc\\uc18c\\n    function validatorOf(address _account) public view returns (ValidatorData memory) {\\n        return validators[_account];\\n    }\\n\\n    function _makeActiveItems() internal {\\n        while (activeItems.length > 0) activeItems.pop();\\n        for (uint256 i = 0; i < items.length; ++i) {\\n            ValidatorData memory item = validators[items[i]];\\n\\n            if (item.status == Status.ACTIVE && item.start <= block.timestamp) {\\n                activeItems.push(items[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice \\uc790\\ubc1c\\uc801\\uc73c\\ub85c \\ud0c8\\ud1f4\\ud558\\uae30 \\uc704\\ud574 \\uc0ac\\uc6a9\\ub418\\ub294 \\ud568\\uc218\\uc785\\ub2c8\\ub2e4.\\n    function exit() public {\\n        ValidatorData memory item = validators[msg.sender];\\n        require(item.validator == msg.sender, \\\"Not validator\\\");\\n        require(item.status == Status.ACTIVE && item.start <= block.timestamp, \\\"Invalid validator\\\");\\n\\n        makeActiveItems();\\n        require(activeItems.length > 1, \\\"Last validator\\\");\\n\\n        validators[msg.sender].status = Status.EXIT;\\n\\n        if (validators[msg.sender].balance > 0) {\\n            token.transfer(msg.sender, validators[msg.sender].balance);\\n            validators[msg.sender].balance = 0;\\n        }\\n\\n        emit ExitedFromValidator(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xa79020a5d87cfd8d3379f610b3d6b166da8115bf069042de8183a8e2c094853b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516106d03803806106d083398101604081905261002f9161005e565b600180546001600160a01b039092166001600160a01b031992831681179091556002805490921617905561008c565b60006020828403121561006f578081fd5b81516001600160a01b0381168114610085578182fd5b9392505050565b6106358061009b6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633fe4676e14610051578063693ec85e1461006f5780637516a79e1461008f5780638a42ebe914610097575b600080fd5b6100596100ac565b60405161006691906104a6565b60405180910390f35b61008261007d3660046103f4565b6100c8565b6040516100669190610539565b6100826100ef565b6100aa6100a536600461042f565b6100f7565b005b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600080826040516100d9919061048a565b9081526020016040518091039020549050919050565b633b9aca0081565b336000805b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377172f0e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561016457600080fd5b505afa158015610178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019c9190610472565b811015610295576002546040517f7a5e8be900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690637a5e8be9906101f9908490600401610539565b60206040518083038186803b15801561021157600080fd5b505afa158015610225573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024991906103b9565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102855760019150610295565b61028e81610572565b90506100fc565b50806102d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cd90610502565b60405180910390fd5b826000856040516102e7919061048a565b9081526020016040518091039020819055507f14735e2c0cd7e16a25f316cdd058b58299fc5f725b090e11835ca139a2803405848460405161032a9291906104c7565b60405180910390a150505050565b600082601f830112610348578081fd5b813567ffffffffffffffff80821115610363576103636105d0565b6040516020601f19601f8501168201018181108382111715610387576103876105d0565b60405282815284830160200186101561039e578384fd5b82602086016020830137918201602001929092529392505050565b6000602082840312156103ca578081fd5b815173ffffffffffffffffffffffffffffffffffffffff811681146103ed578182fd5b9392505050565b600060208284031215610405578081fd5b813567ffffffffffffffff81111561041b578182fd5b61042784828501610338565b949350505050565b60008060408385031215610441578081fd5b823567ffffffffffffffff811115610457578182fd5b61046385828601610338565b95602094909401359450505050565b600060208284031215610483578081fd5b5051919050565b6000825161049c818460208701610542565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60006040825283518060408401526104e6816060850160208801610542565b602083019390935250601f91909101601f191601606001919050565b6020808252600d908201527f4e6f742076616c696461746f7200000000000000000000000000000000000000604082015260600190565b90815260200190565b60005b8381101561055d578181015183820152602001610545565b8381111561056c576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156105c9577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220b39a7bba54f82921a56f43dc811e4e9f0b34ddf10ce9c764301bd0192074c04664736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80633fe4676e14610051578063693ec85e1461006f5780637516a79e1461008f5780638a42ebe914610097575b600080fd5b6100596100ac565b60405161006691906104a6565b60405180910390f35b61008261007d3660046103f4565b6100c8565b6040516100669190610539565b6100826100ef565b6100aa6100a536600461042f565b6100f7565b005b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600080826040516100d9919061048a565b9081526020016040518091039020549050919050565b633b9aca0081565b336000805b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377172f0e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561016457600080fd5b505afa158015610178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019c9190610472565b811015610295576002546040517f7a5e8be900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690637a5e8be9906101f9908490600401610539565b60206040518083038186803b15801561021157600080fd5b505afa158015610225573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024991906103b9565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102855760019150610295565b61028e81610572565b90506100fc565b50806102d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cd90610502565b60405180910390fd5b826000856040516102e7919061048a565b9081526020016040518091039020819055507f14735e2c0cd7e16a25f316cdd058b58299fc5f725b090e11835ca139a2803405848460405161032a9291906104c7565b60405180910390a150505050565b600082601f830112610348578081fd5b813567ffffffffffffffff80821115610363576103636105d0565b6040516020601f19601f8501168201018181108382111715610387576103876105d0565b60405282815284830160200186101561039e578384fd5b82602086016020830137918201602001929092529392505050565b6000602082840312156103ca578081fd5b815173ffffffffffffffffffffffffffffffffffffffff811681146103ed578182fd5b9392505050565b600060208284031215610405578081fd5b813567ffffffffffffffff81111561041b578182fd5b61042784828501610338565b949350505050565b60008060408385031215610441578081fd5b823567ffffffffffffffff811115610457578182fd5b61046385828601610338565b95602094909401359450505050565b600060208284031215610483578081fd5b5051919050565b6000825161049c818460208701610542565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60006040825283518060408401526104e6816060850160208801610542565b602083019390935250601f91909101601f191601606001919050565b6020808252600d908201527f4e6f742076616c696461746f7200000000000000000000000000000000000000604082015260600190565b90815260200190565b60005b8381101561055d578181015183820152602001610545565b8381111561056c576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156105c9577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220b39a7bba54f82921a56f43dc811e4e9f0b34ddf10ce9c764301bd0192074c04664736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_validatorAddress": "검증자컬랙션의 주소"
        }
      },
      "get(string)": {
        "params": {
          "_currency": "통화명"
        }
      },
      "set(string,uint256)": {
        "params": {
          "_currency": "통화명",
          "_price": "토큰의 가격"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "SetPrice(string,uint256)": {
        "notice": "가격이 저장될 때 발생되는 이벤트"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "생성자"
      },
      "get(string)": {
        "notice": "통화에 대한 가격을 제공한다."
      },
      "set(string,uint256)": {
        "notice": "통화에 대한 가격을 저장한다."
      }
    },
    "notice": "토큰 가격을 제공하는 스마트컨트랙트",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4152,
        "contract": "contracts/TokenPrice.sol:TokenPrice",
        "label": "prices",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 4154,
        "contract": "contracts/TokenPrice.sol:TokenPrice",
        "label": "validatorAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4157,
        "contract": "contracts/TokenPrice.sol:TokenPrice",
        "label": "validatorCollection",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ValidatorCollection)4933"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ValidatorCollection)4933": {
        "encoding": "inplace",
        "label": "contract ValidatorCollection",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}