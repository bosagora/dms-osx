{
  "address": "0x52bB9258733086243Ad1a4A818945F94BCAd05B9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_foundationAccount",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_validatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkCollectionAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenPriceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_franchiseeCollectionAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountMileage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceMileage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceToken",
          "type": "uint256"
        }
      ],
      "name": "ExchangedMileageToToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountMileage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceMileage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceToken",
          "type": "uint256"
        }
      ],
      "name": "ExchangedTokenToMileage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paidAmountMileage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceMileage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "purchaseId",
          "type": "string"
        }
      ],
      "name": "PaidMileage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paidAmountToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "purchaseId",
          "type": "string"
        }
      ],
      "name": "PaidToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "providedAmountMileage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceMileage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "purchaseId",
          "type": "string"
        }
      ],
      "name": "ProvidedMileage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "providedAmountMileage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceMileage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "franchiseeId",
          "type": "string"
        }
      ],
      "name": "ProvidedMileageToFranchisee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "providedAmountToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "purchaseId",
          "type": "string"
        }
      ],
      "name": "ProvidedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "purchaseId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "franchiseeId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "method",
          "type": "uint32"
        }
      ],
      "name": "SavedPurchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NULL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_email",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountMileage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "exchangeMileageToToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_email",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountToken",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "exchangeTokenToMileage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foundationAccount",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "franchiseeCollectionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkCollectionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "mileageBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "nonceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_purchaseId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_email",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_franchiseeId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "payMileage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_purchaseId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_email",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_franchiseeId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "payToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "purchaseIdOf",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_purchaseId",
          "type": "string"
        }
      ],
      "name": "purchaseOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "purchaseId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "email",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "franchiseeId",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "method",
              "type": "uint32"
            }
          ],
          "internalType": "struct Ledger.PurchaseData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchasesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_purchaseId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_email",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_franchiseeId",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "_method",
          "type": "uint32"
        }
      ],
      "name": "savePurchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "tokenBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPriceAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d1f2560be2640243ebaf9a85b140ac6c7e772b0302c6fbca12b60d894037a44",
  "receipt": {
    "to": null,
    "from": "0xDc245797409fb79446523Fa1A4ca97294eef22EE",
    "contractAddress": "0x52bB9258733086243Ad1a4A818945F94BCAd05B9",
    "transactionIndex": 0,
    "gasUsed": "2993115",
    "logsBloom": "0x
    "blockHash": "0x668d6fea297b76e96f9e076ca8b4cc634a5b6d8b91bf2ae5fda29cdae91a847c",
    "transactionHash": "0x7d1f2560be2640243ebaf9a85b140ac6c7e772b0302c6fbca12b60d894037a44",
    "logs": [],
    "blockNumber": 647,
    "cumulativeGasUsed": "2993115",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1553fe63710743b6a67e5400471ba1a18218e7e06a4e3004a41e0e8bf9a15768",
    "0xFDa3d1ff3C570c2f76c2157Ef7A8640A75794eD9",
    "0x43Bc973075748Afc704D9b59B156f9b9E24b73fb",
    "0xf1CEFe1b28ee6768597f177eca6616aD44C96418",
    "0x2473770AdCAB3253504f8d9B46dA22417037a2ce",
    "0x3705f330B593b28B3663a3C4BC2c7C5565988d18"
  ],
  "numDeployments": 1,
  "solcInputHash": "17a244f7d3819738172e6a1afc2690aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_foundationAccount\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkCollectionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenPriceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_franchiseeCollectionAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMileage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceMileage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceToken\",\"type\":\"uint256\"}],\"name\":\"ExchangedMileageToToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMileage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceMileage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceToken\",\"type\":\"uint256\"}],\"name\":\"ExchangedTokenToMileage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidAmountMileage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceMileage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"purchaseId\",\"type\":\"string\"}],\"name\":\"PaidMileage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidAmountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"purchaseId\",\"type\":\"string\"}],\"name\":\"PaidToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"providedAmountMileage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceMileage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"purchaseId\",\"type\":\"string\"}],\"name\":\"ProvidedMileage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"providedAmountMileage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceMileage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"franchiseeId\",\"type\":\"string\"}],\"name\":\"ProvidedMileageToFranchisee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"providedAmountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"purchaseId\",\"type\":\"string\"}],\"name\":\"ProvidedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"purchaseId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"franchiseeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"method\",\"type\":\"uint32\"}],\"name\":\"SavedPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NULL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_email\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountMileage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"exchangeMileageToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_email\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"exchangeTokenToMileage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationAccount\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"franchiseeCollectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkCollectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"mileageBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"nonceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_purchaseId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_email\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_franchiseeId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"payMileage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_purchaseId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_email\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_franchiseeId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"payToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"purchaseIdOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_purchaseId\",\"type\":\"string\"}],\"name\":\"purchaseOf\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"purchaseId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"franchiseeId\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"method\",\"type\":\"uint32\"}],\"internalType\":\"struct Ledger.PurchaseData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchasesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_purchaseId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_email\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_franchiseeId\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"_method\",\"type\":\"uint32\"}],\"name\":\"savePurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_foundationAccount\":\"\\uc7ac\\ub2e8\\uc758 \\uacc4\\uc815\",\"_franchiseeCollectionAddress\":\"\\uac00\\ub9f9\\uc810 \\uceec\\ub799\\uc158 \\ucee8\\ud2b8\\ub799\\ud2b8\\uc758 \\uc8fc\\uc18c\",\"_linkCollectionAddress\":\"\\uc774\\uba54\\uc77c-\\uc9c0\\uac11\\uc8fc\\uc18c \\ub9c1\\ud06c \\ucee8\\ud2b8\\ub799\\ud2b8\\uc758 \\uc8fc\\uc18c\",\"_tokenAddress\":\"\\ud1a0\\ud070 \\ucee8\\ud2b8\\ub799\\ud2b8\\uc758 \\uc8fc\\uc18c\",\"_tokenPriceAddress\":\"\\ud1a0\\ud070\\uac00\\uaca9\\uc744 \\uc81c\\uacf5\\ud558\\ub294 \\ucee8\\ud2b8\\ub799\\ud2b8\\uc758 \\uc8fc\\uc18c\",\"_validatorAddress\":\"\\uac80\\uc99d\\uc790 \\uceec\\ub799\\uc158 \\ucee8\\ud2b8\\ub799\\ud2b8\\uc758 \\uc8fc\\uc18c\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"\\uae08\\uc561\"}},\"exchangeMileageToToken(bytes32,uint256,address,bytes)\":{\"details\":\"\\uc911\\uacc4\\uc11c\\ubc84\\ub97c \\ud1b5\\ud574\\uc11c \\ud638\\ucd9c\\ub429\\ub2c8\\ub2e4.\",\"params\":{\"_amountMileage\":\"\\uad50\\ud658\\ud560 \\ub9c8\\uc77c\\ub9ac\\uc9c0\\uc758 \\ub7c9\",\"_email\":\"\\uc0ac\\uc6a9\\uc790\\uc758 \\uc774\\uba54\\uc77c \\ud574\\uc2dc\",\"_signature\":\"\\uc11c\\uba85\",\"_signer\":\"\\uc0ac\\uc6a9\\uc790\\uc758 \\uc8fc\\uc18c\"}},\"exchangeTokenToMileage(bytes32,uint256,address,bytes)\":{\"details\":\"\\uc911\\uacc4\\uc11c\\ubc84\\ub97c \\ud1b5\\ud574\\uc11c \\ud638\\ucd9c\\ub429\\ub2c8\\ub2e4.\",\"params\":{\"_amountToken\":\"\\uad50\\ud658\\ud560 \\ud1a0\\ud070\\uc758 \\ub7c9\",\"_email\":\"\\uc0ac\\uc6a9\\uc790\\uc758 \\uc774\\uba54\\uc77c \\ud574\\uc2dc\",\"_signature\":\"\\uc11c\\uba85\",\"_signer\":\"\\uc0ac\\uc6a9\\uc790\\uc758 \\uc8fc\\uc18c\"}},\"mileageBalanceOf(bytes32)\":{\"params\":{\"_hash\":\"\\uc774\\uba54\\uc77c\\uc758 \\ud574\\uc2dc\"}},\"nonceOf(address)\":{\"params\":{\"_account\":\"\\uc9c0\\uac11\\uc8fc\\uc18c\"}},\"payMileage(string,uint256,bytes32,string,address,bytes)\":{\"details\":\"\\uc911\\uacc4\\uc11c\\ubc84\\ub97c \\ud1b5\\ud574\\uc11c \\ud638\\ucd9c\\ub429\\ub2c8\\ub2e4.\",\"params\":{\"_amount\":\"\\uad6c\\ub9e4 \\uae08\\uc561\",\"_email\":\"\\uad6c\\ub9e4\\ud55c \\uc0ac\\uc6a9\\uc790\\uc758 \\uc774\\uba54\\uc77c \\ud574\\uc2dc\",\"_franchiseeId\":\"\\uad6c\\ub9e4\\ud55c \\uac00\\ub9f9\\uc810 \\uc544\\uc774\\ub514\",\"_purchaseId\":\"\\uad6c\\ub9e4 \\uc544\\uc774\\ub514\",\"_signature\":\"\\uc11c\\uba85\",\"_signer\":\"\\uad6c\\ub9e4\\uc790\\uc758 \\uc8fc\\uc18c\"}},\"payToken(string,uint256,bytes32,string,address,bytes)\":{\"details\":\"\\uc911\\uacc4\\uc11c\\ubc84\\ub97c \\ud1b5\\ud574\\uc11c \\ud638\\ucd9c\\ub429\\ub2c8\\ub2e4.\",\"params\":{\"_amount\":\"\\uad6c\\ub9e4 \\uae08\\uc561\",\"_email\":\"\\uad6c\\ub9e4\\ud55c \\uc0ac\\uc6a9\\uc790\\uc758 \\uc774\\uba54\\uc77c \\ud574\\uc2dc\",\"_franchiseeId\":\"\\uad6c\\ub9e4\\ud55c \\uac00\\ub9f9\\uc810 \\uc544\\uc774\\ub514\",\"_purchaseId\":\"\\uad6c\\ub9e4 \\uc544\\uc774\\ub514\",\"_signature\":\"\\uc11c\\uba85\",\"_signer\":\"\\uad6c\\ub9e4\\uc790\\uc758 \\uc8fc\\uc18c\"}},\"purchaseIdOf(uint256)\":{\"params\":{\"_idx\":\"\\ubc30\\uc5f4\\uc758 \\uc21c\\ubc88\"}},\"purchaseOf(string)\":{\"params\":{\"_purchaseId\":\"\\uad6c\\ub9e4 \\uc544\\uc774\\ub514\"}},\"savePurchase(string,uint256,uint256,bytes32,string,uint32)\":{\"details\":\"\\uc774\\uac83\\uc740 \\uac80\\uc99d\\uc790\\ub4e4\\uc5d0 \\uc758\\ud574 \\ud638\\ucd9c\\ub418\\uc5b4\\uc57c \\ud569\\ub2c8\\ub2e4.\",\"params\":{\"_amount\":\"\\uad6c\\ub9e4 \\uae08\\uc561\",\"_email\":\"\\uad6c\\ub9e4\\ud55c \\uc0ac\\uc6a9\\uc790\\uc758 \\uc774\\uba54\\uc77c \\ud574\\uc2dc\",\"_franchiseeId\":\"\\uad6c\\ub9e4\\ud55c \\uac00\\ub9f9\\uc810 \\uc544\\uc774\\ub514\",\"_purchaseId\":\"\\uad6c\\ub9e4 \\uc544\\uc774\\ub514\",\"_timestamp\":\"\\uad6c\\ub9e4 \\uc2dc\\uac04\"}},\"tokenBalanceOf(bytes32)\":{\"params\":{\"_hash\":\"\\uc774\\uba54\\uc77c\\uc758 \\ud574\\uc2dc\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"\\uae08\\uc561\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Deposited(bytes32,uint256,uint256,uint256,address)\":{\"notice\":\"\\ud1a0\\ud070\\uc744 \\uc608\\uce58\\ud588\\uc744 \\ub54c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc774\\ubca4\\ud2b8\"},\"ExchangedMileageToToken(bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"\\ub9c8\\uc77c\\ub9ac\\uc9c0\\ub97c \\ud1a0\\ud070\\uc73c\\ub85c \\uad50\\ud658\\ud588\\uc744 \\ub54c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc774\\ubca4\\ud2b8\"},\"ExchangedTokenToMileage(bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"\\ud1a0\\ud070\\uc744 \\ub9c8\\uc77c\\ub9ac\\uc9c0\\ub85c \\uad50\\ud658\\ud588\\uc744 \\ub54c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc774\\ubca4\\ud2b8\"},\"PaidMileage(bytes32,uint256,uint256,uint256,string)\":{\"notice\":\"\\ub9c8\\uc77c\\ub9ac\\uc9c0\\ub85c \\uc9c0\\ubd88\\uc744 \\uc644\\ub8cc\\ud588\\uc744 \\ub54c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc774\\ubca4\\ud2b8\"},\"PaidToken(bytes32,uint256,uint256,uint256,string)\":{\"notice\":\"\\ud1a0\\ud070\\uc73c\\ub85c \\uc9c0\\ubd88\\uc744 \\uc644\\ub8cc\\ud588\\uc744 \\ub54c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc774\\ubca4\\ud2b8\"},\"ProvidedMileage(bytes32,uint256,uint256,uint256,string)\":{\"notice\":\"\\ub9c8\\uc77c\\ub9ac\\uc9c0\\uac00 \\uc9c0\\uae09\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\"},\"ProvidedMileageToFranchisee(bytes32,uint256,uint256,uint256,string)\":{\"notice\":\"\\ub9c8\\uc77c\\ub9ac\\uc9c0\\uac00 \\uc815\\uc0b0\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\"},\"ProvidedToken(bytes32,uint256,uint256,uint256,string)\":{\"notice\":\"\\ud1a0\\ud070\\uc774 \\uc9c0\\uae09\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\"},\"SavedPurchase(string,uint256,uint256,bytes32,string,uint32)\":{\"notice\":\"\\uac80\\uc99d\\uc790\\uac00 \\ucd94\\uac00\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\"},\"Withdrawn(bytes32,uint256,uint256,uint256,address)\":{\"notice\":\"\\ud1a0\\ud070\\uc744 \\uc778\\ucd9c\\ud588\\uc744 \\ub54c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc774\\ubca4\\ud2b8\"}},\"kind\":\"user\",\"methods\":{\"NULL()\":{\"notice\":\"Hash value of a blank string\"},\"constructor\":{\"notice\":\"\\uc0dd\\uc131\\uc790\"},\"deposit(uint256)\":{\"notice\":\"\\ud1a0\\ud070\\uc744 \\uc608\\uce58\\ud569\\ub2c8\\ub2e4.\"},\"exchangeMileageToToken(bytes32,uint256,address,bytes)\":{\"notice\":\"\\ub9c8\\uc77c\\ub9ac\\uc9c0\\ub97c \\ud1a0\\ud070\\uc73c\\ub85c \\uad50\\ud658\\ud569\\ub2c8\\ub2e4\"},\"exchangeTokenToMileage(bytes32,uint256,address,bytes)\":{\"notice\":\"\\ud1a0\\ud070\\uc744 \\ub9c8\\uc77c\\ub9ac\\uc9c0\\ub85c \\uad50\\ud658\\ud569\\ub2c8\\ub2e4\"},\"mileageBalanceOf(bytes32)\":{\"notice\":\"\\ub9c8\\uc77c\\ub9ac\\uc9c0\\uc758 \\uc794\\uace0\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\"},\"nonceOf(address)\":{\"notice\":\"nonce\\ub97c  \\ub9ac\\ud134\\ud55c\\ub2e4\"},\"payMileage(string,uint256,bytes32,string,address,bytes)\":{\"notice\":\"\\ub9c8\\uc77c\\ub9ac\\uc9c0\\ub97c \\uad6c\\ub9e4\\uc5d0 \\uc0ac\\uc6a9\\ud558\\ub294 \\ud568\\uc218\"},\"payToken(string,uint256,bytes32,string,address,bytes)\":{\"notice\":\"\\ud1a0\\ud070\\uc744 \\uad6c\\ub9e4\\uc5d0 \\uc0ac\\uc6a9\\ud558\\ub294 \\ud568\\uc218\"},\"purchaseIdOf(uint256)\":{\"notice\":\"\\uad6c\\ub9e4 \\ub370\\uc774\\ud130\\uc758 \\uc544\\uc774\\ub514\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\"},\"purchaseOf(string)\":{\"notice\":\"\\uad6c\\ub9e4 \\ub370\\uc774\\ud130\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\"},\"purchasesLength()\":{\"notice\":\"\\uad6c\\ub9e4 \\ub370\\uc774\\ud130\\uc758 \\uac2f\\uc218\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\"},\"savePurchase(string,uint256,uint256,bytes32,string,uint32)\":{\"notice\":\"\\uad6c\\ub9e4\\ub0b4\\uc5ed\\uc744 \\uc800\\uc7a5\\ud569\\ub2c8\\ub2e4.\"},\"tokenBalanceOf(bytes32)\":{\"notice\":\"\\ud1a0\\ud070\\uc758 \\uc794\\uace0\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\"},\"withdraw(uint256)\":{\"notice\":\"\\ud1a0\\ud070\\uc744 \\uc778\\ucd9c\\ud569\\ub2c8\\ub2e4.\"}},\"notice\":\"\\ub9c8\\uc77c\\ub9ac\\uc9c0\\uc640 \\ud1a0\\ud070\\uc758 \\uc6d0\\uc7a5\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ledger.sol\":\"Ledger\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/FranchiseeCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ValidatorCollection.sol\\\";\\n\\n/// @notice \\uac00\\ub9f9\\uc810\\uceec\\ub799\\uc158\\ncontract FranchiseeCollection {\\n    /// @notice Hash value of a blank string\\n    bytes32 public constant NULL = 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855;\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\uc0c1\\ud0dc\\ucf54\\ub4dc\\n    enum FranchiseeStatus {\\n        INVALID,\\n        ACTIVE\\n    }\\n\\n    /// @notice \\uac00\\ub9f9\\uc810\\uc758 \\ub370\\uc774\\ud130\\n    struct FranchiseeData {\\n        string franchiseeId; // \\uac00\\ub9f9\\uc810 \\uc544\\uc774\\ub514\\n        uint256 provideWaitTime; // \\uc81c\\ud488\\uad6c\\ub9e4 \\ud6c4 \\ub9c8\\uc77c\\ub9ac\\uc9c0 \\uc9c0\\uae09\\uc2dc\\uac04\\n        bytes32 email; // \\uac00\\ub9f9\\uc810\\uc8fc \\uc774\\uba54\\uc77c \\ud574\\uc2dc\\n        uint256 providedMileage; // \\uc81c\\uacf5\\ub41c \\ub9c8\\uc77c\\ub9ac\\uc9c0 \\ucd1d\\ub7c9\\n        uint256 usedMileage; // \\uc0ac\\uc6a9\\ub41c \\ub9c8\\uc77c\\ub9ac\\uc9c0 \\ucd1d\\ub7c9\\n        uint256 clearedMileage; // \\uc815\\uc0b0\\ub41c \\ub9c8\\uc77c\\ub9ac\\uc9c0 \\ucd1d\\ub7c9\\n        FranchiseeStatus status;\\n    }\\n\\n    mapping(string => FranchiseeData) private franchisees;\\n\\n    string[] private items;\\n\\n    address public validatorAddress;\\n    ValidatorCollection private validatorCollection;\\n\\n    /// @notice \\uac00\\ub9f9\\uc810\\uc774 \\ucd94\\uac00\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event AddedFranchisee(string franchiseeId, uint256 provideWaitTime, bytes32 email);\\n    /// @notice \\uac00\\ub9f9\\uc810\\uc758 \\ub9c8\\uc77c\\ub9ac\\uc9c0\\uac00 \\uc99d\\uac00\\ud560 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event IncreasedProvidedMileage(string franchiseeId, uint256 increase, uint256 total, string purchaseId);\\n    /// @notice \\uc0ac\\uc6a9\\uc790\\uc758 \\ub9c8\\uc77c\\ub9ac\\uc9c0\\uac00 \\uc99d\\uac00\\ud560 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event IncreasedUsedMileage(string franchiseeId, uint256 increase, uint256 total, string purchaseId);\\n    /// @notice \\uc815\\uc0b0\\ub41c \\ub9c8\\uc77c\\ub9ac\\uac00 \\uc99d\\uac00\\ud560 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event IncreasedClearedMileage(string franchiseeId, uint256 increase, uint256 total, string purchaseId);\\n\\n    address public ledgerAddress;\\n    address public deployer;\\n\\n    /// @notice \\uc0dd\\uc131\\uc790\\n    /// @param _validatorAddress \\uac80\\uc99d\\uc790\\uceec\\ub799\\uc158\\uc758 \\uc8fc\\uc18c\\n    constructor(address _validatorAddress) {\\n        validatorAddress = _validatorAddress;\\n\\n        validatorCollection = ValidatorCollection(_validatorAddress);\\n        ledgerAddress = address(0x00);\\n        deployer = msg.sender;\\n    }\\n\\n    /// @notice \\uc6d0\\uc7a5 \\ucee8\\ud2b8\\ub799\\ud2b8\\uc758 \\uc8fc\\uc18c\\ub97c \\ud638\\ucd9c\\ud55c\\ub2e4.\\n    function setLedgerAddress(address _ledgerAddress) public {\\n        require(msg.sender == deployer, \\\"No permissions\\\");\\n        ledgerAddress = _ledgerAddress;\\n        deployer = address(0x00);\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\ub4e4\\ub9cc \\ud638\\ucd9c\\ud560 \\uc218 \\uc788\\ub3c4\\ub85d \\ud574\\uc900\\ub2e4.\\n    modifier onlyValidator(address _account) {\\n        bool isValidator = false;\\n        for (uint256 i = 0; i < validatorCollection.activeItemsLength(); ++i) {\\n            if (_account == validatorCollection.activeItemOf(i)) {\\n                isValidator = true;\\n                break;\\n            }\\n        }\\n        require(isValidator, \\\"Not validator\\\");\\n        _;\\n    }\\n\\n    /// @notice \\uc6d0\\uc7a5 \\ucee8\\ud2b8\\ub799\\ud2b8\\uc5d0\\uc11c\\ub9cc \\ud638\\ucd9c\\ub420 \\uc218 \\uc788\\ub3c4\\ub85d \\ud574\\uc900\\ub2e4.\\n    modifier onlyLedger() {\\n        require(msg.sender == ledgerAddress, \\\"Not ledger\\\");\\n        _;\\n    }\\n\\n    /// @notice \\uac00\\ub9f9\\uc810\\uc744 \\ucd94\\uac00\\ud55c\\ub2e4\\n    /// @param _franchiseeId \\uac00\\ub9f9\\uc810 \\uc544\\uc774\\ub514\\n    /// @param _payoutWaitTime \\uc81c\\ud488\\uad6c\\ub9e4 \\ud6c4 \\ub9c8\\uc77c\\ub9ac\\uc9c0\\uac00 \\uc9c0\\uae09\\ub420 \\uc2dc\\uac04\\n    /// @param _email \\uac00\\ub9f9\\uc810\\uc8fc \\uc774\\uba54\\uc77c \\ud574\\uc2dc\\n    function add(\\n        string memory _franchiseeId,\\n        uint256 _payoutWaitTime,\\n        bytes32 _email\\n    ) public onlyValidator(msg.sender) {\\n        _add(_franchiseeId, _payoutWaitTime, _email);\\n    }\\n\\n    function _add(string memory _franchiseeId, uint256 _payoutWaitTime, bytes32 _email) internal {\\n        FranchiseeData memory data = FranchiseeData({\\n            franchiseeId: _franchiseeId,\\n            provideWaitTime: _payoutWaitTime,\\n            email: _email,\\n            providedMileage: 0,\\n            usedMileage: 0,\\n            clearedMileage: 0,\\n            status: FranchiseeStatus.ACTIVE\\n        });\\n        items.push(_franchiseeId);\\n        franchisees[_franchiseeId] = data;\\n\\n        emit AddedFranchisee(_franchiseeId, _payoutWaitTime, _email);\\n    }\\n\\n    /// @notice \\uc9c0\\uae09\\ub41c \\ucd1d \\ub9c8\\uc77c\\uc9c0\\ub9ac\\ub97c \\ub204\\uc801\\ud55c\\ub2e4\\n    function addProvidedMileage(\\n        string memory _franchiseeId,\\n        uint256 _amount,\\n        string memory _purchaseId\\n    ) public onlyLedger {\\n        if (franchisees[_franchiseeId].status == FranchiseeStatus.INVALID) {\\n            _add(_franchiseeId, 0, NULL);\\n        }\\n\\n        franchisees[_franchiseeId].providedMileage += _amount;\\n        emit IncreasedProvidedMileage(_franchiseeId, _amount, franchisees[_franchiseeId].providedMileage, _purchaseId);\\n    }\\n\\n    /// @notice \\uc0ac\\uc6a9\\ub41c \\ucd1d \\ub9c8\\uc77c\\uc9c0\\ub9ac\\ub97c \\ub204\\uc801\\ud55c\\ub2e4\\n    function addUsedMileage(string memory _franchiseeId, uint256 _amount, string memory _purchaseId) public onlyLedger {\\n        if (franchisees[_franchiseeId].status == FranchiseeStatus.INVALID) {\\n            _add(_franchiseeId, 0, NULL);\\n        }\\n        franchisees[_franchiseeId].usedMileage += _amount;\\n        emit IncreasedUsedMileage(_franchiseeId, _amount, franchisees[_franchiseeId].usedMileage, _purchaseId);\\n    }\\n\\n    /// @notice \\uc815\\uc0b0\\ub41c \\ucd1d \\ub9c8\\uc77c\\uc9c0\\ub9ac\\ub97c \\ub204\\uc801\\ud55c\\ub2e4\\n    function addClearedMileage(\\n        string memory _franchiseeId,\\n        uint256 _amount,\\n        string memory _purchaseId\\n    ) public onlyLedger {\\n        if (franchisees[_franchiseeId].status == FranchiseeStatus.INVALID) {\\n            _add(_franchiseeId, 0, NULL);\\n        }\\n        franchisees[_franchiseeId].clearedMileage += _amount;\\n        emit IncreasedClearedMileage(_franchiseeId, _amount, franchisees[_franchiseeId].clearedMileage, _purchaseId);\\n    }\\n\\n    /// @notice \\uc815\\uc0b0\\ub418\\uc5b4\\uc57c \\ud560 \\ub9c8\\uc77c\\uc9c0\\ub9ac\\uc758 \\ub7c9\\uc744 \\ub9ac\\ud134\\ud569\\ub2c8\\ub2e4.\\n    function getClearMileage(string memory _franchiseeId) public view returns (uint256) {\\n        if (franchisees[_franchiseeId].status == FranchiseeStatus.ACTIVE) {\\n            FranchiseeData memory data = franchisees[_franchiseeId];\\n            if (data.providedMileage + data.clearedMileage < data.usedMileage) {\\n                return (data.usedMileage - data.providedMileage - data.clearedMileage);\\n            } else {\\n                return 0;\\n            }\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice \\uac00\\ub9f9\\uc810 \\ub370\\uc774\\ud130\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\\n    /// @param _franchiseeId \\uac00\\ub9f9\\uc810\\uc758 \\uc544\\uc774\\ub514\\n    function franchiseeOf(string memory _franchiseeId) public view returns (FranchiseeData memory) {\\n        return franchisees[_franchiseeId];\\n    }\\n\\n    /// @notice \\uac00\\ub9f9\\uc810\\uc758 \\uc544\\uc774\\ub514\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\\n    /// @param _idx \\ubc30\\uc5f4\\uc758 \\uc21c\\ubc88\\n    function franchiseeIdOf(uint256 _idx) public view returns (string memory) {\\n        return items[_idx];\\n    }\\n\\n    /// @notice \\uac00\\ub9f9\\uc810\\uc758 \\uac2f\\uc218\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\\n    function franchiseesLength() public view returns (uint256) {\\n        return items.length;\\n    }\\n}\\n\",\"keccak256\":\"0x7eac3af1e8fe4cfc2f83cec253d6123b52c37d8a5070f574b48a2b31e8ceb55e\",\"license\":\"MIT\"},\"contracts/Ledger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"del-osx-artifacts/contracts/LinkCollection.sol\\\";\\nimport \\\"./ValidatorCollection.sol\\\";\\nimport \\\"./TokenPrice.sol\\\";\\nimport \\\"./FranchiseeCollection.sol\\\";\\n\\n/// @notice \\ub9c8\\uc77c\\ub9ac\\uc9c0\\uc640 \\ud1a0\\ud070\\uc758 \\uc6d0\\uc7a5\\ncontract Ledger {\\n    /// @notice Hash value of a blank string\\n    bytes32 public constant NULL = 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855;\\n    mapping(bytes32 => uint256) private mileageLedger;\\n    mapping(bytes32 => uint256) private tokenLedger;\\n    mapping(address => uint256) private nonce;\\n\\n    struct PurchaseData {\\n        string purchaseId;\\n        uint256 timestamp;\\n        uint256 amount;\\n        bytes32 email;\\n        string franchiseeId;\\n        uint32 method;\\n    }\\n\\n    mapping(string => PurchaseData) private purchases;\\n    string[] private purchaseIds;\\n\\n    bytes32 public foundationAccount;\\n    address public tokenAddress;\\n    address public validatorAddress;\\n    address public linkCollectionAddress;\\n    address public tokenPriceAddress;\\n    address public franchiseeCollectionAddress;\\n\\n    IERC20 private token;\\n    ValidatorCollection private validatorCollection;\\n    LinkCollection private linkCollection;\\n    TokenPrice private tokenPrice;\\n    FranchiseeCollection private franchiseeCollection;\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\uac00 \\ucd94\\uac00\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event SavedPurchase(\\n        string purchaseId,\\n        uint256 timestamp,\\n        uint256 amount,\\n        bytes32 email,\\n        string franchiseeId,\\n        uint32 method\\n    );\\n    /// @notice \\ub9c8\\uc77c\\ub9ac\\uc9c0\\uac00 \\uc9c0\\uae09\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event ProvidedMileage(\\n        bytes32 email,\\n        uint256 providedAmountMileage,\\n        uint256 value,\\n        uint256 balanceMileage,\\n        string purchaseId\\n    );\\n    /// @notice \\ub9c8\\uc77c\\ub9ac\\uc9c0\\uac00 \\uc815\\uc0b0\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event ProvidedMileageToFranchisee(\\n        bytes32 email,\\n        uint256 providedAmountMileage,\\n        uint256 value,\\n        uint256 balanceMileage,\\n        string franchiseeId\\n    );\\n    /// @notice \\ud1a0\\ud070\\uc774 \\uc9c0\\uae09\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event ProvidedToken(\\n        bytes32 email,\\n        uint256 providedAmountToken,\\n        uint256 value,\\n        uint256 balanceToken,\\n        string purchaseId\\n    );\\n    /// @notice \\ub9c8\\uc77c\\ub9ac\\uc9c0\\ub85c \\uc9c0\\ubd88\\uc744 \\uc644\\ub8cc\\ud588\\uc744 \\ub54c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc774\\ubca4\\ud2b8\\n    event PaidMileage(\\n        bytes32 email,\\n        uint256 paidAmountMileage,\\n        uint256 value,\\n        uint256 balanceMileage,\\n        string purchaseId\\n    );\\n    /// @notice \\ud1a0\\ud070\\uc73c\\ub85c \\uc9c0\\ubd88\\uc744 \\uc644\\ub8cc\\ud588\\uc744 \\ub54c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc774\\ubca4\\ud2b8\\n    event PaidToken(bytes32 email, uint256 paidAmountToken, uint256 value, uint256 balanceToken, string purchaseId);\\n    /// @notice \\ud1a0\\ud070\\uc744 \\uc608\\uce58\\ud588\\uc744 \\ub54c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc774\\ubca4\\ud2b8\\n    event Deposited(bytes32 email, uint256 depositAmount, uint256 value, uint256 balanceToken, address account);\\n    /// @notice \\ud1a0\\ud070\\uc744 \\uc778\\ucd9c\\ud588\\uc744 \\ub54c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc774\\ubca4\\ud2b8\\n    event Withdrawn(bytes32 email, uint256 withdrawAmount, uint256 value, uint256 balanceToken, address account);\\n    /// @notice \\ub9c8\\uc77c\\ub9ac\\uc9c0\\ub97c \\ud1a0\\ud070\\uc73c\\ub85c \\uad50\\ud658\\ud588\\uc744 \\ub54c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc774\\ubca4\\ud2b8\\n    event ExchangedMileageToToken(\\n        bytes32 email,\\n        uint256 amountMileage,\\n        uint256 amountToken,\\n        uint256 balanceMileage,\\n        uint256 balanceToken\\n    );\\n    /// @notice \\ud1a0\\ud070\\uc744 \\ub9c8\\uc77c\\ub9ac\\uc9c0\\ub85c \\uad50\\ud658\\ud588\\uc744 \\ub54c \\ubc1c\\uc0dd\\ud558\\ub294 \\uc774\\ubca4\\ud2b8\\n    event ExchangedTokenToMileage(\\n        bytes32 email,\\n        uint256 amountMileage,\\n        uint256 amountToken,\\n        uint256 balanceMileage,\\n        uint256 balanceToken\\n    );\\n\\n    /// @notice \\uc0dd\\uc131\\uc790\\n    /// @param _foundationAccount \\uc7ac\\ub2e8\\uc758 \\uacc4\\uc815\\n    /// @param _tokenAddress \\ud1a0\\ud070 \\ucee8\\ud2b8\\ub799\\ud2b8\\uc758 \\uc8fc\\uc18c\\n    /// @param _validatorAddress \\uac80\\uc99d\\uc790 \\uceec\\ub799\\uc158 \\ucee8\\ud2b8\\ub799\\ud2b8\\uc758 \\uc8fc\\uc18c\\n    /// @param _linkCollectionAddress \\uc774\\uba54\\uc77c-\\uc9c0\\uac11\\uc8fc\\uc18c \\ub9c1\\ud06c \\ucee8\\ud2b8\\ub799\\ud2b8\\uc758 \\uc8fc\\uc18c\\n    /// @param _tokenPriceAddress \\ud1a0\\ud070\\uac00\\uaca9\\uc744 \\uc81c\\uacf5\\ud558\\ub294 \\ucee8\\ud2b8\\ub799\\ud2b8\\uc758 \\uc8fc\\uc18c\\n    /// @param _franchiseeCollectionAddress \\uac00\\ub9f9\\uc810 \\uceec\\ub799\\uc158 \\ucee8\\ud2b8\\ub799\\ud2b8\\uc758 \\uc8fc\\uc18c\\n    constructor(\\n        bytes32 _foundationAccount,\\n        address _tokenAddress,\\n        address _validatorAddress,\\n        address _linkCollectionAddress,\\n        address _tokenPriceAddress,\\n        address _franchiseeCollectionAddress\\n    ) {\\n        foundationAccount = _foundationAccount;\\n        tokenAddress = _tokenAddress;\\n        validatorAddress = _validatorAddress;\\n        linkCollectionAddress = _linkCollectionAddress;\\n        tokenPriceAddress = _tokenPriceAddress;\\n        franchiseeCollectionAddress = _franchiseeCollectionAddress;\\n\\n        token = IERC20(_tokenAddress);\\n        validatorCollection = ValidatorCollection(_validatorAddress);\\n        linkCollection = LinkCollection(_linkCollectionAddress);\\n        tokenPrice = TokenPrice(_tokenPriceAddress);\\n        franchiseeCollection = FranchiseeCollection(_franchiseeCollectionAddress);\\n    }\\n\\n    modifier onlyValidator(address _account) {\\n        bool isValidator = false;\\n        for (uint256 i = 0; i < validatorCollection.activeItemsLength(); ++i) {\\n            if (_account == validatorCollection.activeItemOf(i)) {\\n                isValidator = true;\\n                break;\\n            }\\n        }\\n        require(isValidator, \\\"Not validator\\\");\\n        _;\\n    }\\n\\n    /// @notice \\uad6c\\ub9e4\\ub0b4\\uc5ed\\uc744 \\uc800\\uc7a5\\ud569\\ub2c8\\ub2e4.\\n    /// @dev \\uc774\\uac83\\uc740 \\uac80\\uc99d\\uc790\\ub4e4\\uc5d0 \\uc758\\ud574 \\ud638\\ucd9c\\ub418\\uc5b4\\uc57c \\ud569\\ub2c8\\ub2e4.\\n    /// @param _purchaseId \\uad6c\\ub9e4 \\uc544\\uc774\\ub514\\n    /// @param _timestamp \\uad6c\\ub9e4 \\uc2dc\\uac04\\n    /// @param _amount \\uad6c\\ub9e4 \\uae08\\uc561\\n    /// @param _email \\uad6c\\ub9e4\\ud55c \\uc0ac\\uc6a9\\uc790\\uc758 \\uc774\\uba54\\uc77c \\ud574\\uc2dc\\n    /// @param _franchiseeId \\uad6c\\ub9e4\\ud55c \\uac00\\ub9f9\\uc810 \\uc544\\uc774\\ub514\\n    function savePurchase(\\n        string memory _purchaseId,\\n        uint256 _timestamp,\\n        uint256 _amount,\\n        bytes32 _email,\\n        string memory _franchiseeId,\\n        uint32 _method\\n    ) public onlyValidator(msg.sender) {\\n        PurchaseData memory data = PurchaseData({\\n            purchaseId: _purchaseId,\\n            timestamp: _timestamp,\\n            amount: _amount,\\n            email: _email,\\n            franchiseeId: _franchiseeId,\\n            method: _method\\n        });\\n        purchaseIds.push(_purchaseId);\\n        purchases[_purchaseId] = data;\\n\\n        if ((_method == 0) && (_email != NULL)) {\\n            uint256 mileage = _amount / 100;\\n            address account = linkCollection.toAddress(_email);\\n            if (account == address(0x00)) {\\n                provideMileage(_email, mileage, _purchaseId);\\n            } else {\\n                provideToken(_email, mileage, _purchaseId);\\n            }\\n            franchiseeCollection.addProvidedMileage(_franchiseeId, mileage, _purchaseId);\\n        }\\n        emit SavedPurchase(_purchaseId, _timestamp, _amount, _email, _franchiseeId, _method);\\n    }\\n\\n    /// @notice \\ub9c8\\uc77c\\ub9ac\\uc9c0\\ub97c \\uc9c0\\uae09\\ud569\\ub2c8\\ub2e4.\\n    /// @dev \\uad6c\\ub9e4 \\ub370\\uc774\\ud130\\ub97c \\ud655\\uc778\\ud55c \\ud6c4 \\ud638\\ucd9c\\ub429\\ub2c8\\ub2e4.\\n    /// @param _email \\uc774\\uba54\\uc77c \\ud574\\uc2dc\\n    /// @param _amount \\uc9c0\\uae09\\ud560 \\ub9c8\\uc77c\\ub9ac\\uc9c0\\n    function provideMileage(bytes32 _email, uint256 _amount, string memory _purchaseId) internal {\\n        mileageLedger[_email] += _amount;\\n        emit ProvidedMileage(_email, _amount, _amount, mileageLedger[_email], _purchaseId);\\n    }\\n\\n    /// @notice \\ud1a0\\ud070\\uc744 \\uc9c0\\uae09\\ud569\\ub2c8\\ub2e4.\\n    /// @dev \\uad6c\\ub9e4 \\ub370\\uc774\\ud130\\ub97c \\ud655\\uc778\\ud55c \\ud6c4 \\ud638\\ucd9c\\ub429\\ub2c8\\ub2e4.\\n    /// @param _email \\uc774\\uba54\\uc77c \\ud574\\uc2dc\\n    /// @param _amount \\uc9c0\\uae09\\ud560 \\ud1a0\\ud070\\n    function provideToken(bytes32 _email, uint256 _amount, string memory _purchaseId) internal {\\n        uint256 amountToken = convertMileageToToken(_amount);\\n\\n        require(tokenLedger[foundationAccount] >= amountToken, \\\"Insufficient foundation balance\\\");\\n        tokenLedger[_email] += amountToken;\\n        tokenLedger[foundationAccount] -= amountToken;\\n\\n        emit ProvidedToken(_email, amountToken, _amount, tokenLedger[_email], _purchaseId);\\n    }\\n\\n    /// @notice \\ub9c8\\uc77c\\ub9ac\\uc9c0\\ub97c \\uad6c\\ub9e4\\uc5d0 \\uc0ac\\uc6a9\\ud558\\ub294 \\ud568\\uc218\\n    /// @dev \\uc911\\uacc4\\uc11c\\ubc84\\ub97c \\ud1b5\\ud574\\uc11c \\ud638\\ucd9c\\ub429\\ub2c8\\ub2e4.\\n    /// @param _purchaseId \\uad6c\\ub9e4 \\uc544\\uc774\\ub514\\n    /// @param _amount \\uad6c\\ub9e4 \\uae08\\uc561\\n    /// @param _email \\uad6c\\ub9e4\\ud55c \\uc0ac\\uc6a9\\uc790\\uc758 \\uc774\\uba54\\uc77c \\ud574\\uc2dc\\n    /// @param _franchiseeId \\uad6c\\ub9e4\\ud55c \\uac00\\ub9f9\\uc810 \\uc544\\uc774\\ub514\\n    /// @param _signer \\uad6c\\ub9e4\\uc790\\uc758 \\uc8fc\\uc18c\\n    /// @param _signature \\uc11c\\uba85\\n    function payMileage(\\n        string memory _purchaseId,\\n        uint256 _amount,\\n        bytes32 _email,\\n        string memory _franchiseeId,\\n        address _signer,\\n        bytes calldata _signature\\n    ) public {\\n        bytes32 dataHash = keccak256(abi.encode(_purchaseId, _amount, _email, _franchiseeId, _signer, nonce[_signer]));\\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _signer, \\\"Invalid signature\\\");\\n        address userAddress = linkCollection.toAddress(_email);\\n        require(userAddress != address(0x00), \\\"Unregistered email-address\\\");\\n        require(userAddress == _signer, \\\"Invalid address\\\");\\n        require(mileageLedger[_email] >= _amount, \\\"Insufficient balance\\\");\\n\\n        mileageLedger[_email] -= _amount;\\n        franchiseeCollection.addUsedMileage(_franchiseeId, _amount, _purchaseId);\\n\\n        uint256 clearAmount = franchiseeCollection.getClearMileage(_franchiseeId);\\n        if (clearAmount > 0) {\\n            franchiseeCollection.addClearedMileage(_franchiseeId, clearAmount, _purchaseId);\\n            FranchiseeCollection.FranchiseeData memory franchisee = franchiseeCollection.franchiseeOf(_franchiseeId);\\n            if (franchisee.email != NULL) {\\n                mileageLedger[franchisee.email] += clearAmount;\\n                emit ProvidedMileageToFranchisee(\\n                    franchisee.email,\\n                    clearAmount,\\n                    clearAmount,\\n                    mileageLedger[franchisee.email],\\n                    _franchiseeId\\n                );\\n            }\\n        }\\n\\n        nonce[_signer]++;\\n\\n        emit PaidMileage(_email, _amount, _amount, mileageLedger[_email], _purchaseId);\\n    }\\n\\n    /// @notice \\ud1a0\\ud070\\uc744 \\uad6c\\ub9e4\\uc5d0 \\uc0ac\\uc6a9\\ud558\\ub294 \\ud568\\uc218\\n    /// @dev \\uc911\\uacc4\\uc11c\\ubc84\\ub97c \\ud1b5\\ud574\\uc11c \\ud638\\ucd9c\\ub429\\ub2c8\\ub2e4.\\n    /// @param _purchaseId \\uad6c\\ub9e4 \\uc544\\uc774\\ub514\\n    /// @param _amount \\uad6c\\ub9e4 \\uae08\\uc561\\n    /// @param _email \\uad6c\\ub9e4\\ud55c \\uc0ac\\uc6a9\\uc790\\uc758 \\uc774\\uba54\\uc77c \\ud574\\uc2dc\\n    /// @param _franchiseeId \\uad6c\\ub9e4\\ud55c \\uac00\\ub9f9\\uc810 \\uc544\\uc774\\ub514\\n    /// @param _signer \\uad6c\\ub9e4\\uc790\\uc758 \\uc8fc\\uc18c\\n    /// @param _signature \\uc11c\\uba85\\n    function payToken(\\n        string memory _purchaseId,\\n        uint256 _amount,\\n        bytes32 _email,\\n        string memory _franchiseeId,\\n        address _signer,\\n        bytes calldata _signature\\n    ) public {\\n        bytes32 dataHash = keccak256(abi.encode(_purchaseId, _amount, _email, _franchiseeId, _signer, nonce[_signer]));\\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _signer, \\\"Invalid signature\\\");\\n        address userAddress = linkCollection.toAddress(_email);\\n        require(userAddress != address(0x00), \\\"Unregistered email-address\\\");\\n        require(userAddress == _signer, \\\"Invalid address\\\");\\n\\n        uint256 amountToken = convertMileageToToken(_amount);\\n        require(tokenLedger[_email] >= amountToken, \\\"Insufficient balance\\\");\\n\\n        tokenLedger[_email] -= amountToken;\\n        tokenLedger[foundationAccount] += amountToken;\\n        franchiseeCollection.addUsedMileage(_franchiseeId, _amount, _purchaseId);\\n\\n        uint256 clearAmount = franchiseeCollection.getClearMileage(_franchiseeId);\\n        if (clearAmount > 0) {\\n            franchiseeCollection.addClearedMileage(_franchiseeId, clearAmount, _purchaseId);\\n            FranchiseeCollection.FranchiseeData memory franchisee = franchiseeCollection.franchiseeOf(_franchiseeId);\\n            if (franchisee.email != NULL) {\\n                mileageLedger[franchisee.email] += clearAmount;\\n                emit ProvidedMileageToFranchisee(\\n                    franchisee.email,\\n                    clearAmount,\\n                    clearAmount,\\n                    mileageLedger[franchisee.email],\\n                    _franchiseeId\\n                );\\n            }\\n        }\\n\\n        nonce[_signer]++;\\n\\n        emit PaidToken(_email, amountToken, _amount, tokenLedger[_email], _purchaseId);\\n    }\\n\\n    function convertMileageToToken(uint256 amount) internal view returns (uint256) {\\n        uint256 price = tokenPrice.get(\\\"KRW\\\");\\n        return (amount * tokenPrice.MULTIPLE()) / price;\\n    }\\n\\n    function convertTokenToMileage(uint256 amount) internal view returns (uint256) {\\n        uint256 price = tokenPrice.get(\\\"KRW\\\");\\n        return (amount * price) / tokenPrice.MULTIPLE();\\n    }\\n\\n    /// @notice \\ud1a0\\ud070\\uc744 \\uc608\\uce58\\ud569\\ub2c8\\ub2e4.\\n    /// @param _amount \\uae08\\uc561\\n    function deposit(uint256 _amount) public {\\n        bytes32 email = linkCollection.toEmail(msg.sender);\\n        require(email != bytes32(0x00), \\\"Unregistered email-address\\\");\\n\\n        require(_amount <= token.allowance(msg.sender, address(this)), \\\"Not allowed deposit\\\");\\n        token.transferFrom(msg.sender, address(this), _amount);\\n\\n        tokenLedger[email] += _amount;\\n\\n        uint256 amountMileage = convertTokenToMileage(_amount);\\n        emit Deposited(email, _amount, amountMileage, tokenLedger[email], msg.sender);\\n    }\\n\\n    /// @notice \\ud1a0\\ud070\\uc744 \\uc778\\ucd9c\\ud569\\ub2c8\\ub2e4.\\n    /// @param _amount \\uae08\\uc561\\n    function withdraw(uint256 _amount) public {\\n        bytes32 email = linkCollection.toEmail(msg.sender);\\n        require(email != bytes32(0x00), \\\"Unregistered email-address\\\");\\n\\n        require(_amount <= tokenLedger[email], \\\"Insufficient balance\\\");\\n        token.transfer(msg.sender, _amount);\\n\\n        tokenLedger[email] -= _amount;\\n\\n        uint256 amountMileage = convertTokenToMileage(_amount);\\n        emit Withdrawn(email, _amount, amountMileage, tokenLedger[email], msg.sender);\\n    }\\n\\n    /// @notice \\ub9c8\\uc77c\\ub9ac\\uc9c0\\ub97c \\ud1a0\\ud070\\uc73c\\ub85c \\uad50\\ud658\\ud569\\ub2c8\\ub2e4\\n    /// @dev \\uc911\\uacc4\\uc11c\\ubc84\\ub97c \\ud1b5\\ud574\\uc11c \\ud638\\ucd9c\\ub429\\ub2c8\\ub2e4.\\n    /// @param _email \\uc0ac\\uc6a9\\uc790\\uc758 \\uc774\\uba54\\uc77c \\ud574\\uc2dc\\n    /// @param _amountMileage \\uad50\\ud658\\ud560 \\ub9c8\\uc77c\\ub9ac\\uc9c0\\uc758 \\ub7c9\\n    /// @param _signer \\uc0ac\\uc6a9\\uc790\\uc758 \\uc8fc\\uc18c\\n    /// @param _signature \\uc11c\\uba85\\n    function exchangeMileageToToken(\\n        bytes32 _email,\\n        uint256 _amountMileage,\\n        address _signer,\\n        bytes calldata _signature\\n    ) public {\\n        bytes32 dataHash = keccak256(abi.encode(_email, _amountMileage, _signer, nonce[_signer]));\\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _signer, \\\"Invalid signature\\\");\\n        address userAddress = linkCollection.toAddress(_email);\\n        require(userAddress != address(0x00), \\\"Unregistered email-address\\\");\\n        require(userAddress == _signer, \\\"Invalid address\\\");\\n\\n        require(mileageLedger[_email] >= _amountMileage, \\\"Insufficient balance\\\");\\n\\n        uint256 amountToken = convertMileageToToken(_amountMileage);\\n        require(tokenLedger[foundationAccount] >= amountToken, \\\"Insufficient foundation balance\\\");\\n\\n        mileageLedger[_email] -= _amountMileage;\\n\\n        tokenLedger[_email] += amountToken;\\n        tokenLedger[foundationAccount] -= amountToken;\\n\\n        nonce[_signer]++;\\n\\n        emit ExchangedMileageToToken(_email, _amountMileage, amountToken, mileageLedger[_email], tokenLedger[_email]);\\n    }\\n\\n    /// @notice \\ud1a0\\ud070\\uc744 \\ub9c8\\uc77c\\ub9ac\\uc9c0\\ub85c \\uad50\\ud658\\ud569\\ub2c8\\ub2e4\\n    /// @dev \\uc911\\uacc4\\uc11c\\ubc84\\ub97c \\ud1b5\\ud574\\uc11c \\ud638\\ucd9c\\ub429\\ub2c8\\ub2e4.\\n    /// @param _email \\uc0ac\\uc6a9\\uc790\\uc758 \\uc774\\uba54\\uc77c \\ud574\\uc2dc\\n    /// @param _amountToken \\uad50\\ud658\\ud560 \\ud1a0\\ud070\\uc758 \\ub7c9\\n    /// @param _signer \\uc0ac\\uc6a9\\uc790\\uc758 \\uc8fc\\uc18c\\n    /// @param _signature \\uc11c\\uba85\\n    function exchangeTokenToMileage(\\n        bytes32 _email,\\n        uint256 _amountToken,\\n        address _signer,\\n        bytes calldata _signature\\n    ) public {\\n        bytes32 dataHash = keccak256(abi.encode(_email, _amountToken, _signer, nonce[_signer]));\\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _signer, \\\"Invalid signature\\\");\\n        address userAddress = linkCollection.toAddress(_email);\\n        require(userAddress != address(0x00), \\\"Unregistered email-address\\\");\\n        require(userAddress == _signer, \\\"Invalid address\\\");\\n\\n        require(tokenLedger[_email] >= _amountToken, \\\"Insufficient balance\\\");\\n\\n        tokenLedger[_email] -= _amountToken;\\n        tokenLedger[foundationAccount] += _amountToken;\\n\\n        uint256 amountMileage = convertTokenToMileage(_amountToken);\\n        mileageLedger[_email] += amountMileage;\\n\\n        nonce[_signer]++;\\n\\n        emit ExchangedTokenToMileage(_email, amountMileage, _amountToken, mileageLedger[_email], tokenLedger[_email]);\\n    }\\n\\n    /// @notice \\ub9c8\\uc77c\\ub9ac\\uc9c0\\uc758 \\uc794\\uace0\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\\n    /// @param _hash \\uc774\\uba54\\uc77c\\uc758 \\ud574\\uc2dc\\n    function mileageBalanceOf(bytes32 _hash) public view returns (uint256) {\\n        return mileageLedger[_hash];\\n    }\\n\\n    /// @notice \\ud1a0\\ud070\\uc758 \\uc794\\uace0\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\\n    /// @param _hash \\uc774\\uba54\\uc77c\\uc758 \\ud574\\uc2dc\\n    function tokenBalanceOf(bytes32 _hash) public view returns (uint256) {\\n        return tokenLedger[_hash];\\n    }\\n\\n    /// @notice nonce\\ub97c  \\ub9ac\\ud134\\ud55c\\ub2e4\\n    /// @param _account \\uc9c0\\uac11\\uc8fc\\uc18c\\n    function nonceOf(address _account) public view returns (uint256) {\\n        return nonce[_account];\\n    }\\n\\n    /// @notice \\uad6c\\ub9e4 \\ub370\\uc774\\ud130\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\\n    /// @param _purchaseId \\uad6c\\ub9e4 \\uc544\\uc774\\ub514\\n    function purchaseOf(string memory _purchaseId) public view returns (PurchaseData memory) {\\n        return purchases[_purchaseId];\\n    }\\n\\n    /// @notice \\uad6c\\ub9e4 \\ub370\\uc774\\ud130\\uc758 \\uc544\\uc774\\ub514\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\\n    /// @param _idx \\ubc30\\uc5f4\\uc758 \\uc21c\\ubc88\\n    function purchaseIdOf(uint256 _idx) public view returns (string memory) {\\n        return purchaseIds[_idx];\\n    }\\n\\n    /// @notice \\uad6c\\ub9e4 \\ub370\\uc774\\ud130\\uc758 \\uac2f\\uc218\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\\n    function purchasesLength() public view returns (uint256) {\\n        return purchaseIds.length;\\n    }\\n}\\n\",\"keccak256\":\"0x279f06a313f26801863728fa1b12d1e126c900ae72db1e835756a6124580a191\",\"license\":\"MIT\"},\"contracts/TokenPrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ValidatorCollection.sol\\\";\\n\\n/// @notice \\ud1a0\\ud070 \\uac00\\uaca9\\uc744 \\uc81c\\uacf5\\ud558\\ub294 \\uc2a4\\ub9c8\\ud2b8\\ucee8\\ud2b8\\ub799\\ud2b8\\ncontract TokenPrice {\\n    uint256 public constant MULTIPLE = 1000000000;\\n    mapping(string => uint256) private prices;\\n\\n    address public validatorAddress;\\n    ValidatorCollection private validatorCollection;\\n\\n    /// @notice \\uac00\\uaca9\\uc774 \\uc800\\uc7a5\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event SetPrice(string currency, uint256 price);\\n\\n    /// @notice \\uc0dd\\uc131\\uc790\\n    /// @param _validatorAddress \\uac80\\uc99d\\uc790\\uceec\\ub799\\uc158\\uc758 \\uc8fc\\uc18c\\n    constructor(address _validatorAddress) {\\n        validatorAddress = _validatorAddress;\\n\\n        validatorCollection = ValidatorCollection(_validatorAddress);\\n    }\\n\\n    modifier onlyValidator(address _account) {\\n        bool isValidator = false;\\n        for (uint256 i = 0; i < validatorCollection.activeItemsLength(); ++i) {\\n            if (_account == validatorCollection.activeItemOf(i)) {\\n                isValidator = true;\\n                break;\\n            }\\n        }\\n        require(isValidator, \\\"Not validator\\\");\\n        _;\\n    }\\n\\n    /// @notice \\ud1b5\\ud654\\uc5d0 \\ub300\\ud55c \\uac00\\uaca9\\uc744 \\uc800\\uc7a5\\ud55c\\ub2e4.\\n    /// @param _currency \\ud1b5\\ud654\\uba85\\n    /// @param _price \\ud1a0\\ud070\\uc758 \\uac00\\uaca9\\n    function set(string memory _currency, uint256 _price) public onlyValidator(msg.sender) {\\n        prices[_currency] = _price;\\n\\n        emit SetPrice(_currency, _price);\\n    }\\n\\n    /// @notice \\ud1b5\\ud654\\uc5d0 \\ub300\\ud55c \\uac00\\uaca9\\uc744 \\uc81c\\uacf5\\ud55c\\ub2e4.\\n    /// @param _currency \\ud1b5\\ud654\\uba85\\n    function get(string memory _currency) public view returns (uint256) {\\n        return prices[_currency];\\n    }\\n}\\n\",\"keccak256\":\"0xee387812d2a65361f381408adc09fd550f25c2ec515bdb49a3c6791a2c9dfb33\",\"license\":\"MIT\"},\"contracts/ValidatorCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice \\uac80\\uc99d\\uc790\\ub4e4\\uc744 \\uc800\\uc7a5\\ud558\\ub294 \\ucee8\\ud2b8\\ub799\\ud2b8\\ncontract ValidatorCollection {\\n    uint256 public constant MINIMUM_DEPOSIT_AMOUNT = 50000000000000000000000;\\n\\n    address public tokenAddress;\\n\\n    IERC20 private token;\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\uc0c1\\ud0dc\\ucf54\\ub4dc\\n    enum Status {\\n        INVALID, //  \\ucd08\\uae30\\uac12\\n        ACTIVE, //  \\uac80\\uc99d\\uc790\\uc758 \\uae30\\ub2a5\\uc774 \\ud65c\\uc131\\ud654\\ub428\\n        STOP, //  \\uc608\\uce58\\uae08 \\ubd80\\uc871\\uc73c\\ub85c \\uc815\\uc9c0\\ub41c \\uc0c1\\ud0dc\\n        EXIT //  \\ud0c8\\ud1f4\\ud55c \\uc0c1\\ud0dc\\n    }\\n\\n    struct ValidatorData {\\n        address validator; // \\uac80\\uc99d\\uc790\\uc758 \\uc9c0\\uac11\\uc8fc\\uc18c\\n        uint256 start; // \\uac80\\uc99d\\uc790\\ub85c\\uc11c \\uc5ed\\ud560\\uc744 \\uc218\\ud589\\ud560 \\uc218 \\uc788\\ub294 \\uc2dc\\uc791 \\uc2dc\\uac04\\n        uint256 balance; // \\uac80\\uc99d\\uc790\\uc758 \\uc608\\uce58\\uae08\\n        Status status; // \\uac80\\uc99d\\uc790\\uc758 \\uc0c1\\ud0dc\\n    }\\n\\n    address[] private items;\\n\\n    address[] private activeItems;\\n\\n    mapping(address => ValidatorData) private validators;\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\uac00 \\ucd94\\uac00\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event AddedValidator(address validator, uint256 start, uint256 balance, Status status);\\n    /// @notice \\uc790\\uae08\\uc774 \\uc785\\uae09\\ub420 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event DepositedForValidator(address validator, uint256 amount, uint256 balance);\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\ub4f1\\ub85d\\uc774 \\uc694\\uccad \\ub418\\uc5c8\\uc744 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event RequestedToJoinValidator(address requester);\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\uac15\\uc81c \\ud0c8\\ud1f4\\uac00 \\uc694\\uccad \\ub418\\uc5c8\\uc744 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event RequestedToExitValidator(address requester, address validator);\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\uc790\\ubc1c\\uc801 \\ud0c8\\ud1f4\\uac00 \\uc644\\ub8cc\\ub418\\uc5c8\\uc744 \\ub54c \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event ExitedFromValidator(address validator);\\n\\n    /// @notice \\uc0dd\\uc131\\uc790\\n    /// @param _validators \\ucd08\\uae30\\uc5d0 \\uc124\\uc815\\ub420 \\uac80\\uc99d\\uc790, \\uc608\\uce58\\uae08\\uc774 \\uc608\\uce58\\ub41c \\ud6c4 \\uadf8 \\uc989\\uc2dc \\ud65c\\uc131\\ud654 \\ub41c\\ub2e4.\\n    constructor(address _tokenAddress, address[] memory _validators) {\\n        tokenAddress = _tokenAddress;\\n        token = IERC20(_tokenAddress);\\n\\n        for (uint256 i = 0; i < _validators.length; ++i) {\\n            ValidatorData memory item = ValidatorData({\\n                validator: _validators[i],\\n                start: block.timestamp,\\n                balance: 0,\\n                status: Status.STOP\\n            });\\n            items.push(_validators[i]);\\n            validators[_validators[i]] = item;\\n\\n            emit AddedValidator(item.validator, item.start, item.balance, item.status);\\n        }\\n    }\\n\\n    /// @notice \\uc608\\uce58\\uae08\\uc744 \\ucd94\\uac00\\ub85c \\uc785\\uae09\\ud569\\ub2c8\\ub2e4.\\n    /// @param _amount \\ucd94\\uac00\\ub85c \\uc785\\uae08\\ud560 \\uc608\\uce58 \\uae08\\uc561\\n    function deposit(uint256 _amount) public {\\n        ValidatorData memory item = validators[msg.sender];\\n        require(item.validator == msg.sender, \\\"Not validator\\\");\\n        require(item.status != Status.INVALID, \\\"Not validator\\\");\\n        require(item.status != Status.EXIT, \\\"Already exited\\\");\\n\\n        require(_amount <= token.allowance(msg.sender, address(this)), \\\"Not allowed deposit\\\");\\n        token.transferFrom(msg.sender, address(this), _amount);\\n\\n        validators[msg.sender].balance += _amount;\\n\\n        if (validators[msg.sender].balance >= MINIMUM_DEPOSIT_AMOUNT) validators[msg.sender].status = Status.ACTIVE;\\n\\n        emit DepositedForValidator(msg.sender, _amount, validators[msg.sender].balance);\\n    }\\n\\n    /// @notice \\uc2e0\\uaddc \\uac80\\uc99d\\uc790 \\ub4f1\\ub85d\\uc744 \\uc2e0\\uccad\\ud569\\ub2c8\\ub2e4.\\n    function requestRegistration() public {\\n        require(validators[msg.sender].status == Status.INVALID, \\\"Already validator\\\");\\n\\n        require(MINIMUM_DEPOSIT_AMOUNT <= token.allowance(msg.sender, address(this)), \\\"Not allowed deposit\\\");\\n        token.transferFrom(msg.sender, address(this), MINIMUM_DEPOSIT_AMOUNT);\\n\\n        ValidatorData memory item = ValidatorData({\\n            validator: msg.sender,\\n            start: block.timestamp + 86500 * 7,\\n            balance: MINIMUM_DEPOSIT_AMOUNT,\\n            status: Status.ACTIVE\\n        });\\n\\n        items.push(msg.sender);\\n        validators[msg.sender] = item;\\n\\n        emit RequestedToJoinValidator(msg.sender);\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\uac15\\uc81c\\ud0c8\\ud1f4\\ub97c \\uc2e0\\uccad\\ud569\\ub2c8\\ub2e4.\\n    function requestExit(address validator) public {\\n        ValidatorData memory item = validators[msg.sender];\\n        require(item.validator == msg.sender, \\\"Not validator\\\");\\n        require(item.status == Status.ACTIVE && item.start <= block.timestamp, \\\"Invalid validator\\\");\\n\\n        require(validators[validator].status != Status.INVALID, \\\"Not validator\\\");\\n        validators[validator].status = Status.EXIT;\\n\\n        if (validators[validator].balance > 0) {\\n            token.transfer(validator, validators[validator].balance);\\n            validators[validator].balance = 0;\\n        }\\n\\n        emit RequestedToExitValidator(msg.sender, validator);\\n    }\\n\\n    function makeActiveItems() public {\\n        ValidatorData memory item = validators[msg.sender];\\n        require(item.validator == msg.sender, \\\"Not validator\\\");\\n        require(item.status == Status.ACTIVE && item.start <= block.timestamp, \\\"Invalid validator\\\");\\n\\n        _makeActiveItems();\\n    }\\n\\n    /// @notice \\ub4f1\\ub85d\\ub41c \\uac80\\uc99d\\uc790\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4.\\n    /// @param _idx \\ubc30\\uc5f4\\uc758 \\uc21c\\ubc88\\n    function itemOf(uint256 _idx) public view returns (address) {\\n        return items[_idx];\\n    }\\n\\n    /// @notice \\ub4f1\\ub85d\\ub41c \\uac80\\uc99d\\uc790\\uc758 \\uc218\\ub97c \\ub9ac\\ud134\\ud569\\ub2c8\\ub2e4.\\n    function itemsLength() public view returns (uint256) {\\n        return items.length;\\n    }\\n\\n    /// @notice \\uc720\\ud6a8\\ud55c \\uac80\\uc99d\\uc790\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4.\\n    /// @param _idx \\ubc30\\uc5f4\\uc758 \\uc21c\\ubc88\\n    function activeItemOf(uint256 _idx) public view returns (address) {\\n        return activeItems[_idx];\\n    }\\n\\n    /// @notice \\uc720\\ud6a8\\ud55c \\uac80\\uc99d\\uc790\\uc758 \\uc218\\ub97c \\ub9ac\\ud134\\ud569\\ub2c8\\ub2e4.\\n    function activeItemsLength() public view returns (uint256) {\\n        return activeItems.length;\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\ub370\\uc774\\ud0c0\\ub97c \\ub9ac\\ud134\\ud569\\ub2c8\\ub2e4.\\n    /// @param _account \\uc9c0\\uac11\\uc8fc\\uc18c\\n    function validatorOf(address _account) public view returns (ValidatorData memory) {\\n        return validators[_account];\\n    }\\n\\n    function _makeActiveItems() internal {\\n        while (activeItems.length > 0) activeItems.pop();\\n        for (uint256 i = 0; i < items.length; ++i) {\\n            ValidatorData memory item = validators[items[i]];\\n\\n            if (item.status == Status.ACTIVE && item.start <= block.timestamp) {\\n                activeItems.push(items[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice \\uc790\\ubc1c\\uc801\\uc73c\\ub85c \\ud0c8\\ud1f4\\ud558\\uae30 \\uc704\\ud574 \\uc0ac\\uc6a9\\ub418\\ub294 \\ud568\\uc218\\uc785\\ub2c8\\ub2e4.\\n    function exit() public {\\n        ValidatorData memory item = validators[msg.sender];\\n        require(item.validator == msg.sender, \\\"Not validator\\\");\\n        require(item.status == Status.ACTIVE && item.start <= block.timestamp, \\\"Invalid validator\\\");\\n\\n        makeActiveItems();\\n        require(activeItems.length > 1, \\\"Last validator\\\");\\n\\n        validators[msg.sender].status = Status.EXIT;\\n\\n        if (validators[msg.sender].balance > 0) {\\n            token.transfer(msg.sender, validators[msg.sender].balance);\\n            validators[msg.sender].balance = 0;\\n        }\\n\\n        emit ExitedFromValidator(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xa79020a5d87cfd8d3379f610b3d6b166da8115bf069042de8183a8e2c094853b\",\"license\":\"MIT\"},\"del-osx-artifacts/contracts/LinkCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n// E000 : invalid signature\\n// E001 : invalid email hash\\n// E002 : invalid address\\n// E003 : not validator\\n// E004 : invalid ID\\n\\n/// Contract for converting e-mail to wallet\\ncontract LinkCollection {\\n    bytes32 public constant NULL = 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855;\\n\\n    mapping(bytes32 => address) private emailToAddress;\\n    mapping(address => bytes32) private addressToEmail;\\n    mapping(address => uint256) private nonce;\\n\\n    /// @notice \\uc694\\uccad \\uc544\\uc774\\ud15c\\uc758 \\uc0c1\\ud0dc\\ucf54\\ub4dc\\n    enum RequestStatus {\\n        INVALID,\\n        REQUESTED,\\n        ACCEPTED,\\n        REJECTED\\n    }\\n\\n    struct RequestItem {\\n        bytes32 id;\\n        bytes32 email;\\n        address wallet;\\n        bytes signature;\\n        uint32 agreement;\\n        uint32 opposition;\\n        uint32 abstaining;\\n        mapping(address => Ballot) ballots;\\n        RequestStatus status;\\n    }\\n    mapping(bytes32 => RequestItem) private requests;\\n    bytes32[] private requestIds;\\n\\n    enum Ballot {\\n        NONE,\\n        AGREEMENT,\\n        OPPOSITION,\\n        ABSTAINING\\n    }\\n\\n    uint256 private quorum;\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\uc0c1\\ud0dc\\ucf54\\ub4dc\\n    enum ValidatorStatus {\\n        INVALID, //  \\ucd08\\uae30\\uac12\\n        ACTIVE //  \\uac80\\uc99d\\uc790\\uc758 \\uae30\\ub2a5\\uc774 \\ud65c\\uc131\\ud654\\ub428\\n    }\\n\\n    struct ValidatorItem {\\n        address validator; // \\uac80\\uc99d\\uc790\\uc758 \\uc9c0\\uac11\\uc8fc\\uc18c\\n        uint256 index;\\n        string endpoint;\\n        ValidatorStatus status; // \\uac80\\uc99d\\uc790\\uc758 \\uc0c1\\ud0dc\\n    }\\n\\n    mapping(address => ValidatorItem) private validators;\\n    address[] private validatorAddresses;\\n\\n    /// @notice \\ub4f1\\ub85d\\uc694\\uccad\\uc778 \\uc644\\ub8cc\\ub41c \\ud6c4 \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event AddedRequestItem(bytes32 id, bytes32 email, address wallet);\\n    /// @notice \\ub4f1\\ub85d\\uc694\\uccad\\uc774 \\uc2b9\\uc778\\ub41c \\ud6c4 \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event AcceptedRequestItem(bytes32 id, bytes32 email, address wallet);\\n    /// @notice \\ub4f1\\ub85d\\uc694\\uccad\\uc774 \\uac70\\ubd80\\ub41c \\ud6c4 \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event RejectedRequestItem(bytes32 id, bytes32 email, address wallet);\\n    /// @notice \\ud56d\\ubaa9\\uc774 \\uc5c5\\ub370\\uc774\\ud2b8 \\ud6c4 \\ubc1c\\uc0dd\\ub418\\ub294 \\uc774\\ubca4\\ud2b8\\n    event UpdatedLinkItem(bytes32 email, address wallet1, address wallet2);\\n\\n    /// @notice \\uc0dd\\uc131\\uc790\\n    /// @param _validators \\uac80\\uc99d\\uc790\\ub4e4\\n    constructor(address[] memory _validators) {\\n        for (uint256 i = 0; i < _validators.length; ++i) {\\n            ValidatorItem memory item = ValidatorItem({\\n                validator: _validators[i],\\n                index: i,\\n                endpoint: \\\"\\\",\\n                status: ValidatorStatus.ACTIVE\\n            });\\n            validatorAddresses.push(_validators[i]);\\n            validators[_validators[i]] = item;\\n        }\\n\\n        quorum = uint256(2000) / uint256(3);\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\ub4e4\\ub9cc \\ud638\\ucd9c\\ud560 \\uc218 \\uc788\\ub3c4\\ub85d \\ud574\\uc900\\ub2e4.\\n    modifier onlyValidator() {\\n        require(validators[msg.sender].status == ValidatorStatus.ACTIVE, \\\"E003\\\");\\n        _;\\n    }\\n\\n    /// @notice \\uc774\\uba54\\uc77c-\\uc9c0\\uac11\\uc8fc\\uc18c \\ud56d\\ubaa9\\uc744 \\uc5c5\\ub370\\uc774\\ud2b8 \\ud55c\\ub2e4\\n    /// @param _email \\uc774\\uba54\\uc77c\\uc758 \\ud574\\uc2dc\\n    /// @param _wallet1 \\ud604\\uc7ac \\uc9c0\\uac11\\uc8fc\\uc18c\\n    /// @param _signature1 \\ud604\\uc7ac \\uc9c0\\uac11\\uc8fc\\uc18c\\uc758 \\uc11c\\uba85\\n    /// @param _wallet2 \\uc0c8\\ub85c\\uc6b4 \\uc9c0\\uac11\\uc8fc\\uc18c\\n    /// @param _signature2 \\uc0c8\\ub85c\\uc6b4 \\uc9c0\\uac11\\uc8fc\\uc18c\\uc758 \\uc11c\\uba85\\n    function update(\\n        bytes32 _email,\\n        address _wallet1,\\n        bytes calldata _signature1,\\n        address _wallet2,\\n        bytes calldata _signature2\\n    ) public {\\n        require(_email != NULL, \\\"E001\\\");\\n        bytes32 dataHash1 = keccak256(abi.encode(_email, _wallet1, nonce[_wallet1]));\\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash1), _signature1) == _wallet1, \\\"E000\\\");\\n\\n        bytes32 dataHash2 = keccak256(abi.encode(_email, _wallet2, nonce[_wallet2]));\\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash2), _signature2) == _wallet2, \\\"E000\\\");\\n\\n        require(emailToAddress[_email] == _wallet1, \\\"E001\\\");\\n        require(addressToEmail[_wallet1] == _email, \\\"E002\\\");\\n        require(addressToEmail[_wallet2] == bytes32(0x00), \\\"E002\\\");\\n        require(_wallet1 != _wallet2, \\\"E002\\\");\\n\\n        delete addressToEmail[_wallet1];\\n\\n        emailToAddress[_email] = _wallet2;\\n        addressToEmail[_wallet2] = _email;\\n\\n        nonce[_wallet1]++;\\n        nonce[_wallet2]++;\\n\\n        emit UpdatedLinkItem(_email, _wallet1, _wallet2);\\n    }\\n\\n    /// @notice \\uc774\\uc6a9\\ud560 \\uc218 \\uc788\\ub294 \\uc544\\uc774\\ub514 \\uc778\\uc9c0 \\uc54c\\ub824\\uc900\\ub2e4.\\n    /// @param _id \\uc694\\uccad \\uc544\\uc774\\ub514\\n    function isAvailable(bytes32 _id) public view returns (bool) {\\n        if (requests[_id].status == RequestStatus.INVALID) return true;\\n        else return false;\\n    }\\n\\n    /// @notice \\uc774\\uba54\\uc77c-\\uc9c0\\uac11\\uc8fc\\uc18c \\ud56d\\ubaa9\\uc758 \\ub4f1\\ub85d\\uc744 \\uc694\\uccad\\ud55c\\ub2e4\\n    /// @param _id \\uc694\\uccad \\uc544\\uc774\\ub514\\n    /// @param _email \\uc774\\uba54\\uc77c\\uc758 \\ud574\\uc2dc\\n    /// @param _wallet \\uc9c0\\uac11\\uc8fc\\uc18c\\n    /// @param _signature \\uc9c0\\uac11\\uc8fc\\uc18c\\uc758 \\uc11c\\uba85\\n    function addRequest(bytes32 _id, bytes32 _email, address _wallet, bytes calldata _signature) public {\\n        require(requests[_id].status == RequestStatus.INVALID, \\\"E004\\\");\\n        require(_email != NULL, \\\"E001\\\");\\n        bytes32 dataHash = keccak256(abi.encode(_email, _wallet, nonce[_wallet]));\\n        require(ECDSA.recover(ECDSA.toEthSignedMessageHash(dataHash), _signature) == _wallet, \\\"E000\\\");\\n\\n        require(emailToAddress[_email] == address(0x00), \\\"E001\\\");\\n        require(addressToEmail[_wallet] == bytes32(0x00), \\\"E002\\\");\\n\\n        nonce[_wallet]++;\\n\\n        requests[_id].id = _id;\\n        requests[_id].email = _email;\\n        requests[_id].wallet = _wallet;\\n        requests[_id].signature = _signature;\\n        requests[_id].status = RequestStatus.REQUESTED;\\n        requestIds.push(_id);\\n\\n        emit AddedRequestItem(_id, _email, _wallet);\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\ub4e4\\uc774 \\uc774\\uba54\\uc77c \\uac80\\uc99d\\uacb0\\uacfc\\ub97c \\ub4f1\\ub85d\\ud55c\\ub2e4.\\n    /// @param _id \\uc694\\uccad \\uc544\\uc774\\ub514\\n    /// @param _ballot \\uc774\\uba54\\uc77c \\uac80\\uc99d\\uacb0\\uacfc\\n    function voteRequest(bytes32 _id, Ballot _ballot) public onlyValidator {\\n        require(requests[_id].status != RequestStatus.INVALID, \\\"E004\\\");\\n\\n        if (requests[_id].status != RequestStatus.ACCEPTED) {\\n            if (requests[_id].ballots[msg.sender] != _ballot) {\\n                if (requests[_id].ballots[msg.sender] == Ballot.AGREEMENT) {\\n                    requests[_id].agreement--;\\n                } else if (requests[_id].ballots[msg.sender] == Ballot.OPPOSITION) {\\n                    requests[_id].opposition--;\\n                } else if (requests[_id].ballots[msg.sender] == Ballot.ABSTAINING) {\\n                    requests[_id].abstaining--;\\n                }\\n                if (_ballot == Ballot.AGREEMENT) {\\n                    requests[_id].agreement++;\\n                } else if (_ballot == Ballot.OPPOSITION) {\\n                    requests[_id].opposition++;\\n                } else {\\n                    requests[_id].abstaining++;\\n                }\\n\\n                if ((requests[_id].agreement * 1000) / validatorAddresses.length >= quorum) {\\n                    if (\\n                        emailToAddress[requests[_id].email] == address(0x00) &&\\n                        addressToEmail[requests[_id].wallet] == bytes32(0x00)\\n                    ) {\\n                        emailToAddress[requests[_id].email] = requests[_id].wallet;\\n                        addressToEmail[requests[_id].wallet] = requests[_id].email;\\n                        requests[_id].status = RequestStatus.ACCEPTED;\\n                        emit AcceptedRequestItem(requests[_id].id, requests[_id].email, requests[_id].wallet);\\n                    } else {\\n                        requests[_id].status = RequestStatus.REJECTED;\\n                        emit RejectedRequestItem(requests[_id].id, requests[_id].email, requests[_id].wallet);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790 \\uc790\\uc2e0\\uc758 API \\uc5d4\\ub4dc\\ud3ec\\uc778\\ud2b8\\ub97c \\ub4f1\\ub85d\\ud55c\\ub2e4.\\n    /// @param _endpoint API \\uc5d4\\ub4dc\\ud3ec\\uc778\\ud2b8\\n    function updateEndpoint(string memory _endpoint) public onlyValidator {\\n        require(validators[msg.sender].status != ValidatorStatus.INVALID, \\\"No exists validator's info\\\");\\n        validators[msg.sender].endpoint = _endpoint;\\n    }\\n\\n    /// @notice \\uc774\\uba54\\uc77c\\ud574\\uc2dc\\uc640 \\uc5f0\\uacb0\\ub41c \\uc9c0\\uac11\\uc8fc\\uc18c\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4.\\n    /// @param _email \\uc774\\uba54\\uc77c\\uc758 \\ud574\\uc2dc\\n    function toAddress(bytes32 _email) public view returns (address) {\\n        return emailToAddress[_email];\\n    }\\n\\n    /// @notice \\uc9c0\\uac11\\uc8fc\\uc18c\\uc640 \\uc5f0\\uacb0\\ub41c \\uc774\\uba54\\uc77c\\ud574\\uc2dc\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4.\\n    /// @param _wallet \\uc9c0\\uac11\\uc8fc\\uc18c\\n    function toEmail(address _wallet) public view returns (bytes32) {\\n        return addressToEmail[_wallet];\\n    }\\n\\n    /// @notice nonce\\ub97c  \\ub9ac\\ud134\\ud55c\\ub2e4\\n    /// @param _wallet \\uc9c0\\uac11\\uc8fc\\uc18c\\n    function nonceOf(address _wallet) public view returns (uint256) {\\n        return nonce[_wallet];\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\ub4e4\\uc758 \\uc815\\ubcf4\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4.\\n    function getValidators() public view returns (ValidatorItem[] memory) {\\n        uint256 len = validatorAddresses.length;\\n        ValidatorItem[] memory items = new ValidatorItem[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            items[i] = validators[validatorAddresses[i]];\\n        }\\n        return items;\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\ub4e4\\uc758 \\uc8fc\\uc18c\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4.\\n    function getAddressOfValidators() public view returns (address[] memory) {\\n        uint256 len = validatorAddresses.length;\\n        address[] memory items = new address[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            items[i] = validatorAddresses[i];\\n        }\\n        return items;\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\ub4e4\\uc758 \\uac2f\\uc218\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4\\n    function getValidatorLength() public view returns (uint256) {\\n        return validatorAddresses.length;\\n    }\\n\\n    /// @notice \\uac80\\uc99d\\uc790\\uc758 \\uc815\\ubcf4\\ub97c \\ub9ac\\ud134\\ud55c\\ub2e4.\\n    /// @param _idx \\uac80\\uc99d\\uc790\\uc758 \\uc778\\ub371\\uc2a4\\n    function getValidator(uint _idx) public view returns (ValidatorItem memory) {\\n        require(_idx < validatorAddresses.length, \\\"Out of range\\\");\\n        return validators[validatorAddresses[_idx]];\\n    }\\n}\\n\",\"keccak256\":\"0xb1486c7db8b0b5c08061dbc19b30e7bd4be822f72b206449035754ebec001432\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003236380380620032368339810160408190526200003491620000ee565b600595909555600680546001600160a01b039586166001600160a01b03199182168117909255600780549587169582168617905560088054948716948216851790556009805493871693821684179055600a8054969097169581168617909655600b805487169091179055600c80548616909317909255600d805485169091179055600e805484169091179055600f805490921617905562000165565b80516001600160a01b0381168114620000e957600080fd5b919050565b60008060008060008060c0878903121562000107578182fd5b865195506200011960208801620000d1565b94506200012960408801620000d1565b93506200013960608801620000d1565b92506200014960808801620000d1565b91506200015960a08801620000d1565b90509295509295509295565b6130c180620001756000396000f3fe608060405234801561001057600080fd5b506004361061016b5760003560e01c8063af0721c8116100cd578063ca6b4ffc11610081578063f26be3fc11610066578063f26be3fc146102b0578063f6aeff3c146102b8578063f9b0a0d2146102cb5761016b565b8063ca6b4ffc1461028a578063ed2a2d641461029d5761016b565b8063bd23e00f116100b2578063bd23e00f14610251578063c268508014610264578063ca1b73f4146102775761016b565b8063af0721c814610236578063b6b55f251461023e5761016b565b80632e1a7d4d116101245780634f071d67116101095780634f071d67146102135780639d76ea5814610226578063a47ec3ad1461022e5761016b565b80632e1a7d4d146101e95780633fe4676e146101fe5761016b565b8063098b85d311610155578063098b85d3146101b957806319e36708146101d957806328e671b9146101e15761016b565b806298584214610170578063011610a414610199575b600080fd5b61018361017e3660046126dc565b6102d3565b6040516101909190612a54565b60405180910390f35b6101ac6101a7366004612774565b6102e8565b6040516101909190612e90565b6101cc6101c73660046126dc565b610473565b6040516101909190612b24565b610183610530565b610183610536565b6101fc6101f73660046126dc565b61053c565b005b61020661074f565b60405161019091906129e9565b6101fc61022136600461270c565b61075e565b610206610a2b565b610206610a3a565b610206610a49565b6101fc61024c3660046126dc565b610a58565b6101fc61025f36600461285a565b610ce3565b6101fc6102723660046127a7565b611140565b6101836102853660046126dc565b611667565b6101fc6102983660046127a7565b611679565b6101836102ab366004612684565b611bce565b610183611be9565b6101fc6102c636600461270c565b611c0d565b610206611eb9565b6000818152602081905260409020545b919050565b6102f06124c1565b60038260405161030091906129cd565b90815260200160405180910390206040518060c001604052908160008201805461032990612ff4565b80601f016020809104026020016040519081016040528092919081815260200182805461035590612ff4565b80156103a25780601f10610377576101008083540402835291602001916103a2565b820191906000526020600020905b81548152906001019060200180831161038557829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820180546103d990612ff4565b80601f016020809104026020016040519081016040528092919081815260200182805461040590612ff4565b80156104525780601f1061042757610100808354040283529160200191610452565b820191906000526020600020905b81548152906001019060200180831161043557829003601f168201915b50505091835250506005919091015463ffffffff1660209091015292915050565b60606004828154811061049657634e487b7160e01b600052603260045260246000fd5b9060005260206000200180546104ab90612ff4565b80601f01602080910402602001604051908101604052809291908181526020018280546104d790612ff4565b80156105245780601f106104f957610100808354040283529160200191610524565b820191906000526020600020905b81548152906001019060200180831161050757829003601f168201915b50505050509050919050565b60055481565b60045490565b600d546040517f18907d4c0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906318907d4c906105869033906004016129e9565b60206040518083038186803b15801561059e57600080fd5b505afa1580156105b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d691906126f4565b9050806105fe5760405162461bcd60e51b81526004016105f590612deb565b60405180910390fd5b60008181526001602052604090205482111561062c5760405162461bcd60e51b81526004016105f590612d20565b600b546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a9059cbb906106779033908690600401612a3b565b602060405180830381600087803b15801561069157600080fd5b505af11580156106a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c991906126bc565b50600081815260016020526040812080548492906106e8908490612fad565b90915550600090506106f983611ec8565b600083815260016020526040908190205490519192507f7d3c6b35b7fbfa94f844b069aadaf8629f637b307cea142767b03eb35879270491610742918591879186913390612a81565b60405180910390a1505050565b6007546001600160a01b031681565b6001600160a01b038316600090815260026020908152604080832054905161078c9289928992899201612a5d565b604051602081830303815290604052805190602001209050836001600160a01b03166107f66107ba83612007565b85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061203a92505050565b6001600160a01b03161461081c5760405162461bcd60e51b81526004016105f590612d57565b600d5460405163341f662360e01b81526000916001600160a01b03169063341f66239061084d908a90600401612a54565b60206040518083038186803b15801561086557600080fd5b505afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d91906126a0565b90506001600160a01b0381166108c55760405162461bcd60e51b81526004016105f590612deb565b846001600160a01b0316816001600160a01b0316146108f65760405162461bcd60e51b81526004016105f590612c7b565b6000878152600160205260409020548611156109245760405162461bcd60e51b81526004016105f590612d20565b60008781526001602052604081208054889290610942908490612fad565b909155505060055460009081526001602052604081208054889290610968908490612f56565b909155506000905061097987611ec8565b9050806000808a8152602001908152602001600020600082825461099d9190612f56565b90915550506001600160a01b03861660009081526002602052604081208054916109c68361302f565b9091555050600088815260208181526040808320546001909252918290205491517fc31e5358f379165f038817ad41aa67bdb113062772a3fdf4b363b31dbe92587b92610a19928c9286928d9291612ae3565b60405180910390a15050505050505050565b6006546001600160a01b031681565b6008546001600160a01b031681565b600a546001600160a01b031681565b600d546040517f18907d4c0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906318907d4c90610aa29033906004016129e9565b60206040518083038186803b158015610aba57600080fd5b505afa158015610ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af291906126f4565b905080610b115760405162461bcd60e51b81526004016105f590612deb565b600b546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063dd62ed3e90610b5c90339030906004016129fd565b60206040518083038186803b158015610b7457600080fd5b505afa158015610b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bac91906126f4565b821115610bcb5760405162461bcd60e51b81526004016105f590612e59565b600b546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906323b872dd90610c1890339030908790600401612a17565b602060405180830381600087803b158015610c3257600080fd5b505af1158015610c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6a91906126bc565b5060008181526001602052604081208054849290610c89908490612f56565b9091555060009050610c9a83611ec8565b600083815260016020526040908190205490519192507f9a499eed412d910fb15819b61c4e8d931458d195748eb0c35082d913c7798a3c91610742918591879186913390612a81565b336000805b600c60009054906101000a90046001600160a01b03166001600160a01b03166377172f0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3657600080fd5b505afa158015610d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6e91906126f4565b811015610e4057600c546040517f7a5e8be90000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690637a5e8be990610dbe908490600401612a54565b60206040518083038186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e91906126a0565b6001600160a01b0316836001600160a01b03161415610e305760019150610e40565b610e398161302f565b9050610ce8565b5080610e5e5760405162461bcd60e51b81526004016105f590612ce9565b6040805160c08101825289815260208082018a9052918101889052606081018790526080810186905263ffffffff851660a0820152600480546001810182556000919091528a519192610ed9927f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90920191908c0190612500565b508060038a604051610eeb91906129cd565b90815260200160405180910390206000820151816000019080519060200190610f15929190612500565b506020828101516001830155604083015160028301556060830151600383015560808301518051610f4c9260048501920190612500565b5060a09190910151600590910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff9283161790558416158015610fb757507fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b8558614155b156110f4576000610fc9606489612f6e565b600d5460405163341f662360e01b81529192506000916001600160a01b039091169063341f662390610fff908b90600401612a54565b60206040518083038186803b15801561101757600080fd5b505afa15801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f91906126a0565b90506001600160a01b03811661106f5761106a88838d61205e565b61107a565b61107a88838d6120c8565b600f60009054906101000a90046001600160a01b03166001600160a01b031663a6cd52f588848e6040518463ffffffff1660e01b81526004016110bf93929190612b87565b600060405180830381600087803b1580156110d957600080fd5b505af11580156110ed573d6000803e3d6000fd5b5050505050505b7fb94fd908a8d634351d2e4245d69aaaa08a375a52ba1a0a0489c0c9330ad9470589898989898960405161112d96959493929190612bbc565b60405180910390a1505050505050505050565b6001600160a01b0383166000908152600260209081526040808320549051611174928b928b928b928b928b92909101612b37565b604051602081830303815290604052805190602001209050836001600160a01b03166111a26107ba83612007565b6001600160a01b0316146111c85760405162461bcd60e51b81526004016105f590612d57565b600d5460405163341f662360e01b81526000916001600160a01b03169063341f6623906111f9908a90600401612a54565b60206040518083038186803b15801561121157600080fd5b505afa158015611225573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124991906126a0565b90506001600160a01b0381166112715760405162461bcd60e51b81526004016105f590612deb565b846001600160a01b0316816001600160a01b0316146112a25760405162461bcd60e51b81526004016105f590612c7b565b6000878152602081905260409020548811156112d05760405162461bcd60e51b81526004016105f590612d20565b600087815260208190526040812080548a92906112ee908490612fad565b9091555050600f546040517f77f60f370000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906377f60f37906113409089908c908e90600401612b87565b600060405180830381600087803b15801561135a57600080fd5b505af115801561136e573d6000803e3d6000fd5b5050600f546040517f5d404c6a000000000000000000000000000000000000000000000000000000008152600093506001600160a01b039091169150635d404c6a906113be908a90600401612b24565b60206040518083038186803b1580156113d657600080fd5b505afa1580156113ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140e91906126f4565b905080156115e157600f546040517f49cd54ab0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906349cd54ab90611463908a9085908f90600401612b87565b600060405180830381600087803b15801561147d57600080fd5b505af1158015611491573d6000803e3d6000fd5b5050600f546040517f4a9c2fcf000000000000000000000000000000000000000000000000000000008152600093506001600160a01b039091169150634a9c2fcf906114e1908b90600401612b24565b60006040518083038186803b1580156114f957600080fd5b505afa15801561150d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261153591908101906128f3565b60408101519091507fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855146115df57816000808360400151815260200190815260200160002060008282546115899190612f56565b9091555050604080820151600081815260208190528290205491517fd32e937827202c07d29b8c6258595435ca237edb05192ff8f5aaeae7d85a132a926115d69291869182918e90612aad565b60405180910390a15b505b6001600160a01b03861660009081526002602052604081208054916116058361302f565b91905055507f8a0c0b57fae54ae7ac747f737b5fb89960fe8021be6b04fdab5b48bdf5a8a5f3888a8b6000808d8152602001908152602001600020548e604051611653959493929190612aad565b60405180910390a150505050505050505050565b60009081526001602052604090205490565b6001600160a01b03831660009081526002602090815260408083205490516116ad928b928b928b928b928b92909101612b37565b604051602081830303815290604052805190602001209050836001600160a01b03166116db6107ba83612007565b6001600160a01b0316146117015760405162461bcd60e51b81526004016105f590612d57565b600d5460405163341f662360e01b81526000916001600160a01b03169063341f662390611732908a90600401612a54565b60206040518083038186803b15801561174a57600080fd5b505afa15801561175e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178291906126a0565b90506001600160a01b0381166117aa5760405162461bcd60e51b81526004016105f590612deb565b846001600160a01b0316816001600160a01b0316146117db5760405162461bcd60e51b81526004016105f590612c7b565b60006117e6896121a5565b6000898152600160205260409020549091508111156118175760405162461bcd60e51b81526004016105f590612d20565b60008881526001602052604081208054839290611835908490612fad565b90915550506005546000908152600160205260408120805483929061185b908490612f56565b9091555050600f546040517f77f60f370000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906377f60f37906118ad908a908d908f90600401612b87565b600060405180830381600087803b1580156118c757600080fd5b505af11580156118db573d6000803e3d6000fd5b5050600f546040517f5d404c6a000000000000000000000000000000000000000000000000000000008152600093506001600160a01b039091169150635d404c6a9061192b908b90600401612b24565b60206040518083038186803b15801561194357600080fd5b505afa158015611957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197b91906126f4565b90508015611b4657600f60009054906101000a90046001600160a01b03166001600160a01b03166349cd54ab89838e6040518463ffffffff1660e01b81526004016119c893929190612b87565b600060405180830381600087803b1580156119e257600080fd5b505af11580156119f6573d6000803e3d6000fd5b5050600f546040517f4a9c2fcf000000000000000000000000000000000000000000000000000000008152600093506001600160a01b039091169150634a9c2fcf90611a46908c90600401612b24565b60006040518083038186803b158015611a5e57600080fd5b505afa158015611a72573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a9a91908101906128f3565b60408101519091507fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85514611b445781600080836040015181526020019081526020016000206000828254611aee9190612f56565b9091555050604080820151600081815260208190528290205491517fd32e937827202c07d29b8c6258595435ca237edb05192ff8f5aaeae7d85a132a92611b3b9291869182918f90612aad565b60405180910390a15b505b6001600160a01b0387166000908152600260205260408120805491611b6a8361302f565b91905055507f829c1897974d233758e3f6e656a2ce4cdfc3dd7b9938da7228a24b35b4652b4889838c600160008e8152602001908152602001600020548f604051611bb9959493929190612aad565b60405180910390a15050505050505050505050565b6001600160a01b031660009081526002602052604090205490565b7fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85581565b6001600160a01b0383166000908152600260209081526040808320549051611c3b9289928992899201612a5d565b604051602081830303815290604052805190602001209050836001600160a01b0316611c696107ba83612007565b6001600160a01b031614611c8f5760405162461bcd60e51b81526004016105f590612d57565b600d5460405163341f662360e01b81526000916001600160a01b03169063341f662390611cc0908a90600401612a54565b60206040518083038186803b158015611cd857600080fd5b505afa158015611cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1091906126a0565b90506001600160a01b038116611d385760405162461bcd60e51b81526004016105f590612deb565b846001600160a01b0316816001600160a01b031614611d695760405162461bcd60e51b81526004016105f590612c7b565b600087815260208190526040902054861115611d975760405162461bcd60e51b81526004016105f590612d20565b6000611da2876121a5565b600554600090815260016020526040902054909150811115611dd65760405162461bcd60e51b81526004016105f590612c44565b60008881526020819052604081208054899290611df4908490612fad565b909155505060008881526001602052604081208054839290611e17908490612f56565b909155505060055460009081526001602052604081208054839290611e3d908490612fad565b90915550506001600160a01b0386166000908152600260205260408120805491611e668361302f565b9091555050600088815260208181526040808320546001909252918290205491517f5ca6fd0e327891b20a6ab896f05992ec6aeed133c0f3b829e2b03589c95efbd092610a19928c928c92879291612ae3565b6009546001600160a01b031681565b600e546040517f693ec85e00000000000000000000000000000000000000000000000000000000815260009182916001600160a01b039091169063693ec85e90611f1490600401612e22565b60206040518083038186803b158015611f2c57600080fd5b505afa158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6491906126f4565b9050600e60009054906101000a90046001600160a01b03166001600160a01b0316637516a79e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fb457600080fd5b505afa158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec91906126f4565b611ff68285612f8e565b6120009190612f6e565b9392505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b600080600061204985856122d4565b915091506120568161231a565b509392505050565b6000838152602081905260408120805484929061207c908490612f56565b9091555050600083815260208190526040908190205490517f6b325d96529335aa8dcb74ceed3952f9a47bec0b42f0b74e7653572faf53a9369161074291869186918291908790612aad565b60006120d3836121a5565b6005546000908152600160205260409020549091508111156121075760405162461bcd60e51b81526004016105f590612c44565b60008481526001602052604081208054839290612125908490612f56565b90915550506005546000908152600160205260408120805483929061214b908490612fad565b9091555050600084815260016020526040908190205490517f2c10afe3db4d2b1b02e570a7f18a67249e7a5c9ea038049fbbb2a81d6f7be9999161219791879185918891908890612aad565b60405180910390a150505050565b600e546040517f693ec85e00000000000000000000000000000000000000000000000000000000815260009182916001600160a01b039091169063693ec85e906121f190600401612e22565b60206040518083038186803b15801561220957600080fd5b505afa15801561221d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224191906126f4565b905080600e60009054906101000a90046001600160a01b03166001600160a01b0316637516a79e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561229257600080fd5b505afa1580156122a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ca91906126f4565b611ff69085612f8e565b60008082516041141561230b5760208301516040840151606085015160001a6122ff8782858561240a565b94509450505050612313565b506000905060025b9250929050565b600081600481111561233c57634e487b7160e01b600052602160045260246000fd5b141561234757612407565b600181600481111561236957634e487b7160e01b600052602160045260246000fd5b14156123875760405162461bcd60e51b81526004016105f590612c0d565b60028160048111156123a957634e487b7160e01b600052602160045260246000fd5b14156123c75760405162461bcd60e51b81526004016105f590612cb2565b60038160048111156123e957634e487b7160e01b600052602160045260246000fd5b14156124075760405162461bcd60e51b81526004016105f590612d8e565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561244157506000905060036124b8565b6000600187878787604051600081526020016040526040516124669493929190612b06565b6020604051602081039080840390855afa158015612488573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166124b1576000600192509250506124b8565b9150600090505b94509492505050565b6040518060c001604052806060815260200160008152602001600081526020016000801916815260200160608152602001600063ffffffff1681525090565b82805461250c90612ff4565b90600052602060002090601f01602090048101928261252e5760008555612574565b82601f1061254757805160ff1916838001178555612574565b82800160010185558215612574579182015b82811115612574578251825591602001919060010190612559565b50612580929150612584565b5090565b5b808211156125805760008155600101612585565b60008083601f8401126125aa578182fd5b50813567ffffffffffffffff8111156125c1578182fd5b60208301915083602082850101111561231357600080fd5b8051600281106102e357600080fd5b600082601f8301126125f8578081fd5b813561260b61260682612f2e565b612f04565b81815284602083860101111561261f578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612649578081fd5b815161265761260682612f2e565b81815284602083860101111561266b578283fd5b61267c826020830160208701612fc4565b949350505050565b600060208284031215612695578081fd5b813561200081613076565b6000602082840312156126b1578081fd5b815161200081613076565b6000602082840312156126cd578081fd5b81518015158114612000578182fd5b6000602082840312156126ed578081fd5b5035919050565b600060208284031215612705578081fd5b5051919050565b600080600080600060808688031215612723578081fd5b8535945060208601359350604086013561273c81613076565b9250606086013567ffffffffffffffff811115612757578182fd5b61276388828901612599565b969995985093965092949392505050565b600060208284031215612785578081fd5b813567ffffffffffffffff81111561279b578182fd5b61267c848285016125e8565b600080600080600080600060c0888a0312156127c1578182fd5b873567ffffffffffffffff808211156127d8578384fd5b6127e48b838c016125e8565b985060208a0135975060408a0135965060608a0135915080821115612807578384fd5b6128138b838c016125e8565b955060808a0135915061282582613076565b90935060a0890135908082111561283a578384fd5b506128478a828b01612599565b989b979a50959850939692959293505050565b60008060008060008060c08789031215612872578182fd5b863567ffffffffffffffff80821115612889578384fd5b6128958a838b016125e8565b975060208901359650604089013595506060890135945060808901359150808211156128bf578384fd5b506128cc89828a016125e8565b92505060a087013563ffffffff811681146128e5578182fd5b809150509295509295509295565b600060208284031215612904578081fd5b815167ffffffffffffffff8082111561291b578283fd5b9083019060e0828603121561292e578283fd5b61293860e0612f04565b825182811115612946578485fd5b61295287828601612639565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015261299360c084016125d9565b60c082015295945050505050565b600081518084526129b9816020860160208601612fc4565b601f01601f19169290920160200192915050565b600082516129df818460208701612fc4565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b600086825285602083015284604083015283606083015260a06080830152612ad860a08301846129a1565b979650505050505050565b948552602085019390935260408401919091526060830152608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261200060208301846129a1565b600060c08252612b4a60c08301896129a1565b8760208401528660408401528281036060840152612b6881876129a1565b6001600160a01b03959095166080840152505060a00152949350505050565b600060608252612b9a60608301866129a1565b8460208401528281036040840152612bb281856129a1565b9695505050505050565b600060c08252612bcf60c08301896129a1565b8760208401528660408401528560608401528281036080840152612bf381866129a1565b91505063ffffffff831660a0830152979650505050505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f496e73756666696369656e7420666f756e646174696f6e2062616c616e636500604082015260600190565b6020808252600f908201527f496e76616c696420616464726573730000000000000000000000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b6020808252600d908201527f4e6f742076616c696461746f7200000000000000000000000000000000000000604082015260600190565b60208082526014908201527f496e73756666696369656e742062616c616e6365000000000000000000000000604082015260600190565b60208082526011908201527f496e76616c6964207369676e6174757265000000000000000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f556e7265676973746572656420656d61696c2d61646472657373000000000000604082015260600190565b60208082526003908201527f4b52570000000000000000000000000000000000000000000000000000000000604082015260600190565b60208082526013908201527f4e6f7420616c6c6f776564206465706f73697400000000000000000000000000604082015260600190565b600060208252825160c06020840152612eac60e08401826129a1565b90506020840151604084015260408401516060840152606084015160808401526080840151601f198483030160a0850152612ee782826129a1565b91505063ffffffff60a08501511660c08401528091505092915050565b60405181810167ffffffffffffffff81118282101715612f2657612f26613060565b604052919050565b600067ffffffffffffffff821115612f4857612f48613060565b50601f01601f191660200190565b60008219821115612f6957612f6961304a565b500190565b600082612f8957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612fa857612fa861304a565b500290565b600082821015612fbf57612fbf61304a565b500390565b60005b83811015612fdf578181015183820152602001612fc7565b83811115612fee576000848401525b50505050565b60028104600182168061300857607f821691505b6020821081141561302957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156130435761304361304a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461240757600080fdfea264697066735822122077bc18e7c37190a9e7b5138f871cd4c1f8e2bc391170cbb57d6fe5c2c0cc3b6364736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016b5760003560e01c8063af0721c8116100cd578063ca6b4ffc11610081578063f26be3fc11610066578063f26be3fc146102b0578063f6aeff3c146102b8578063f9b0a0d2146102cb5761016b565b8063ca6b4ffc1461028a578063ed2a2d641461029d5761016b565b8063bd23e00f116100b2578063bd23e00f14610251578063c268508014610264578063ca1b73f4146102775761016b565b8063af0721c814610236578063b6b55f251461023e5761016b565b80632e1a7d4d116101245780634f071d67116101095780634f071d67146102135780639d76ea5814610226578063a47ec3ad1461022e5761016b565b80632e1a7d4d146101e95780633fe4676e146101fe5761016b565b8063098b85d311610155578063098b85d3146101b957806319e36708146101d957806328e671b9146101e15761016b565b806298584214610170578063011610a414610199575b600080fd5b61018361017e3660046126dc565b6102d3565b6040516101909190612a54565b60405180910390f35b6101ac6101a7366004612774565b6102e8565b6040516101909190612e90565b6101cc6101c73660046126dc565b610473565b6040516101909190612b24565b610183610530565b610183610536565b6101fc6101f73660046126dc565b61053c565b005b61020661074f565b60405161019091906129e9565b6101fc61022136600461270c565b61075e565b610206610a2b565b610206610a3a565b610206610a49565b6101fc61024c3660046126dc565b610a58565b6101fc61025f36600461285a565b610ce3565b6101fc6102723660046127a7565b611140565b6101836102853660046126dc565b611667565b6101fc6102983660046127a7565b611679565b6101836102ab366004612684565b611bce565b610183611be9565b6101fc6102c636600461270c565b611c0d565b610206611eb9565b6000818152602081905260409020545b919050565b6102f06124c1565b60038260405161030091906129cd565b90815260200160405180910390206040518060c001604052908160008201805461032990612ff4565b80601f016020809104026020016040519081016040528092919081815260200182805461035590612ff4565b80156103a25780601f10610377576101008083540402835291602001916103a2565b820191906000526020600020905b81548152906001019060200180831161038557829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820180546103d990612ff4565b80601f016020809104026020016040519081016040528092919081815260200182805461040590612ff4565b80156104525780601f1061042757610100808354040283529160200191610452565b820191906000526020600020905b81548152906001019060200180831161043557829003601f168201915b50505091835250506005919091015463ffffffff1660209091015292915050565b60606004828154811061049657634e487b7160e01b600052603260045260246000fd5b9060005260206000200180546104ab90612ff4565b80601f01602080910402602001604051908101604052809291908181526020018280546104d790612ff4565b80156105245780601f106104f957610100808354040283529160200191610524565b820191906000526020600020905b81548152906001019060200180831161050757829003601f168201915b50505050509050919050565b60055481565b60045490565b600d546040517f18907d4c0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906318907d4c906105869033906004016129e9565b60206040518083038186803b15801561059e57600080fd5b505afa1580156105b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d691906126f4565b9050806105fe5760405162461bcd60e51b81526004016105f590612deb565b60405180910390fd5b60008181526001602052604090205482111561062c5760405162461bcd60e51b81526004016105f590612d20565b600b546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a9059cbb906106779033908690600401612a3b565b602060405180830381600087803b15801561069157600080fd5b505af11580156106a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c991906126bc565b50600081815260016020526040812080548492906106e8908490612fad565b90915550600090506106f983611ec8565b600083815260016020526040908190205490519192507f7d3c6b35b7fbfa94f844b069aadaf8629f637b307cea142767b03eb35879270491610742918591879186913390612a81565b60405180910390a1505050565b6007546001600160a01b031681565b6001600160a01b038316600090815260026020908152604080832054905161078c9289928992899201612a5d565b604051602081830303815290604052805190602001209050836001600160a01b03166107f66107ba83612007565b85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061203a92505050565b6001600160a01b03161461081c5760405162461bcd60e51b81526004016105f590612d57565b600d5460405163341f662360e01b81526000916001600160a01b03169063341f66239061084d908a90600401612a54565b60206040518083038186803b15801561086557600080fd5b505afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d91906126a0565b90506001600160a01b0381166108c55760405162461bcd60e51b81526004016105f590612deb565b846001600160a01b0316816001600160a01b0316146108f65760405162461bcd60e51b81526004016105f590612c7b565b6000878152600160205260409020548611156109245760405162461bcd60e51b81526004016105f590612d20565b60008781526001602052604081208054889290610942908490612fad565b909155505060055460009081526001602052604081208054889290610968908490612f56565b909155506000905061097987611ec8565b9050806000808a8152602001908152602001600020600082825461099d9190612f56565b90915550506001600160a01b03861660009081526002602052604081208054916109c68361302f565b9091555050600088815260208181526040808320546001909252918290205491517fc31e5358f379165f038817ad41aa67bdb113062772a3fdf4b363b31dbe92587b92610a19928c9286928d9291612ae3565b60405180910390a15050505050505050565b6006546001600160a01b031681565b6008546001600160a01b031681565b600a546001600160a01b031681565b600d546040517f18907d4c0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906318907d4c90610aa29033906004016129e9565b60206040518083038186803b158015610aba57600080fd5b505afa158015610ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af291906126f4565b905080610b115760405162461bcd60e51b81526004016105f590612deb565b600b546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063dd62ed3e90610b5c90339030906004016129fd565b60206040518083038186803b158015610b7457600080fd5b505afa158015610b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bac91906126f4565b821115610bcb5760405162461bcd60e51b81526004016105f590612e59565b600b546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906323b872dd90610c1890339030908790600401612a17565b602060405180830381600087803b158015610c3257600080fd5b505af1158015610c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6a91906126bc565b5060008181526001602052604081208054849290610c89908490612f56565b9091555060009050610c9a83611ec8565b600083815260016020526040908190205490519192507f9a499eed412d910fb15819b61c4e8d931458d195748eb0c35082d913c7798a3c91610742918591879186913390612a81565b336000805b600c60009054906101000a90046001600160a01b03166001600160a01b03166377172f0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3657600080fd5b505afa158015610d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6e91906126f4565b811015610e4057600c546040517f7a5e8be90000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690637a5e8be990610dbe908490600401612a54565b60206040518083038186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e91906126a0565b6001600160a01b0316836001600160a01b03161415610e305760019150610e40565b610e398161302f565b9050610ce8565b5080610e5e5760405162461bcd60e51b81526004016105f590612ce9565b6040805160c08101825289815260208082018a9052918101889052606081018790526080810186905263ffffffff851660a0820152600480546001810182556000919091528a519192610ed9927f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90920191908c0190612500565b508060038a604051610eeb91906129cd565b90815260200160405180910390206000820151816000019080519060200190610f15929190612500565b506020828101516001830155604083015160028301556060830151600383015560808301518051610f4c9260048501920190612500565b5060a09190910151600590910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff9283161790558416158015610fb757507fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b8558614155b156110f4576000610fc9606489612f6e565b600d5460405163341f662360e01b81529192506000916001600160a01b039091169063341f662390610fff908b90600401612a54565b60206040518083038186803b15801561101757600080fd5b505afa15801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f91906126a0565b90506001600160a01b03811661106f5761106a88838d61205e565b61107a565b61107a88838d6120c8565b600f60009054906101000a90046001600160a01b03166001600160a01b031663a6cd52f588848e6040518463ffffffff1660e01b81526004016110bf93929190612b87565b600060405180830381600087803b1580156110d957600080fd5b505af11580156110ed573d6000803e3d6000fd5b5050505050505b7fb94fd908a8d634351d2e4245d69aaaa08a375a52ba1a0a0489c0c9330ad9470589898989898960405161112d96959493929190612bbc565b60405180910390a1505050505050505050565b6001600160a01b0383166000908152600260209081526040808320549051611174928b928b928b928b928b92909101612b37565b604051602081830303815290604052805190602001209050836001600160a01b03166111a26107ba83612007565b6001600160a01b0316146111c85760405162461bcd60e51b81526004016105f590612d57565b600d5460405163341f662360e01b81526000916001600160a01b03169063341f6623906111f9908a90600401612a54565b60206040518083038186803b15801561121157600080fd5b505afa158015611225573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124991906126a0565b90506001600160a01b0381166112715760405162461bcd60e51b81526004016105f590612deb565b846001600160a01b0316816001600160a01b0316146112a25760405162461bcd60e51b81526004016105f590612c7b565b6000878152602081905260409020548811156112d05760405162461bcd60e51b81526004016105f590612d20565b600087815260208190526040812080548a92906112ee908490612fad565b9091555050600f546040517f77f60f370000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906377f60f37906113409089908c908e90600401612b87565b600060405180830381600087803b15801561135a57600080fd5b505af115801561136e573d6000803e3d6000fd5b5050600f546040517f5d404c6a000000000000000000000000000000000000000000000000000000008152600093506001600160a01b039091169150635d404c6a906113be908a90600401612b24565b60206040518083038186803b1580156113d657600080fd5b505afa1580156113ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140e91906126f4565b905080156115e157600f546040517f49cd54ab0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906349cd54ab90611463908a9085908f90600401612b87565b600060405180830381600087803b15801561147d57600080fd5b505af1158015611491573d6000803e3d6000fd5b5050600f546040517f4a9c2fcf000000000000000000000000000000000000000000000000000000008152600093506001600160a01b039091169150634a9c2fcf906114e1908b90600401612b24565b60006040518083038186803b1580156114f957600080fd5b505afa15801561150d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261153591908101906128f3565b60408101519091507fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855146115df57816000808360400151815260200190815260200160002060008282546115899190612f56565b9091555050604080820151600081815260208190528290205491517fd32e937827202c07d29b8c6258595435ca237edb05192ff8f5aaeae7d85a132a926115d69291869182918e90612aad565b60405180910390a15b505b6001600160a01b03861660009081526002602052604081208054916116058361302f565b91905055507f8a0c0b57fae54ae7ac747f737b5fb89960fe8021be6b04fdab5b48bdf5a8a5f3888a8b6000808d8152602001908152602001600020548e604051611653959493929190612aad565b60405180910390a150505050505050505050565b60009081526001602052604090205490565b6001600160a01b03831660009081526002602090815260408083205490516116ad928b928b928b928b928b92909101612b37565b604051602081830303815290604052805190602001209050836001600160a01b03166116db6107ba83612007565b6001600160a01b0316146117015760405162461bcd60e51b81526004016105f590612d57565b600d5460405163341f662360e01b81526000916001600160a01b03169063341f662390611732908a90600401612a54565b60206040518083038186803b15801561174a57600080fd5b505afa15801561175e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178291906126a0565b90506001600160a01b0381166117aa5760405162461bcd60e51b81526004016105f590612deb565b846001600160a01b0316816001600160a01b0316146117db5760405162461bcd60e51b81526004016105f590612c7b565b60006117e6896121a5565b6000898152600160205260409020549091508111156118175760405162461bcd60e51b81526004016105f590612d20565b60008881526001602052604081208054839290611835908490612fad565b90915550506005546000908152600160205260408120805483929061185b908490612f56565b9091555050600f546040517f77f60f370000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906377f60f37906118ad908a908d908f90600401612b87565b600060405180830381600087803b1580156118c757600080fd5b505af11580156118db573d6000803e3d6000fd5b5050600f546040517f5d404c6a000000000000000000000000000000000000000000000000000000008152600093506001600160a01b039091169150635d404c6a9061192b908b90600401612b24565b60206040518083038186803b15801561194357600080fd5b505afa158015611957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197b91906126f4565b90508015611b4657600f60009054906101000a90046001600160a01b03166001600160a01b03166349cd54ab89838e6040518463ffffffff1660e01b81526004016119c893929190612b87565b600060405180830381600087803b1580156119e257600080fd5b505af11580156119f6573d6000803e3d6000fd5b5050600f546040517f4a9c2fcf000000000000000000000000000000000000000000000000000000008152600093506001600160a01b039091169150634a9c2fcf90611a46908c90600401612b24565b60006040518083038186803b158015611a5e57600080fd5b505afa158015611a72573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a9a91908101906128f3565b60408101519091507fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85514611b445781600080836040015181526020019081526020016000206000828254611aee9190612f56565b9091555050604080820151600081815260208190528290205491517fd32e937827202c07d29b8c6258595435ca237edb05192ff8f5aaeae7d85a132a92611b3b9291869182918f90612aad565b60405180910390a15b505b6001600160a01b0387166000908152600260205260408120805491611b6a8361302f565b91905055507f829c1897974d233758e3f6e656a2ce4cdfc3dd7b9938da7228a24b35b4652b4889838c600160008e8152602001908152602001600020548f604051611bb9959493929190612aad565b60405180910390a15050505050505050505050565b6001600160a01b031660009081526002602052604090205490565b7fe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85581565b6001600160a01b0383166000908152600260209081526040808320549051611c3b9289928992899201612a5d565b604051602081830303815290604052805190602001209050836001600160a01b0316611c696107ba83612007565b6001600160a01b031614611c8f5760405162461bcd60e51b81526004016105f590612d57565b600d5460405163341f662360e01b81526000916001600160a01b03169063341f662390611cc0908a90600401612a54565b60206040518083038186803b158015611cd857600080fd5b505afa158015611cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1091906126a0565b90506001600160a01b038116611d385760405162461bcd60e51b81526004016105f590612deb565b846001600160a01b0316816001600160a01b031614611d695760405162461bcd60e51b81526004016105f590612c7b565b600087815260208190526040902054861115611d975760405162461bcd60e51b81526004016105f590612d20565b6000611da2876121a5565b600554600090815260016020526040902054909150811115611dd65760405162461bcd60e51b81526004016105f590612c44565b60008881526020819052604081208054899290611df4908490612fad565b909155505060008881526001602052604081208054839290611e17908490612f56565b909155505060055460009081526001602052604081208054839290611e3d908490612fad565b90915550506001600160a01b0386166000908152600260205260408120805491611e668361302f565b9091555050600088815260208181526040808320546001909252918290205491517f5ca6fd0e327891b20a6ab896f05992ec6aeed133c0f3b829e2b03589c95efbd092610a19928c928c92879291612ae3565b6009546001600160a01b031681565b600e546040517f693ec85e00000000000000000000000000000000000000000000000000000000815260009182916001600160a01b039091169063693ec85e90611f1490600401612e22565b60206040518083038186803b158015611f2c57600080fd5b505afa158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6491906126f4565b9050600e60009054906101000a90046001600160a01b03166001600160a01b0316637516a79e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fb457600080fd5b505afa158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec91906126f4565b611ff68285612f8e565b6120009190612f6e565b9392505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b600080600061204985856122d4565b915091506120568161231a565b509392505050565b6000838152602081905260408120805484929061207c908490612f56565b9091555050600083815260208190526040908190205490517f6b325d96529335aa8dcb74ceed3952f9a47bec0b42f0b74e7653572faf53a9369161074291869186918291908790612aad565b60006120d3836121a5565b6005546000908152600160205260409020549091508111156121075760405162461bcd60e51b81526004016105f590612c44565b60008481526001602052604081208054839290612125908490612f56565b90915550506005546000908152600160205260408120805483929061214b908490612fad565b9091555050600084815260016020526040908190205490517f2c10afe3db4d2b1b02e570a7f18a67249e7a5c9ea038049fbbb2a81d6f7be9999161219791879185918891908890612aad565b60405180910390a150505050565b600e546040517f693ec85e00000000000000000000000000000000000000000000000000000000815260009182916001600160a01b039091169063693ec85e906121f190600401612e22565b60206040518083038186803b15801561220957600080fd5b505afa15801561221d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224191906126f4565b905080600e60009054906101000a90046001600160a01b03166001600160a01b0316637516a79e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561229257600080fd5b505afa1580156122a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ca91906126f4565b611ff69085612f8e565b60008082516041141561230b5760208301516040840151606085015160001a6122ff8782858561240a565b94509450505050612313565b506000905060025b9250929050565b600081600481111561233c57634e487b7160e01b600052602160045260246000fd5b141561234757612407565b600181600481111561236957634e487b7160e01b600052602160045260246000fd5b14156123875760405162461bcd60e51b81526004016105f590612c0d565b60028160048111156123a957634e487b7160e01b600052602160045260246000fd5b14156123c75760405162461bcd60e51b81526004016105f590612cb2565b60038160048111156123e957634e487b7160e01b600052602160045260246000fd5b14156124075760405162461bcd60e51b81526004016105f590612d8e565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561244157506000905060036124b8565b6000600187878787604051600081526020016040526040516124669493929190612b06565b6020604051602081039080840390855afa158015612488573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166124b1576000600192509250506124b8565b9150600090505b94509492505050565b6040518060c001604052806060815260200160008152602001600081526020016000801916815260200160608152602001600063ffffffff1681525090565b82805461250c90612ff4565b90600052602060002090601f01602090048101928261252e5760008555612574565b82601f1061254757805160ff1916838001178555612574565b82800160010185558215612574579182015b82811115612574578251825591602001919060010190612559565b50612580929150612584565b5090565b5b808211156125805760008155600101612585565b60008083601f8401126125aa578182fd5b50813567ffffffffffffffff8111156125c1578182fd5b60208301915083602082850101111561231357600080fd5b8051600281106102e357600080fd5b600082601f8301126125f8578081fd5b813561260b61260682612f2e565b612f04565b81815284602083860101111561261f578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612649578081fd5b815161265761260682612f2e565b81815284602083860101111561266b578283fd5b61267c826020830160208701612fc4565b949350505050565b600060208284031215612695578081fd5b813561200081613076565b6000602082840312156126b1578081fd5b815161200081613076565b6000602082840312156126cd578081fd5b81518015158114612000578182fd5b6000602082840312156126ed578081fd5b5035919050565b600060208284031215612705578081fd5b5051919050565b600080600080600060808688031215612723578081fd5b8535945060208601359350604086013561273c81613076565b9250606086013567ffffffffffffffff811115612757578182fd5b61276388828901612599565b969995985093965092949392505050565b600060208284031215612785578081fd5b813567ffffffffffffffff81111561279b578182fd5b61267c848285016125e8565b600080600080600080600060c0888a0312156127c1578182fd5b873567ffffffffffffffff808211156127d8578384fd5b6127e48b838c016125e8565b985060208a0135975060408a0135965060608a0135915080821115612807578384fd5b6128138b838c016125e8565b955060808a0135915061282582613076565b90935060a0890135908082111561283a578384fd5b506128478a828b01612599565b989b979a50959850939692959293505050565b60008060008060008060c08789031215612872578182fd5b863567ffffffffffffffff80821115612889578384fd5b6128958a838b016125e8565b975060208901359650604089013595506060890135945060808901359150808211156128bf578384fd5b506128cc89828a016125e8565b92505060a087013563ffffffff811681146128e5578182fd5b809150509295509295509295565b600060208284031215612904578081fd5b815167ffffffffffffffff8082111561291b578283fd5b9083019060e0828603121561292e578283fd5b61293860e0612f04565b825182811115612946578485fd5b61295287828601612639565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015261299360c084016125d9565b60c082015295945050505050565b600081518084526129b9816020860160208601612fc4565b601f01601f19169290920160200192915050565b600082516129df818460208701612fc4565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b600086825285602083015284604083015283606083015260a06080830152612ad860a08301846129a1565b979650505050505050565b948552602085019390935260408401919091526060830152608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261200060208301846129a1565b600060c08252612b4a60c08301896129a1565b8760208401528660408401528281036060840152612b6881876129a1565b6001600160a01b03959095166080840152505060a00152949350505050565b600060608252612b9a60608301866129a1565b8460208401528281036040840152612bb281856129a1565b9695505050505050565b600060c08252612bcf60c08301896129a1565b8760208401528660408401528560608401528281036080840152612bf381866129a1565b91505063ffffffff831660a0830152979650505050505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f496e73756666696369656e7420666f756e646174696f6e2062616c616e636500604082015260600190565b6020808252600f908201527f496e76616c696420616464726573730000000000000000000000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b6020808252600d908201527f4e6f742076616c696461746f7200000000000000000000000000000000000000604082015260600190565b60208082526014908201527f496e73756666696369656e742062616c616e6365000000000000000000000000604082015260600190565b60208082526011908201527f496e76616c6964207369676e6174757265000000000000000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f556e7265676973746572656420656d61696c2d61646472657373000000000000604082015260600190565b60208082526003908201527f4b52570000000000000000000000000000000000000000000000000000000000604082015260600190565b60208082526013908201527f4e6f7420616c6c6f776564206465706f73697400000000000000000000000000604082015260600190565b600060208252825160c06020840152612eac60e08401826129a1565b90506020840151604084015260408401516060840152606084015160808401526080840151601f198483030160a0850152612ee782826129a1565b91505063ffffffff60a08501511660c08401528091505092915050565b60405181810167ffffffffffffffff81118282101715612f2657612f26613060565b604052919050565b600067ffffffffffffffff821115612f4857612f48613060565b50601f01601f191660200190565b60008219821115612f6957612f6961304a565b500190565b600082612f8957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612fa857612fa861304a565b500290565b600082821015612fbf57612fbf61304a565b500390565b60005b83811015612fdf578181015183820152602001612fc7565b83811115612fee576000848401525b50505050565b60028104600182168061300857607f821691505b6020821081141561302957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156130435761304361304a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461240757600080fdfea264697066735822122077bc18e7c37190a9e7b5138f871cd4c1f8e2bc391170cbb57d6fe5c2c0cc3b6364736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_foundationAccount": "재단의 계정",
          "_franchiseeCollectionAddress": "가맹점 컬랙션 컨트랙트의 주소",
          "_linkCollectionAddress": "이메일-지갑주소 링크 컨트랙트의 주소",
          "_tokenAddress": "토큰 컨트랙트의 주소",
          "_tokenPriceAddress": "토큰가격을 제공하는 컨트랙트의 주소",
          "_validatorAddress": "검증자 컬랙션 컨트랙트의 주소"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "금액"
        }
      },
      "exchangeMileageToToken(bytes32,uint256,address,bytes)": {
        "details": "중계서버를 통해서 호출됩니다.",
        "params": {
          "_amountMileage": "교환할 마일리지의 량",
          "_email": "사용자의 이메일 해시",
          "_signature": "서명",
          "_signer": "사용자의 주소"
        }
      },
      "exchangeTokenToMileage(bytes32,uint256,address,bytes)": {
        "details": "중계서버를 통해서 호출됩니다.",
        "params": {
          "_amountToken": "교환할 토큰의 량",
          "_email": "사용자의 이메일 해시",
          "_signature": "서명",
          "_signer": "사용자의 주소"
        }
      },
      "mileageBalanceOf(bytes32)": {
        "params": {
          "_hash": "이메일의 해시"
        }
      },
      "nonceOf(address)": {
        "params": {
          "_account": "지갑주소"
        }
      },
      "payMileage(string,uint256,bytes32,string,address,bytes)": {
        "details": "중계서버를 통해서 호출됩니다.",
        "params": {
          "_amount": "구매 금액",
          "_email": "구매한 사용자의 이메일 해시",
          "_franchiseeId": "구매한 가맹점 아이디",
          "_purchaseId": "구매 아이디",
          "_signature": "서명",
          "_signer": "구매자의 주소"
        }
      },
      "payToken(string,uint256,bytes32,string,address,bytes)": {
        "details": "중계서버를 통해서 호출됩니다.",
        "params": {
          "_amount": "구매 금액",
          "_email": "구매한 사용자의 이메일 해시",
          "_franchiseeId": "구매한 가맹점 아이디",
          "_purchaseId": "구매 아이디",
          "_signature": "서명",
          "_signer": "구매자의 주소"
        }
      },
      "purchaseIdOf(uint256)": {
        "params": {
          "_idx": "배열의 순번"
        }
      },
      "purchaseOf(string)": {
        "params": {
          "_purchaseId": "구매 아이디"
        }
      },
      "savePurchase(string,uint256,uint256,bytes32,string,uint32)": {
        "details": "이것은 검증자들에 의해 호출되어야 합니다.",
        "params": {
          "_amount": "구매 금액",
          "_email": "구매한 사용자의 이메일 해시",
          "_franchiseeId": "구매한 가맹점 아이디",
          "_purchaseId": "구매 아이디",
          "_timestamp": "구매 시간"
        }
      },
      "tokenBalanceOf(bytes32)": {
        "params": {
          "_hash": "이메일의 해시"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "금액"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposited(bytes32,uint256,uint256,uint256,address)": {
        "notice": "토큰을 예치했을 때 발생하는 이벤트"
      },
      "ExchangedMileageToToken(bytes32,uint256,uint256,uint256,uint256)": {
        "notice": "마일리지를 토큰으로 교환했을 때 발생하는 이벤트"
      },
      "ExchangedTokenToMileage(bytes32,uint256,uint256,uint256,uint256)": {
        "notice": "토큰을 마일리지로 교환했을 때 발생하는 이벤트"
      },
      "PaidMileage(bytes32,uint256,uint256,uint256,string)": {
        "notice": "마일리지로 지불을 완료했을 때 발생하는 이벤트"
      },
      "PaidToken(bytes32,uint256,uint256,uint256,string)": {
        "notice": "토큰으로 지불을 완료했을 때 발생하는 이벤트"
      },
      "ProvidedMileage(bytes32,uint256,uint256,uint256,string)": {
        "notice": "마일리지가 지급될 때 발생되는 이벤트"
      },
      "ProvidedMileageToFranchisee(bytes32,uint256,uint256,uint256,string)": {
        "notice": "마일리지가 정산될 때 발생되는 이벤트"
      },
      "ProvidedToken(bytes32,uint256,uint256,uint256,string)": {
        "notice": "토큰이 지급될 때 발생되는 이벤트"
      },
      "SavedPurchase(string,uint256,uint256,bytes32,string,uint32)": {
        "notice": "검증자가 추가될 때 발생되는 이벤트"
      },
      "Withdrawn(bytes32,uint256,uint256,uint256,address)": {
        "notice": "토큰을 인출했을 때 발생하는 이벤트"
      }
    },
    "kind": "user",
    "methods": {
      "NULL()": {
        "notice": "Hash value of a blank string"
      },
      "constructor": {
        "notice": "생성자"
      },
      "deposit(uint256)": {
        "notice": "토큰을 예치합니다."
      },
      "exchangeMileageToToken(bytes32,uint256,address,bytes)": {
        "notice": "마일리지를 토큰으로 교환합니다"
      },
      "exchangeTokenToMileage(bytes32,uint256,address,bytes)": {
        "notice": "토큰을 마일리지로 교환합니다"
      },
      "mileageBalanceOf(bytes32)": {
        "notice": "마일리지의 잔고를 리턴한다"
      },
      "nonceOf(address)": {
        "notice": "nonce를  리턴한다"
      },
      "payMileage(string,uint256,bytes32,string,address,bytes)": {
        "notice": "마일리지를 구매에 사용하는 함수"
      },
      "payToken(string,uint256,bytes32,string,address,bytes)": {
        "notice": "토큰을 구매에 사용하는 함수"
      },
      "purchaseIdOf(uint256)": {
        "notice": "구매 데이터의 아이디를 리턴한다"
      },
      "purchaseOf(string)": {
        "notice": "구매 데이터를 리턴한다"
      },
      "purchasesLength()": {
        "notice": "구매 데이터의 갯수를 리턴한다"
      },
      "savePurchase(string,uint256,uint256,bytes32,string,uint32)": {
        "notice": "구매내역을 저장합니다."
      },
      "tokenBalanceOf(bytes32)": {
        "notice": "토큰의 잔고를 리턴한다"
      },
      "withdraw(uint256)": {
        "notice": "토큰을 인출합니다."
      }
    },
    "notice": "마일리지와 토큰의 원장",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2144,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "mileageLedger",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2148,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "tokenLedger",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2152,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2170,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "purchases",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_struct(PurchaseData)2165_storage)"
      },
      {
        "astId": 2173,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "purchaseIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2175,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "foundationAccount",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 2177,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2179,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "validatorAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2181,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "linkCollectionAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2183,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "tokenPriceAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 2185,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "franchiseeCollectionAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2188,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "token",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 2191,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "validatorCollection",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(ValidatorCollection)4263"
      },
      {
        "astId": 2194,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "linkCollection",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(LinkCollection)5200"
      },
      {
        "astId": 2197,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "tokenPrice",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(TokenPrice)3591"
      },
      {
        "astId": 2200,
        "contract": "contracts/Ledger.sol:Ledger",
        "label": "franchiseeCollection",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(FranchiseeCollection)2127"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(FranchiseeCollection)2127": {
        "encoding": "inplace",
        "label": "contract FranchiseeCollection",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(LinkCollection)5200": {
        "encoding": "inplace",
        "label": "contract LinkCollection",
        "numberOfBytes": "20"
      },
      "t_contract(TokenPrice)3591": {
        "encoding": "inplace",
        "label": "contract TokenPrice",
        "numberOfBytes": "20"
      },
      "t_contract(ValidatorCollection)4263": {
        "encoding": "inplace",
        "label": "contract ValidatorCollection",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_struct(PurchaseData)2165_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Ledger.PurchaseData)",
        "numberOfBytes": "32",
        "value": "t_struct(PurchaseData)2165_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PurchaseData)2165_storage": {
        "encoding": "inplace",
        "label": "struct Ledger.PurchaseData",
        "members": [
          {
            "astId": 2154,
            "contract": "contracts/Ledger.sol:Ledger",
            "label": "purchaseId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2156,
            "contract": "contracts/Ledger.sol:Ledger",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2158,
            "contract": "contracts/Ledger.sol:Ledger",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2160,
            "contract": "contracts/Ledger.sol:Ledger",
            "label": "email",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 2162,
            "contract": "contracts/Ledger.sol:Ledger",
            "label": "franchiseeId",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2164,
            "contract": "contracts/Ledger.sol:Ledger",
            "label": "method",
            "offset": 0,
            "slot": "5",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}