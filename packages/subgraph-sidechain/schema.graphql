
enum PhoneRequestStatus {
  INVALID,
  REQUESTED,
  ACCEPTED,
  REJECTED
}

type PhoneRequestItems @entity {
  id: Bytes! # id
  phone: Bytes! # bytes32
  wallet: Bytes! # address
  status: PhoneRequestStatus!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PhoneLinkItems @entity {
  id: Bytes! # phone
  wallet: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SavedPurchase @entity(immutable: true) {
  id: Bytes!
  purchaseId: String! # string
  amount: BigInt! # uint256
  loyalty: BigInt! # uint256
  currency: String! # string
  shopId: Bytes! # bytes32
  account: Bytes! # address
  phone: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LoyaltyPaymentEvent @entity(immutable: true) {
  id: Bytes!
  paymentId: Bytes! # bytes32
  purchaseId: String! # string
  currency: String! # string
  shopId: Bytes! # bytes32
  account: Bytes! # address
  timestamp: BigInt! # uint256
  paidPoint: BigInt! # uint256
  paidToken: BigInt! # uint256
  paidValue: BigInt! # uint256
  feePoint: BigInt! # uint256
  feeToken: BigInt! # uint256
  feeValue: BigInt! # uint256
  status: Int! # uint8
  balance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserTradeHistory @entity(immutable: true) {
  id: Bytes!
  account: Bytes!
  action: Int!
  cancel: Boolean!
  amountPoint: BigInt!
  amountToken: BigInt!
  amountValue: BigInt!
  feePoint: BigInt!
  feeToken: BigInt!
  feeValue: BigInt!
  currency: String
  balancePoint: BigInt!
  balanceToken: BigInt!
  purchaseId: String
  paymentId: Bytes
  shopId: Bytes # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserUnPayableTradeHistory @entity(immutable: true) {
  id: Bytes!
  phone: Bytes!
  action: Int!
  amount: BigInt!
  balance: BigInt!
  purchaseId: String
  shopId: Bytes # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserBalance @entity {
  id: ID! # account

  point: BigInt!
  token: BigInt!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ShopTradeHistory @entity(immutable: true) {
  id: Bytes!
  shopId: Bytes! # bytes32
  action: Int!
  cancel: Boolean!
  increase: BigInt! # uint256
  currency: String!
  providedAmount: BigInt!
  usedAmount: BigInt!
  refundedAmount: BigInt!
  purchaseId: String
  paymentId: Bytes

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Shop @entity {
  id: Bytes! # shopId

  name: String! # string
  currency: String!
  status: Int!
  account: Bytes! # address
  action: Int!

  providedAmount: BigInt!
  usedAmount: BigInt!
  refundedAmount: BigInt!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BurnedPoint @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  amount: BigInt! # uint256
  balance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BurnedUnPayablePoint @entity(immutable: true) {
  id: Bytes!
  phone: Bytes! # bytes32
  amount: BigInt! # uint256
  balance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LoyaltyBridgeDeposited @entity(immutable: true) {
  id: Bytes!
  tokenId: Bytes! # bytes32
  depositId: Bytes! # bytes32
  account: Bytes! # address
  amount: BigInt! # uint256
  balance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LoyaltyBridgeWithdrawn @entity(immutable: true) {
  id: Bytes!
  tokenId: Bytes! # bytes32
  withdrawId: Bytes! # bytes32
  account: Bytes! # address
  amount: BigInt! # uint256
  balance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LoyaltyTransfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChainBridgeDeposited @entity(immutable: true) {
  id: Bytes!
  tokenId: Bytes! # bytes32
  depositId: Bytes! # bytes32
  account: Bytes! # address
  amount: BigInt! # uint256
  balance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChainBridgeWithdrawn @entity(immutable: true) {
  id: Bytes!
  tokenId: Bytes! # bytes32
  withdrawId: Bytes! # bytes32
  account: Bytes! # address
  amount: BigInt! # uint256
  balance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
